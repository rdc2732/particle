
c:/Users/Rick/Documents/dev/particle/hello/target/1.5.2/argon/hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d74  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5d90  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e35c  000d5d94  0001e35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000428  2003e3c8  2003e3c8  0002e3c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5e00  000d5e00  00025e00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5e28  000d5e28  00025e28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d84ea  00000000  00000000  00025e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001064c  00000000  00000000  000fe316  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001bbbc  00000000  00000000  0010e962  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002258  00000000  00000000  0012a51e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004270  00000000  00000000  0012c776  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033f8f  00000000  00000000  001309e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026516  00000000  00000000  00164975  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104997  00000000  00000000  0018ae8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c6fc  00000000  00000000  0028f824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fc9f 	bl	d5970 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fca4 	bl	d5986 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e35c 	.word	0x2003e35c
   d4048:	000d5d94 	.word	0x000d5d94
   d404c:	2003e3c8 	.word	0x2003e3c8
   d4050:	2003e3c8 	.word	0x2003e3c8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fc11 	bl	d4880 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5d8c 	.word	0x000d5d8c
   d4080:	000d5d54 	.word	0x000d5d54

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f83f 	bl	d410c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bbb7 	b.w	d4804 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba37 	b.w	d4508 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba3d 	b.w	d4518 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba3b 	b.w	d4518 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
 */

int led = D7;

// setup() runs once, when the device is first turned on.
void setup() {
   d40b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d40b6:	4b11      	ldr	r3, [pc, #68]	; (d40fc <setup+0x48>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40b8:	4a11      	ldr	r2, [pc, #68]	; (d4100 <setup+0x4c>)
   d40ba:	781b      	ldrb	r3, [r3, #0]
   d40bc:	f88d 3000 	strb.w	r3, [sp]
   d40c0:	4910      	ldr	r1, [pc, #64]	; (d4104 <setup+0x50>)
   d40c2:	233c      	movs	r3, #60	; 0x3c
   d40c4:	a802      	add	r0, sp, #8
   d40c6:	f000 fd49 	bl	d4b5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ca:	9c03      	ldr	r4, [sp, #12]
   d40cc:	b17c      	cbz	r4, d40ee <setup+0x3a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40ce:	6863      	ldr	r3, [r4, #4]
   d40d0:	3b01      	subs	r3, #1
   d40d2:	6063      	str	r3, [r4, #4]
   d40d4:	b95b      	cbnz	r3, d40ee <setup+0x3a>
        {
          _M_dispose();
   d40d6:	6823      	ldr	r3, [r4, #0]
   d40d8:	4620      	mov	r0, r4
   d40da:	689b      	ldr	r3, [r3, #8]
   d40dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40de:	68a3      	ldr	r3, [r4, #8]
   d40e0:	3b01      	subs	r3, #1
   d40e2:	60a3      	str	r3, [r4, #8]
   d40e4:	b91b      	cbnz	r3, d40ee <setup+0x3a>
            _M_destroy();
   d40e6:	6823      	ldr	r3, [r4, #0]
   d40e8:	4620      	mov	r0, r4
   d40ea:	68db      	ldr	r3, [r3, #12]
   d40ec:	4798      	blx	r3
  // Put initialization like pinMode and begin functions here.
  Particle.publish("Testing", "Hi Elijah");

  pinMode(led, OUTPUT);
   d40ee:	4b06      	ldr	r3, [pc, #24]	; (d4108 <setup+0x54>)
   d40f0:	2101      	movs	r1, #1
   d40f2:	8818      	ldrh	r0, [r3, #0]
   d40f4:	f001 fa58 	bl	d55a8 <pinMode>
}
   d40f8:	b004      	add	sp, #16
   d40fa:	bd10      	pop	{r4, pc}
   d40fc:	2003e3cc 	.word	0x2003e3cc
   d4100:	000d5a44 	.word	0x000d5a44
   d4104:	000d5a4e 	.word	0x000d5a4e
   d4108:	2003e35c 	.word	0x2003e35c

000d410c <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d410c:	b510      	push	{r4, lr}
  // The core of your code will likely live here.

  digitalWrite(led, HIGH);
   d410e:	4c17      	ldr	r4, [pc, #92]	; (d416c <loop+0x60>)
   d4110:	2101      	movs	r1, #1
   d4112:	8820      	ldrh	r0, [r4, #0]
   d4114:	f001 fa59 	bl	d55ca <digitalWrite>
  delay(100);
   d4118:	2064      	movs	r0, #100	; 0x64
   d411a:	f000 fb25 	bl	d4768 <delay>

  digitalWrite(led, LOW);
   d411e:	2100      	movs	r1, #0
   d4120:	8820      	ldrh	r0, [r4, #0]
   d4122:	f001 fa52 	bl	d55ca <digitalWrite>
  delay(100);
   d4126:	2064      	movs	r0, #100	; 0x64
   d4128:	f000 fb1e 	bl	d4768 <delay>

  digitalWrite(led, HIGH);
   d412c:	2101      	movs	r1, #1
   d412e:	8820      	ldrh	r0, [r4, #0]
   d4130:	f001 fa4b 	bl	d55ca <digitalWrite>
  delay(100);
   d4134:	2064      	movs	r0, #100	; 0x64
   d4136:	f000 fb17 	bl	d4768 <delay>

  digitalWrite(led, LOW);
   d413a:	2100      	movs	r1, #0
   d413c:	8820      	ldrh	r0, [r4, #0]
   d413e:	f001 fa44 	bl	d55ca <digitalWrite>
  delay(100);
   d4142:	2064      	movs	r0, #100	; 0x64
   d4144:	f000 fb10 	bl	d4768 <delay>

  digitalWrite(led, HIGH);
   d4148:	2101      	movs	r1, #1
   d414a:	8820      	ldrh	r0, [r4, #0]
   d414c:	f001 fa3d 	bl	d55ca <digitalWrite>
  delay(100);
   d4150:	2064      	movs	r0, #100	; 0x64
   d4152:	f000 fb09 	bl	d4768 <delay>

  digitalWrite(led, LOW);
   d4156:	8820      	ldrh	r0, [r4, #0]
   d4158:	2100      	movs	r1, #0
   d415a:	f001 fa36 	bl	d55ca <digitalWrite>
  delay(1200);
   d415e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
  
   d4162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  digitalWrite(led, HIGH);
  delay(100);

  digitalWrite(led, LOW);
  delay(1200);
   d4166:	f000 baff 	b.w	d4768 <delay>
   d416a:	bf00      	nop
   d416c:	2003e35c 	.word	0x2003e35c

000d4170 <_GLOBAL__sub_I_led>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4170:	4b02      	ldr	r3, [pc, #8]	; (d417c <_GLOBAL__sub_I_led+0xc>)
   d4172:	2200      	movs	r2, #0
   d4174:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4176:	f000 b813 	b.w	d41a0 <HAL_Pin_Map>
   d417a:	bf00      	nop
   d417c:	2003e3cc 	.word	0x2003e3cc

000d4180 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4180:	b508      	push	{r3, lr}
   d4182:	4b02      	ldr	r3, [pc, #8]	; (d418c <netdb_freeaddrinfo+0xc>)
   d4184:	681b      	ldr	r3, [r3, #0]
   d4186:	689b      	ldr	r3, [r3, #8]
   d4188:	9301      	str	r3, [sp, #4]
   d418a:	bd08      	pop	{r3, pc}
   d418c:	00030268 	.word	0x00030268

000d4190 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4190:	b508      	push	{r3, lr}
   d4192:	4b02      	ldr	r3, [pc, #8]	; (d419c <netdb_getaddrinfo+0xc>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	68db      	ldr	r3, [r3, #12]
   d4198:	9301      	str	r3, [sp, #4]
   d419a:	bd08      	pop	{r3, pc}
   d419c:	00030268 	.word	0x00030268

000d41a0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d41a0:	b508      	push	{r3, lr}
   d41a2:	4b02      	ldr	r3, [pc, #8]	; (d41ac <HAL_Pin_Map+0xc>)
   d41a4:	681b      	ldr	r3, [r3, #0]
   d41a6:	681b      	ldr	r3, [r3, #0]
   d41a8:	9301      	str	r3, [sp, #4]
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	0003022c 	.word	0x0003022c

000d41b0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d41b0:	b508      	push	{r3, lr}
   d41b2:	4b02      	ldr	r3, [pc, #8]	; (d41bc <HAL_Pin_Mode+0xc>)
   d41b4:	681b      	ldr	r3, [r3, #0]
   d41b6:	689b      	ldr	r3, [r3, #8]
   d41b8:	9301      	str	r3, [sp, #4]
   d41ba:	bd08      	pop	{r3, pc}
   d41bc:	0003022c 	.word	0x0003022c

000d41c0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d41c0:	b508      	push	{r3, lr}
   d41c2:	4b02      	ldr	r3, [pc, #8]	; (d41cc <HAL_Get_Pin_Mode+0xc>)
   d41c4:	681b      	ldr	r3, [r3, #0]
   d41c6:	68db      	ldr	r3, [r3, #12]
   d41c8:	9301      	str	r3, [sp, #4]
   d41ca:	bd08      	pop	{r3, pc}
   d41cc:	0003022c 	.word	0x0003022c

000d41d0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d41d0:	b508      	push	{r3, lr}
   d41d2:	4b02      	ldr	r3, [pc, #8]	; (d41dc <HAL_GPIO_Write+0xc>)
   d41d4:	681b      	ldr	r3, [r3, #0]
   d41d6:	691b      	ldr	r3, [r3, #16]
   d41d8:	9301      	str	r3, [sp, #4]
   d41da:	bd08      	pop	{r3, pc}
   d41dc:	0003022c 	.word	0x0003022c

000d41e0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d41e0:	b508      	push	{r3, lr}
   d41e2:	4b02      	ldr	r3, [pc, #8]	; (d41ec <HAL_SPI_Init+0xc>)
   d41e4:	681b      	ldr	r3, [r3, #0]
   d41e6:	69db      	ldr	r3, [r3, #28]
   d41e8:	9301      	str	r3, [sp, #4]
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	00030230 	.word	0x00030230

000d41f0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d41f0:	b508      	push	{r3, lr}
   d41f2:	4b02      	ldr	r3, [pc, #8]	; (d41fc <HAL_SPI_Is_Enabled+0xc>)
   d41f4:	681b      	ldr	r3, [r3, #0]
   d41f6:	6a1b      	ldr	r3, [r3, #32]
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	bd08      	pop	{r3, pc}
   d41fc:	00030230 	.word	0x00030230

000d4200 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4200:	b508      	push	{r3, lr}
   d4202:	4b02      	ldr	r3, [pc, #8]	; (d420c <HAL_RNG_GetRandomNumber+0xc>)
   d4204:	681b      	ldr	r3, [r3, #0]
   d4206:	685b      	ldr	r3, [r3, #4]
   d4208:	9301      	str	r3, [sp, #4]
   d420a:	bd08      	pop	{r3, pc}
   d420c:	00030218 	.word	0x00030218

000d4210 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4210:	b508      	push	{r3, lr}
   d4212:	4b02      	ldr	r3, [pc, #8]	; (d421c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4214:	681b      	ldr	r3, [r3, #0]
   d4216:	695b      	ldr	r3, [r3, #20]
   d4218:	9301      	str	r3, [sp, #4]
   d421a:	bd08      	pop	{r3, pc}
   d421c:	00030218 	.word	0x00030218

000d4220 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4220:	b508      	push	{r3, lr}
   d4222:	4b02      	ldr	r3, [pc, #8]	; (d422c <os_thread_is_current+0xc>)
   d4224:	681b      	ldr	r3, [r3, #0]
   d4226:	689b      	ldr	r3, [r3, #8]
   d4228:	9301      	str	r3, [sp, #4]
   d422a:	bd08      	pop	{r3, pc}
   d422c:	00030248 	.word	0x00030248

000d4230 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4230:	b508      	push	{r3, lr}
   d4232:	4b02      	ldr	r3, [pc, #8]	; (d423c <os_thread_join+0xc>)
   d4234:	681b      	ldr	r3, [r3, #0]
   d4236:	691b      	ldr	r3, [r3, #16]
   d4238:	9301      	str	r3, [sp, #4]
   d423a:	bd08      	pop	{r3, pc}
   d423c:	00030248 	.word	0x00030248

000d4240 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b02      	ldr	r3, [pc, #8]	; (d424c <os_thread_cleanup+0xc>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	695b      	ldr	r3, [r3, #20]
   d4248:	9301      	str	r3, [sp, #4]
   d424a:	bd08      	pop	{r3, pc}
   d424c:	00030248 	.word	0x00030248

000d4250 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4250:	b508      	push	{r3, lr}
   d4252:	4b02      	ldr	r3, [pc, #8]	; (d425c <os_mutex_recursive_create+0xc>)
   d4254:	681b      	ldr	r3, [r3, #0]
   d4256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4258:	9301      	str	r3, [sp, #4]
   d425a:	bd08      	pop	{r3, pc}
   d425c:	00030248 	.word	0x00030248

000d4260 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4260:	b508      	push	{r3, lr}
   d4262:	4b02      	ldr	r3, [pc, #8]	; (d426c <os_mutex_recursive_destroy+0xc>)
   d4264:	681b      	ldr	r3, [r3, #0]
   d4266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4268:	9301      	str	r3, [sp, #4]
   d426a:	bd08      	pop	{r3, pc}
   d426c:	00030248 	.word	0x00030248

000d4270 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4270:	b508      	push	{r3, lr}
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <inet_inet_ntop+0xc>)
   d4274:	681b      	ldr	r3, [r3, #0]
   d4276:	695b      	ldr	r3, [r3, #20]
   d4278:	9301      	str	r3, [sp, #4]
   d427a:	bd08      	pop	{r3, pc}
   d427c:	00030264 	.word	0x00030264

000d4280 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4280:	b508      	push	{r3, lr}
   d4282:	4b02      	ldr	r3, [pc, #8]	; (d428c <HAL_USART_Init+0xc>)
   d4284:	681b      	ldr	r3, [r3, #0]
   d4286:	681b      	ldr	r3, [r3, #0]
   d4288:	9301      	str	r3, [sp, #4]
   d428a:	bd08      	pop	{r3, pc}
   d428c:	0003023c 	.word	0x0003023c

000d4290 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4290:	b508      	push	{r3, lr}
   d4292:	4b02      	ldr	r3, [pc, #8]	; (d429c <HAL_USART_Write_Data+0xc>)
   d4294:	681b      	ldr	r3, [r3, #0]
   d4296:	68db      	ldr	r3, [r3, #12]
   d4298:	9301      	str	r3, [sp, #4]
   d429a:	bd08      	pop	{r3, pc}
   d429c:	0003023c 	.word	0x0003023c

000d42a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d42a0:	b508      	push	{r3, lr}
   d42a2:	4b02      	ldr	r3, [pc, #8]	; (d42ac <HAL_USART_Available_Data+0xc>)
   d42a4:	681b      	ldr	r3, [r3, #0]
   d42a6:	691b      	ldr	r3, [r3, #16]
   d42a8:	9301      	str	r3, [sp, #4]
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	0003023c 	.word	0x0003023c

000d42b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d42b0:	b508      	push	{r3, lr}
   d42b2:	4b02      	ldr	r3, [pc, #8]	; (d42bc <HAL_USART_Read_Data+0xc>)
   d42b4:	681b      	ldr	r3, [r3, #0]
   d42b6:	695b      	ldr	r3, [r3, #20]
   d42b8:	9301      	str	r3, [sp, #4]
   d42ba:	bd08      	pop	{r3, pc}
   d42bc:	0003023c 	.word	0x0003023c

000d42c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d42c0:	b508      	push	{r3, lr}
   d42c2:	4b02      	ldr	r3, [pc, #8]	; (d42cc <HAL_USART_Peek_Data+0xc>)
   d42c4:	681b      	ldr	r3, [r3, #0]
   d42c6:	699b      	ldr	r3, [r3, #24]
   d42c8:	9301      	str	r3, [sp, #4]
   d42ca:	bd08      	pop	{r3, pc}
   d42cc:	0003023c 	.word	0x0003023c

000d42d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d42d0:	b508      	push	{r3, lr}
   d42d2:	4b02      	ldr	r3, [pc, #8]	; (d42dc <HAL_USART_Flush_Data+0xc>)
   d42d4:	681b      	ldr	r3, [r3, #0]
   d42d6:	69db      	ldr	r3, [r3, #28]
   d42d8:	9301      	str	r3, [sp, #4]
   d42da:	bd08      	pop	{r3, pc}
   d42dc:	0003023c 	.word	0x0003023c

000d42e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d42e0:	b508      	push	{r3, lr}
   d42e2:	4b02      	ldr	r3, [pc, #8]	; (d42ec <HAL_USART_Is_Enabled+0xc>)
   d42e4:	681b      	ldr	r3, [r3, #0]
   d42e6:	6a1b      	ldr	r3, [r3, #32]
   d42e8:	9301      	str	r3, [sp, #4]
   d42ea:	bd08      	pop	{r3, pc}
   d42ec:	0003023c 	.word	0x0003023c

000d42f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d42f0:	b508      	push	{r3, lr}
   d42f2:	4b02      	ldr	r3, [pc, #8]	; (d42fc <HAL_USART_Available_Data_For_Write+0xc>)
   d42f4:	681b      	ldr	r3, [r3, #0]
   d42f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42f8:	9301      	str	r3, [sp, #4]
   d42fa:	bd08      	pop	{r3, pc}
   d42fc:	0003023c 	.word	0x0003023c

000d4300 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4300:	b508      	push	{r3, lr}
   d4302:	4b02      	ldr	r3, [pc, #8]	; (d430c <HAL_I2C_Write_Data+0xc>)
   d4304:	681b      	ldr	r3, [r3, #0]
   d4306:	6a1b      	ldr	r3, [r3, #32]
   d4308:	9301      	str	r3, [sp, #4]
   d430a:	bd08      	pop	{r3, pc}
   d430c:	00030228 	.word	0x00030228

000d4310 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4310:	b508      	push	{r3, lr}
   d4312:	4b02      	ldr	r3, [pc, #8]	; (d431c <HAL_I2C_Available_Data+0xc>)
   d4314:	681b      	ldr	r3, [r3, #0]
   d4316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4318:	9301      	str	r3, [sp, #4]
   d431a:	bd08      	pop	{r3, pc}
   d431c:	00030228 	.word	0x00030228

000d4320 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4320:	b508      	push	{r3, lr}
   d4322:	4b02      	ldr	r3, [pc, #8]	; (d432c <HAL_I2C_Read_Data+0xc>)
   d4324:	681b      	ldr	r3, [r3, #0]
   d4326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4328:	9301      	str	r3, [sp, #4]
   d432a:	bd08      	pop	{r3, pc}
   d432c:	00030228 	.word	0x00030228

000d4330 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4330:	b508      	push	{r3, lr}
   d4332:	4b02      	ldr	r3, [pc, #8]	; (d433c <HAL_I2C_Peek_Data+0xc>)
   d4334:	681b      	ldr	r3, [r3, #0]
   d4336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4338:	9301      	str	r3, [sp, #4]
   d433a:	bd08      	pop	{r3, pc}
   d433c:	00030228 	.word	0x00030228

000d4340 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4340:	b508      	push	{r3, lr}
   d4342:	4b02      	ldr	r3, [pc, #8]	; (d434c <HAL_I2C_Flush_Data+0xc>)
   d4344:	681b      	ldr	r3, [r3, #0]
   d4346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4348:	9301      	str	r3, [sp, #4]
   d434a:	bd08      	pop	{r3, pc}
   d434c:	00030228 	.word	0x00030228

000d4350 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4350:	b508      	push	{r3, lr}
   d4352:	4b02      	ldr	r3, [pc, #8]	; (d435c <HAL_I2C_Is_Enabled+0xc>)
   d4354:	681b      	ldr	r3, [r3, #0]
   d4356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4358:	9301      	str	r3, [sp, #4]
   d435a:	bd08      	pop	{r3, pc}
   d435c:	00030228 	.word	0x00030228

000d4360 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4360:	b508      	push	{r3, lr}
   d4362:	4b02      	ldr	r3, [pc, #8]	; (d436c <HAL_I2C_Init+0xc>)
   d4364:	681b      	ldr	r3, [r3, #0]
   d4366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4368:	9301      	str	r3, [sp, #4]
   d436a:	bd08      	pop	{r3, pc}
   d436c:	00030228 	.word	0x00030228

000d4370 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4370:	b508      	push	{r3, lr}
   d4372:	4b02      	ldr	r3, [pc, #8]	; (d437c <HAL_USB_USART_Init+0xc>)
   d4374:	681b      	ldr	r3, [r3, #0]
   d4376:	681b      	ldr	r3, [r3, #0]
   d4378:	9301      	str	r3, [sp, #4]
   d437a:	bd08      	pop	{r3, pc}
   d437c:	0003024c 	.word	0x0003024c

000d4380 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4380:	b508      	push	{r3, lr}
   d4382:	4b02      	ldr	r3, [pc, #8]	; (d438c <HAL_USB_USART_Available_Data+0xc>)
   d4384:	681b      	ldr	r3, [r3, #0]
   d4386:	691b      	ldr	r3, [r3, #16]
   d4388:	9301      	str	r3, [sp, #4]
   d438a:	bd08      	pop	{r3, pc}
   d438c:	0003024c 	.word	0x0003024c

000d4390 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4390:	b508      	push	{r3, lr}
   d4392:	4b02      	ldr	r3, [pc, #8]	; (d439c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4394:	681b      	ldr	r3, [r3, #0]
   d4396:	695b      	ldr	r3, [r3, #20]
   d4398:	9301      	str	r3, [sp, #4]
   d439a:	bd08      	pop	{r3, pc}
   d439c:	0003024c 	.word	0x0003024c

000d43a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43a0:	b508      	push	{r3, lr}
   d43a2:	4b02      	ldr	r3, [pc, #8]	; (d43ac <HAL_USB_USART_Receive_Data+0xc>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	699b      	ldr	r3, [r3, #24]
   d43a8:	9301      	str	r3, [sp, #4]
   d43aa:	bd08      	pop	{r3, pc}
   d43ac:	0003024c 	.word	0x0003024c

000d43b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43b0:	b508      	push	{r3, lr}
   d43b2:	4b02      	ldr	r3, [pc, #8]	; (d43bc <HAL_USB_USART_Send_Data+0xc>)
   d43b4:	681b      	ldr	r3, [r3, #0]
   d43b6:	69db      	ldr	r3, [r3, #28]
   d43b8:	9301      	str	r3, [sp, #4]
   d43ba:	bd08      	pop	{r3, pc}
   d43bc:	0003024c 	.word	0x0003024c

000d43c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d43c0:	b508      	push	{r3, lr}
   d43c2:	4b02      	ldr	r3, [pc, #8]	; (d43cc <HAL_USB_USART_Flush_Data+0xc>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	6a1b      	ldr	r3, [r3, #32]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	bd08      	pop	{r3, pc}
   d43cc:	0003024c 	.word	0x0003024c

000d43d0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d43d0:	b508      	push	{r3, lr}
   d43d2:	4b02      	ldr	r3, [pc, #8]	; (d43dc <set_system_mode+0xc>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	685b      	ldr	r3, [r3, #4]
   d43d8:	9301      	str	r3, [sp, #4]
   d43da:	bd08      	pop	{r3, pc}
   d43dc:	00030220 	.word	0x00030220

000d43e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d43e0:	b508      	push	{r3, lr}
   d43e2:	4b02      	ldr	r3, [pc, #8]	; (d43ec <system_delay_ms+0xc>)
   d43e4:	681b      	ldr	r3, [r3, #0]
   d43e6:	695b      	ldr	r3, [r3, #20]
   d43e8:	9301      	str	r3, [sp, #4]
   d43ea:	bd08      	pop	{r3, pc}
   d43ec:	00030220 	.word	0x00030220

000d43f0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d43f0:	b508      	push	{r3, lr}
   d43f2:	4b02      	ldr	r3, [pc, #8]	; (d43fc <application_thread_current+0xc>)
   d43f4:	681b      	ldr	r3, [r3, #0]
   d43f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d43f8:	9301      	str	r3, [sp, #4]
   d43fa:	bd08      	pop	{r3, pc}
   d43fc:	00030220 	.word	0x00030220

000d4400 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4400:	b508      	push	{r3, lr}
   d4402:	4b02      	ldr	r3, [pc, #8]	; (d440c <application_thread_invoke+0xc>)
   d4404:	681b      	ldr	r3, [r3, #0]
   d4406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4408:	9301      	str	r3, [sp, #4]
   d440a:	bd08      	pop	{r3, pc}
   d440c:	00030220 	.word	0x00030220

000d4410 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4410:	b508      	push	{r3, lr}
   d4412:	4b03      	ldr	r3, [pc, #12]	; (d4420 <system_ctrl_set_app_request_handler+0x10>)
   d4414:	681b      	ldr	r3, [r3, #0]
   d4416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d441a:	9301      	str	r3, [sp, #4]
   d441c:	bd08      	pop	{r3, pc}
   d441e:	0000      	.short	0x0000
   d4420:	00030220 	.word	0x00030220

000d4424 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b03      	ldr	r3, [pc, #12]	; (d4434 <system_ctrl_set_result+0x10>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d442e:	9301      	str	r3, [sp, #4]
   d4430:	bd08      	pop	{r3, pc}
   d4432:	0000      	.short	0x0000
   d4434:	00030220 	.word	0x00030220

000d4438 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <network_connect+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	685b      	ldr	r3, [r3, #4]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030240 	.word	0x00030240

000d4448 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <network_connecting+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	689b      	ldr	r3, [r3, #8]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030240 	.word	0x00030240

000d4458 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <network_disconnect+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	68db      	ldr	r3, [r3, #12]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030240 	.word	0x00030240

000d4468 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <network_ready+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	691b      	ldr	r3, [r3, #16]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030240 	.word	0x00030240

000d4478 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <network_on+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	695b      	ldr	r3, [r3, #20]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030240 	.word	0x00030240

000d4488 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <network_off+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	699b      	ldr	r3, [r3, #24]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030240 	.word	0x00030240

000d4498 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <network_listen+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	69db      	ldr	r3, [r3, #28]
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030240 	.word	0x00030240

000d44a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <network_listening+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6a1b      	ldr	r3, [r3, #32]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030240 	.word	0x00030240

000d44b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <network_set_listen_timeout+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030240 	.word	0x00030240

000d44c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <network_get_listen_timeout+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030240 	.word	0x00030240

000d44d8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <spark_cloud_flag_connected+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	695b      	ldr	r3, [r3, #20]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030244 	.word	0x00030244

000d44e8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <spark_send_event+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6a1b      	ldr	r3, [r3, #32]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030244 	.word	0x00030244

000d44f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <spark_set_random_seed_from_cloud_handler+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030244 	.word	0x00030244

000d4508 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <malloc+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	681b      	ldr	r3, [r3, #0]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003021c 	.word	0x0003021c

000d4518 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <free+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	685b      	ldr	r3, [r3, #4]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003021c 	.word	0x0003021c

000d4528 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <abort+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003021c 	.word	0x0003021c

000d4538 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <_malloc_r+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003021c 	.word	0x0003021c

000d4548 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4548:	2200      	movs	r2, #0
   d454a:	4611      	mov	r1, r2
   d454c:	6840      	ldr	r0, [r0, #4]
   d454e:	f7ff bfab 	b.w	d44a8 <network_listening>

000d4552 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4552:	2200      	movs	r2, #0
   d4554:	4611      	mov	r1, r2
   d4556:	6840      	ldr	r0, [r0, #4]
   d4558:	f7ff bfb6 	b.w	d44c8 <network_get_listen_timeout>

000d455c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d455c:	2200      	movs	r2, #0
   d455e:	6840      	ldr	r0, [r0, #4]
   d4560:	f7ff bfaa 	b.w	d44b8 <network_set_listen_timeout>

000d4564 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4564:	2200      	movs	r2, #0
   d4566:	f081 0101 	eor.w	r1, r1, #1
   d456a:	6840      	ldr	r0, [r0, #4]
   d456c:	f7ff bf94 	b.w	d4498 <network_listen>

000d4570 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4570:	2300      	movs	r3, #0
   d4572:	461a      	mov	r2, r3
   d4574:	4619      	mov	r1, r3
   d4576:	6840      	ldr	r0, [r0, #4]
   d4578:	f7ff bf86 	b.w	d4488 <network_off>

000d457c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d457c:	2300      	movs	r3, #0
   d457e:	461a      	mov	r2, r3
   d4580:	4619      	mov	r1, r3
   d4582:	6840      	ldr	r0, [r0, #4]
   d4584:	f7ff bf78 	b.w	d4478 <network_on>

000d4588 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4588:	2200      	movs	r2, #0
   d458a:	4611      	mov	r1, r2
   d458c:	6840      	ldr	r0, [r0, #4]
   d458e:	f7ff bf6b 	b.w	d4468 <network_ready>

000d4592 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4592:	2200      	movs	r2, #0
   d4594:	4611      	mov	r1, r2
   d4596:	6840      	ldr	r0, [r0, #4]
   d4598:	f7ff bf56 	b.w	d4448 <network_connecting>

000d459c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d459c:	2200      	movs	r2, #0
   d459e:	2102      	movs	r1, #2
   d45a0:	6840      	ldr	r0, [r0, #4]
   d45a2:	f7ff bf59 	b.w	d4458 <network_disconnect>

000d45a6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d45a6:	2300      	movs	r3, #0
   d45a8:	461a      	mov	r2, r3
   d45aa:	6840      	ldr	r0, [r0, #4]
   d45ac:	f7ff bf44 	b.w	d4438 <network_connect>

000d45b0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45b0:	4b02      	ldr	r3, [pc, #8]	; (d45bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45b2:	2203      	movs	r2, #3
   d45b4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45b6:	4a02      	ldr	r2, [pc, #8]	; (d45c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45b8:	601a      	str	r2, [r3, #0]
   d45ba:	4770      	bx	lr
   d45bc:	2003e3d0 	.word	0x2003e3d0
   d45c0:	000d5a60 	.word	0x000d5a60

000d45c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d45c4:	b510      	push	{r4, lr}
   d45c6:	4604      	mov	r4, r0
{
    _spi = spi;
   d45c8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d45ca:	4608      	mov	r0, r1
   d45cc:	f7ff fe08 	bl	d41e0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d45d0:	2300      	movs	r3, #0
   d45d2:	6063      	str	r3, [r4, #4]
}
   d45d4:	4620      	mov	r0, r4
   d45d6:	bd10      	pop	{r4, pc}

000d45d8 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d45d8:	7800      	ldrb	r0, [r0, #0]
   d45da:	f7ff be09 	b.w	d41f0 <HAL_SPI_Is_Enabled>

000d45de <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d45de:	b510      	push	{r4, lr}
   d45e0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d45e2:	6800      	ldr	r0, [r0, #0]
   d45e4:	b118      	cbz	r0, d45ee <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d45e6:	f7ff ff97 	bl	d4518 <free>
            wakeupSource_ = nullptr;
   d45ea:	2300      	movs	r3, #0
   d45ec:	6023      	str	r3, [r4, #0]
   d45ee:	bd10      	pop	{r4, pc}

000d45f0 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d45f0:	b510      	push	{r4, lr}
   d45f2:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d45f4:	f7ff fff3 	bl	d45de <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d45f8:	4620      	mov	r0, r4
   d45fa:	bd10      	pop	{r4, pc}

000d45fc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d45fc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d45fe:	4c09      	ldr	r4, [pc, #36]	; (d4624 <_GLOBAL__sub_I_System+0x28>)
   d4600:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4602:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4606:	6020      	str	r0, [r4, #0]
   d4608:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d460a:	71a0      	strb	r0, [r4, #6]
   d460c:	8120      	strh	r0, [r4, #8]
   d460e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4610:	f7ff fede 	bl	d43d0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4614:	4620      	mov	r0, r4
   d4616:	4a04      	ldr	r2, [pc, #16]	; (d4628 <_GLOBAL__sub_I_System+0x2c>)
   d4618:	4904      	ldr	r1, [pc, #16]	; (d462c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d461a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d461e:	f001 b82d 	b.w	d567c <__aeabi_atexit>
   d4622:	bf00      	nop
   d4624:	2003e3d8 	.word	0x2003e3d8
   d4628:	2003e3c8 	.word	0x2003e3c8
   d462c:	000d45f1 	.word	0x000d45f1

000d4630 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4630:	b510      	push	{r4, lr}
   d4632:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4634:	6800      	ldr	r0, [r0, #0]
   d4636:	b108      	cbz	r0, d463c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4638:	f7ff fe12 	bl	d4260 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d463c:	4620      	mov	r0, r4
   d463e:	bd10      	pop	{r4, pc}

000d4640 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4640:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4642:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4644:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4646:	689b      	ldr	r3, [r3, #8]
   d4648:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d464a:	68a3      	ldr	r3, [r4, #8]
   d464c:	3b01      	subs	r3, #1
   d464e:	60a3      	str	r3, [r4, #8]
   d4650:	b92b      	cbnz	r3, d465e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4652:	6823      	ldr	r3, [r4, #0]
   d4654:	4620      	mov	r0, r4
   d4656:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d465c:	4718      	bx	r3
   d465e:	bd10      	pop	{r4, pc}

000d4660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4660:	680b      	ldr	r3, [r1, #0]
   d4662:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4664:	b113      	cbz	r3, d466c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4666:	685a      	ldr	r2, [r3, #4]
   d4668:	3201      	adds	r2, #1
   d466a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d466c:	4770      	bx	lr

000d466e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d466e:	b510      	push	{r4, lr}
   d4670:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4672:	6800      	ldr	r0, [r0, #0]
   d4674:	b128      	cbz	r0, d4682 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4676:	6843      	ldr	r3, [r0, #4]
   d4678:	3b01      	subs	r3, #1
   d467a:	6043      	str	r3, [r0, #4]
   d467c:	b90b      	cbnz	r3, d4682 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d467e:	f7ff ffdf 	bl	d4640 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4682:	4620      	mov	r0, r4
   d4684:	bd10      	pop	{r4, pc}
	...

000d4688 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4688:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d468a:	4c06      	ldr	r4, [pc, #24]	; (d46a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d468c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d468e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4690:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4692:	f7ff fddd 	bl	d4250 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4696:	4620      	mov	r0, r4
   d4698:	4a03      	ldr	r2, [pc, #12]	; (d46a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d469a:	4904      	ldr	r1, [pc, #16]	; (d46ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d46a0:	f000 bfec 	b.w	d567c <__aeabi_atexit>
   d46a4:	2003e3e4 	.word	0x2003e3e4
   d46a8:	2003e3c8 	.word	0x2003e3c8
   d46ac:	000d4631 	.word	0x000d4631

000d46b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d46b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46b2:	4606      	mov	r6, r0
   d46b4:	460d      	mov	r5, r1
   d46b6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d46b8:	2400      	movs	r4, #0
  while (size--) {
   d46ba:	42bd      	cmp	r5, r7
   d46bc:	d00c      	beq.n	d46d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d46be:	6833      	ldr	r3, [r6, #0]
   d46c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d46c4:	689b      	ldr	r3, [r3, #8]
   d46c6:	4630      	mov	r0, r6
   d46c8:	4798      	blx	r3
     if (chunk>=0)
   d46ca:	2800      	cmp	r0, #0
   d46cc:	db01      	blt.n	d46d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d46ce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d46d0:	e7f3      	b.n	d46ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d46d2:	2c00      	cmp	r4, #0
   d46d4:	bf08      	it	eq
   d46d6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d46d8:	4620      	mov	r0, r4
   d46da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d46dc:	b570      	push	{r4, r5, r6, lr}
   d46de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d46e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d46e2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d46e4:	b149      	cbz	r1, d46fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d46e6:	f001 f99a 	bl	d5a1e <strlen>
   d46ea:	682b      	ldr	r3, [r5, #0]
   d46ec:	4602      	mov	r2, r0
   d46ee:	4621      	mov	r1, r4
   d46f0:	4628      	mov	r0, r5
   d46f2:	68db      	ldr	r3, [r3, #12]
    }
   d46f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d46f8:	4718      	bx	r3
    }
   d46fa:	bd70      	pop	{r4, r5, r6, pc}

000d46fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d46fc:	6803      	ldr	r3, [r0, #0]
   d46fe:	689b      	ldr	r3, [r3, #8]
   d4700:	4718      	bx	r3

000d4702 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4702:	b530      	push	{r4, r5, lr}
   d4704:	b08b      	sub	sp, #44	; 0x2c
   d4706:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4708:	2100      	movs	r1, #0
   d470a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d470e:	2a01      	cmp	r2, #1
   d4710:	bf98      	it	ls
   d4712:	220a      	movls	r2, #10
   d4714:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4718:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d471c:	fb05 3312 	mls	r3, r5, r2, r3
   d4720:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4724:	2b09      	cmp	r3, #9
   d4726:	bf94      	ite	ls
   d4728:	3330      	addls	r3, #48	; 0x30
   d472a:	3337      	addhi	r3, #55	; 0x37
   d472c:	b2db      	uxtb	r3, r3
   d472e:	4621      	mov	r1, r4
   d4730:	f804 3901 	strb.w	r3, [r4], #-1
   d4734:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4736:	2d00      	cmp	r5, #0
   d4738:	d1ee      	bne.n	d4718 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d473a:	f7ff ffcf 	bl	d46dc <_ZN5Print5writeEPKc>
}
   d473e:	b00b      	add	sp, #44	; 0x2c
   d4740:	bd30      	pop	{r4, r5, pc}
	...

000d4744 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4744:	4b01      	ldr	r3, [pc, #4]	; (d474c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4746:	4a02      	ldr	r2, [pc, #8]	; (d4750 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4748:	601a      	str	r2, [r3, #0]
   d474a:	4770      	bx	lr
   d474c:	2003e3e8 	.word	0x2003e3e8
   d4750:	000d5aff 	.word	0x000d5aff

000d4754 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4754:	4b02      	ldr	r3, [pc, #8]	; (d4760 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4756:	681a      	ldr	r2, [r3, #0]
   d4758:	4b02      	ldr	r3, [pc, #8]	; (d4764 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d475a:	601a      	str	r2, [r3, #0]
   d475c:	4770      	bx	lr
   d475e:	bf00      	nop
   d4760:	2003e360 	.word	0x2003e360
   d4764:	2003e3ec 	.word	0x2003e3ec

000d4768 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4768:	2100      	movs	r1, #0
   d476a:	f7ff be39 	b.w	d43e0 <system_delay_ms>

000d476e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d476e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4770:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4772:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4774:	b113      	cbz	r3, d477c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4776:	2203      	movs	r2, #3
   d4778:	4601      	mov	r1, r0
   d477a:	4798      	blx	r3
    }
   d477c:	4620      	mov	r0, r4
   d477e:	bd10      	pop	{r4, pc}

000d4780 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4780:	b510      	push	{r4, lr}
   d4782:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4784:	f7ff fff3 	bl	d476e <_ZNSt14_Function_baseD1Ev>
   d4788:	4620      	mov	r0, r4
   d478a:	bd10      	pop	{r4, pc}

000d478c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d478c:	b513      	push	{r0, r1, r4, lr}
   d478e:	460b      	mov	r3, r1
   d4790:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4792:	c803      	ldmia	r0, {r0, r1}
   d4794:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4798:	e893 0003 	ldmia.w	r3, {r0, r1}
   d479c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d47a0:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d47a4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d47a8:	b002      	add	sp, #8
   d47aa:	bd10      	pop	{r4, pc}

000d47ac <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d47ac:	4803      	ldr	r0, [pc, #12]	; (d47bc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d47ae:	4a04      	ldr	r2, [pc, #16]	; (d47c0 <_GLOBAL__sub_I_RGB+0x14>)
   d47b0:	4904      	ldr	r1, [pc, #16]	; (d47c4 <_GLOBAL__sub_I_RGB+0x18>)
   d47b2:	2300      	movs	r3, #0
   d47b4:	6083      	str	r3, [r0, #8]
   d47b6:	f000 bf61 	b.w	d567c <__aeabi_atexit>
   d47ba:	bf00      	nop
   d47bc:	2003e3f0 	.word	0x2003e3f0
   d47c0:	2003e3c8 	.word	0x2003e3c8
   d47c4:	000d4781 	.word	0x000d4781

000d47c8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d47c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d47ca:	4b0c      	ldr	r3, [pc, #48]	; (d47fc <serialEventRun+0x34>)
   d47cc:	b133      	cbz	r3, d47dc <serialEventRun+0x14>
   d47ce:	f000 fc17 	bl	d5000 <_Z16_fetch_usbserialv>
   d47d2:	6803      	ldr	r3, [r0, #0]
   d47d4:	691b      	ldr	r3, [r3, #16]
   d47d6:	4798      	blx	r3
   d47d8:	2800      	cmp	r0, #0
   d47da:	dc09      	bgt.n	d47f0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d47dc:	4b08      	ldr	r3, [pc, #32]	; (d4800 <serialEventRun+0x38>)
   d47de:	b163      	cbz	r3, d47fa <serialEventRun+0x32>
   d47e0:	f000 fc90 	bl	d5104 <_Z22__fetch_global_Serial1v>
   d47e4:	6803      	ldr	r3, [r0, #0]
   d47e6:	691b      	ldr	r3, [r3, #16]
   d47e8:	4798      	blx	r3
   d47ea:	2800      	cmp	r0, #0
   d47ec:	dc03      	bgt.n	d47f6 <serialEventRun+0x2e>
   d47ee:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d47f0:	f3af 8000 	nop.w
   d47f4:	e7f2      	b.n	d47dc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d47f6:	f3af 8000 	nop.w
   d47fa:	bd08      	pop	{r3, pc}
	...

000d4804 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4804:	b508      	push	{r3, lr}
	serialEventRun();
   d4806:	f7ff ffdf 	bl	d47c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d480a:	f7ff fd01 	bl	d4210 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d480e:	4b01      	ldr	r3, [pc, #4]	; (d4814 <_post_loop+0x10>)
   d4810:	6018      	str	r0, [r3, #0]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	2003e730 	.word	0x2003e730

000d4818 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4818:	4802      	ldr	r0, [pc, #8]	; (d4824 <_Z33system_initialize_user_backup_ramv+0xc>)
   d481a:	4a03      	ldr	r2, [pc, #12]	; (d4828 <_Z33system_initialize_user_backup_ramv+0x10>)
   d481c:	4903      	ldr	r1, [pc, #12]	; (d482c <_Z33system_initialize_user_backup_ramv+0x14>)
   d481e:	1a12      	subs	r2, r2, r0
   d4820:	f001 b8a6 	b.w	d5970 <memcpy>
   d4824:	2003f400 	.word	0x2003f400
   d4828:	2003f404 	.word	0x2003f404
   d482c:	000d5d90 	.word	0x000d5d90

000d4830 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4830:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4832:	2300      	movs	r3, #0
   d4834:	9300      	str	r3, [sp, #0]
   d4836:	461a      	mov	r2, r3
   d4838:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d483c:	f7ff fdf2 	bl	d4424 <system_ctrl_set_result>
}
   d4840:	b003      	add	sp, #12
   d4842:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4848 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4848:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d484a:	8843      	ldrh	r3, [r0, #2]
   d484c:	2b0a      	cmp	r3, #10
   d484e:	d008      	beq.n	d4862 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4850:	2b50      	cmp	r3, #80	; 0x50
   d4852:	d109      	bne.n	d4868 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4854:	4b09      	ldr	r3, [pc, #36]	; (d487c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4856:	681b      	ldr	r3, [r3, #0]
   d4858:	b13b      	cbz	r3, d486a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d485a:	b003      	add	sp, #12
   d485c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4860:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4862:	f7ff ffe5 	bl	d4830 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4866:	e006      	b.n	d4876 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4868:	2300      	movs	r3, #0
   d486a:	9300      	str	r3, [sp, #0]
   d486c:	461a      	mov	r2, r3
   d486e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4872:	f7ff fdd7 	bl	d4424 <system_ctrl_set_result>
        break;
    }
}
   d4876:	b003      	add	sp, #12
   d4878:	f85d fb04 	ldr.w	pc, [sp], #4
   d487c:	2003e400 	.word	0x2003e400

000d4880 <module_user_init_hook>:

void module_user_init_hook()
{
   d4880:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4882:	4c10      	ldr	r4, [pc, #64]	; (d48c4 <module_user_init_hook+0x44>)
   d4884:	4d10      	ldr	r5, [pc, #64]	; (d48c8 <module_user_init_hook+0x48>)
   d4886:	6823      	ldr	r3, [r4, #0]
   d4888:	42ab      	cmp	r3, r5
   d488a:	4b10      	ldr	r3, [pc, #64]	; (d48cc <module_user_init_hook+0x4c>)
   d488c:	bf0c      	ite	eq
   d488e:	2201      	moveq	r2, #1
   d4890:	2200      	movne	r2, #0
   d4892:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4894:	d002      	beq.n	d489c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4896:	f7ff ffbf 	bl	d4818 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d489a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d489c:	f7ff fcb0 	bl	d4200 <HAL_RNG_GetRandomNumber>
   d48a0:	4604      	mov	r4, r0
    srand(seed);
   d48a2:	f001 f879 	bl	d5998 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d48a6:	4b0a      	ldr	r3, [pc, #40]	; (d48d0 <module_user_init_hook+0x50>)
   d48a8:	b113      	cbz	r3, d48b0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d48aa:	4620      	mov	r0, r4
   d48ac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d48b0:	2100      	movs	r1, #0
   d48b2:	4807      	ldr	r0, [pc, #28]	; (d48d0 <module_user_init_hook+0x50>)
   d48b4:	f7ff fe20 	bl	d44f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d48b8:	2100      	movs	r1, #0
   d48ba:	4806      	ldr	r0, [pc, #24]	; (d48d4 <module_user_init_hook+0x54>)
}
   d48bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d48c0:	f7ff bda6 	b.w	d4410 <system_ctrl_set_app_request_handler>
   d48c4:	2003f400 	.word	0x2003f400
   d48c8:	9a271c1e 	.word	0x9a271c1e
   d48cc:	2003e404 	.word	0x2003e404
   d48d0:	00000000 	.word	0x00000000
   d48d4:	000d4849 	.word	0x000d4849

000d48d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d48d8:	4770      	bx	lr

000d48da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d48da:	2000      	movs	r0, #0
   d48dc:	4770      	bx	lr

000d48de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d48de:	b510      	push	{r4, lr}
   d48e0:	2110      	movs	r1, #16
   d48e2:	4604      	mov	r4, r0
   d48e4:	f000 fed8 	bl	d5698 <_ZdlPvj>
   d48e8:	4620      	mov	r0, r4
   d48ea:	bd10      	pop	{r4, pc}

000d48ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d48ec:	b508      	push	{r3, lr}
      { delete this; }
   d48ee:	b108      	cbz	r0, d48f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d48f0:	f7ff fff5 	bl	d48de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d48f4:	bd08      	pop	{r3, pc}

000d48f6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d48f6:	2200      	movs	r2, #0
   d48f8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d48fa:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d48fc:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4900:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4902:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4906:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4908:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d490a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d490c:	680c      	ldr	r4, [r1, #0]
   d490e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4910:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4912:	bd10      	pop	{r4, pc}

000d4914 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4914:	b510      	push	{r4, lr}
   d4916:	4604      	mov	r4, r0
    free((void*)msg_);
   d4918:	6800      	ldr	r0, [r0, #0]
   d491a:	f7ff fdfd 	bl	d4518 <free>
}
   d491e:	4620      	mov	r0, r4
   d4920:	bd10      	pop	{r4, pc}

000d4922 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4922:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4924:	68c4      	ldr	r4, [r0, #12]
   d4926:	b1f4      	cbz	r4, d4966 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4928:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d492a:	2b02      	cmp	r3, #2
   d492c:	d103      	bne.n	d4936 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d492e:	f104 000c 	add.w	r0, r4, #12
   d4932:	f7ff ffef 	bl	d4914 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4936:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4938:	b135      	cbz	r5, d4948 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d493a:	4628      	mov	r0, r5
   d493c:	f7ff ff17 	bl	d476e <_ZNSt14_Function_baseD1Ev>
   d4940:	2110      	movs	r1, #16
   d4942:	4628      	mov	r0, r5
   d4944:	f000 fea8 	bl	d5698 <_ZdlPvj>
   d4948:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d494a:	b135      	cbz	r5, d495a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d494c:	4628      	mov	r0, r5
   d494e:	f7ff ff0e 	bl	d476e <_ZNSt14_Function_baseD1Ev>
   d4952:	2110      	movs	r1, #16
   d4954:	4628      	mov	r0, r5
   d4956:	f000 fe9f 	bl	d5698 <_ZdlPvj>
   d495a:	4620      	mov	r0, r4
   d495c:	2114      	movs	r1, #20
   d495e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4962:	f000 be99 	b.w	d5698 <_ZdlPvj>
   d4966:	bd38      	pop	{r3, r4, r5, pc}

000d4968 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4968:	b513      	push	{r0, r1, r4, lr}
   d496a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d496c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4970:	2300      	movs	r3, #0
   d4972:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4974:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4976:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4978:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d497a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d497c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d497e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4980:	f7ff fe75 	bl	d466e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4984:	4620      	mov	r0, r4
   d4986:	b002      	add	sp, #8
   d4988:	bd10      	pop	{r4, pc}

000d498a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d498a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d498c:	460c      	mov	r4, r1
   d498e:	ad02      	add	r5, sp, #8
   d4990:	f854 3b04 	ldr.w	r3, [r4], #4
   d4994:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4998:	4606      	mov	r6, r0
   d499a:	460f      	mov	r7, r1
   d499c:	a801      	add	r0, sp, #4
   d499e:	4621      	mov	r1, r4
   d49a0:	f7ff fe5e 	bl	d4660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d49a4:	4629      	mov	r1, r5
   d49a6:	4630      	mov	r0, r6
   d49a8:	f7ff ffde 	bl	d4968 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49ac:	a801      	add	r0, sp, #4
   d49ae:	f7ff fe5e 	bl	d466e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff fe5b 	bl	d466e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d49b8:	4638      	mov	r0, r7
   d49ba:	2108      	movs	r1, #8
   d49bc:	f000 fe6c 	bl	d5698 <_ZdlPvj>
        return p;
    }
   d49c0:	4630      	mov	r0, r6
   d49c2:	b003      	add	sp, #12
   d49c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d49c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d49c8:	b538      	push	{r3, r4, r5, lr}
   d49ca:	2300      	movs	r3, #0
   d49cc:	4604      	mov	r4, r0
   d49ce:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d49d0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d49d2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d49d4:	f7ff fb5f 	bl	d4096 <_Znwj>
   d49d8:	b128      	cbz	r0, d49e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d49da:	2301      	movs	r3, #1
   d49dc:	6043      	str	r3, [r0, #4]
   d49de:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d49e0:	4b02      	ldr	r3, [pc, #8]	; (d49ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d49e2:	6003      	str	r3, [r0, #0]
   d49e4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d49e6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d49e8:	4620      	mov	r0, r4
   d49ea:	bd38      	pop	{r3, r4, r5, pc}
   d49ec:	000d5ba0 	.word	0x000d5ba0

000d49f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d49f0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d49f2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d49f4:	b90a      	cbnz	r2, d49fa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d49f6:	f000 fe62 	bl	d56be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d49fa:	68c3      	ldr	r3, [r0, #12]
    }
   d49fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a00:	4718      	bx	r3

000d4a02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a02:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a04:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a06:	f100 0110 	add.w	r1, r0, #16
   d4a0a:	f7ff fff1 	bl	d49f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4a0e:	bd08      	pop	{r3, pc}

000d4a10 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a10:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4a12:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4a14:	b90a      	cbnz	r2, d4a1a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4a16:	f000 fe52 	bl	d56be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a1a:	68c3      	ldr	r3, [r0, #12]
    }
   d4a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a20:	4718      	bx	r3

000d4a22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a22:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4a24:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4a26:	f100 0110 	add.w	r1, r0, #16
   d4a2a:	f7ff fff1 	bl	d4a10 <_ZNKSt8functionIFvRKbEEclES1_>
   d4a2e:	bd08      	pop	{r3, pc}

000d4a30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a30:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4a32:	2300      	movs	r3, #0
   d4a34:	6083      	str	r3, [r0, #8]
   d4a36:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4a38:	4604      	mov	r4, r0
   d4a3a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4a3c:	b12b      	cbz	r3, d4a4a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4a3e:	2202      	movs	r2, #2
   d4a40:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4a42:	68eb      	ldr	r3, [r5, #12]
   d4a44:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4a46:	68ab      	ldr	r3, [r5, #8]
   d4a48:	60a3      	str	r3, [r4, #8]
	}
    }
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4a50:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4a52:	b089      	sub	sp, #36	; 0x24
   d4a54:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4a56:	4668      	mov	r0, sp
   d4a58:	f7ff ff4d 	bl	d48f6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4a5c:	2300      	movs	r3, #0
   d4a5e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4a62:	f04f 0202 	mov.w	r2, #2
   d4a66:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4a6a:	2b00      	cmp	r3, #0
   d4a6c:	d103      	bne.n	d4a76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4a6e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4a72:	2900      	cmp	r1, #0
   d4a74:	d1f7      	bne.n	d4a66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4a76:	d002      	beq.n	d4a7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4a78:	f88d 3008 	strb.w	r3, [sp, #8]
   d4a7c:	e063      	b.n	d4b46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4a7e:	f114 050c 	adds.w	r5, r4, #12
   d4a82:	d003      	beq.n	d4a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d4a84:	4669      	mov	r1, sp
   d4a86:	4628      	mov	r0, r5
   d4a88:	f7ff ff35 	bl	d48f6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4a8c:	f3bf 8f5f 	dmb	sy
   d4a90:	2301      	movs	r3, #1
   d4a92:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4a94:	2000      	movs	r0, #0
   d4a96:	f104 0308 	add.w	r3, r4, #8
   d4a9a:	f3bf 8f5f 	dmb	sy
   d4a9e:	e853 6f00 	ldrex	r6, [r3]
   d4aa2:	e843 0200 	strex	r2, r0, [r3]
   d4aa6:	2a00      	cmp	r2, #0
   d4aa8:	d1f9      	bne.n	d4a9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4aaa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4aae:	2e00      	cmp	r6, #0
   d4ab0:	d049      	beq.n	d4b46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4ab2:	f7ff fc9d 	bl	d43f0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4ab6:	b120      	cbz	r0, d4ac2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4ab8:	4629      	mov	r1, r5
   d4aba:	4630      	mov	r0, r6
   d4abc:	f7ff ff98 	bl	d49f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4ac0:	e03a      	b.n	d4b38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4ac2:	4631      	mov	r1, r6
   d4ac4:	a802      	add	r0, sp, #8
   d4ac6:	f7ff ffb3 	bl	d4a30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4aca:	68e0      	ldr	r0, [r4, #12]
   d4acc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4ad0:	b108      	cbz	r0, d4ad6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d4ad2:	f000 ff89 	bl	d59e8 <strdup>
   d4ad6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4ad8:	2010      	movs	r0, #16
   d4ada:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4ade:	f7ff fada 	bl	d4096 <_Znwj>
   d4ae2:	4605      	mov	r5, r0
   d4ae4:	b1e8      	cbz	r0, d4b22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4ae6:	2700      	movs	r7, #0
   d4ae8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4aea:	2018      	movs	r0, #24
   d4aec:	f7ff fad3 	bl	d4096 <_Znwj>
   d4af0:	4604      	mov	r4, r0
   d4af2:	b188      	cbz	r0, d4b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4af4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4af6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4af8:	a802      	add	r0, sp, #8
   d4afa:	f7ff fe47 	bl	d478c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4afe:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4b00:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b02:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b04:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4b06:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4b08:	a906      	add	r1, sp, #24
   d4b0a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b0c:	60e3      	str	r3, [r4, #12]
   d4b0e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4b12:	9205      	str	r2, [sp, #20]
   d4b14:	f7ff feef 	bl	d48f6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4b18:	4b0d      	ldr	r3, [pc, #52]	; (d4b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4b1a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4b1c:	4b0d      	ldr	r3, [pc, #52]	; (d4b54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b1e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4b20:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d4b22:	a806      	add	r0, sp, #24
   d4b24:	f7ff fef6 	bl	d4914 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b28:	a802      	add	r0, sp, #8
   d4b2a:	f7ff fe20 	bl	d476e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4b2e:	2200      	movs	r2, #0
   d4b30:	4629      	mov	r1, r5
   d4b32:	4809      	ldr	r0, [pc, #36]	; (d4b58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4b34:	f7ff fc64 	bl	d4400 <application_thread_invoke>
   d4b38:	4630      	mov	r0, r6
   d4b3a:	f7ff fe18 	bl	d476e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4b3e:	2110      	movs	r1, #16
   d4b40:	4630      	mov	r0, r6
   d4b42:	f000 fda9 	bl	d5698 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d4b46:	4668      	mov	r0, sp
   d4b48:	f7ff fee4 	bl	d4914 <_ZN8particle5ErrorD1Ev>
    }
   d4b4c:	b009      	add	sp, #36	; 0x24
   d4b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b50:	000d4a03 	.word	0x000d4a03
   d4b54:	000d4c79 	.word	0x000d4c79
   d4b58:	000d5151 	.word	0x000d5151

000d4b5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b60:	b08b      	sub	sp, #44	; 0x2c
   d4b62:	4606      	mov	r6, r0
   d4b64:	460f      	mov	r7, r1
   d4b66:	4690      	mov	r8, r2
   d4b68:	4699      	mov	r9, r3
   d4b6a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b6e:	f7ff fcb3 	bl	d44d8 <spark_cloud_flag_connected>
   d4b72:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d4b74:	4683      	mov	fp, r0
   d4b76:	bb30      	cbnz	r0, d4bc6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4b78:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4b7c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4b7e:	a905      	add	r1, sp, #20
   d4b80:	4628      	mov	r0, r5
   d4b82:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4b86:	f7ff feb6 	bl	d48f6 <_ZN8particle5ErrorC1EOS0_>
   d4b8a:	2014      	movs	r0, #20
   d4b8c:	f7ff fa83 	bl	d4096 <_Znwj>
   d4b90:	4604      	mov	r4, r0
   d4b92:	b158      	cbz	r0, d4bac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4b94:	2302      	movs	r3, #2
   d4b96:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4b98:	2301      	movs	r3, #1
   d4b9a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4b9c:	f8c0 b004 	str.w	fp, [r0, #4]
   d4ba0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4ba4:	4629      	mov	r1, r5
   d4ba6:	300c      	adds	r0, #12
   d4ba8:	f7ff fea5 	bl	d48f6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4bac:	4630      	mov	r0, r6
   d4bae:	4621      	mov	r1, r4
   d4bb0:	f840 4b04 	str.w	r4, [r0], #4
   d4bb4:	f7ff ff08 	bl	d49c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4bb8:	4628      	mov	r0, r5
   d4bba:	f7ff feab 	bl	d4914 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4bbe:	a805      	add	r0, sp, #20
   d4bc0:	f7ff fea8 	bl	d4914 <_ZN8particle5ErrorD1Ev>
   d4bc4:	e052      	b.n	d4c6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4bc6:	2400      	movs	r4, #0
   d4bc8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4bca:	2014      	movs	r0, #20
   d4bcc:	606c      	str	r4, [r5, #4]
   d4bce:	60ac      	str	r4, [r5, #8]
   d4bd0:	9307      	str	r3, [sp, #28]
   d4bd2:	f7ff fa60 	bl	d4096 <_Znwj>
   d4bd6:	4601      	mov	r1, r0
   d4bd8:	b118      	cbz	r0, d4be2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4bda:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4bdc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4bde:	6044      	str	r4, [r0, #4]
   d4be0:	6084      	str	r4, [r0, #8]
   d4be2:	a804      	add	r0, sp, #16
   d4be4:	9103      	str	r1, [sp, #12]
   d4be6:	f7ff feef 	bl	d49c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4bea:	4b22      	ldr	r3, [pc, #136]	; (d4c74 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4bec:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4bee:	2008      	movs	r0, #8
   d4bf0:	f7ff fa51 	bl	d4096 <_Znwj>
   d4bf4:	4604      	mov	r4, r0
   d4bf6:	b128      	cbz	r0, d4c04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4bf8:	9b03      	ldr	r3, [sp, #12]
   d4bfa:	f840 3b04 	str.w	r3, [r0], #4
   d4bfe:	a904      	add	r1, sp, #16
   d4c00:	f7ff fd2e 	bl	d4660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c04:	9500      	str	r5, [sp, #0]
   d4c06:	fa5f f38a 	uxtb.w	r3, sl
   d4c0a:	464a      	mov	r2, r9
   d4c0c:	4641      	mov	r1, r8
   d4c0e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4c10:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c12:	f7ff fc69 	bl	d44e8 <spark_send_event>
   d4c16:	b920      	cbnz	r0, d4c22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4c18:	9b03      	ldr	r3, [sp, #12]
   d4c1a:	785b      	ldrb	r3, [r3, #1]
   d4c1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4c20:	b183      	cbz	r3, d4c44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4c22:	9b03      	ldr	r3, [sp, #12]
   d4c24:	9305      	str	r3, [sp, #20]
   d4c26:	a904      	add	r1, sp, #16
   d4c28:	a806      	add	r0, sp, #24
   d4c2a:	f7ff fd19 	bl	d4660 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4c2e:	a905      	add	r1, sp, #20
   d4c30:	4630      	mov	r0, r6
   d4c32:	f7ff fe99 	bl	d4968 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c36:	a806      	add	r0, sp, #24
   d4c38:	f7ff fd19 	bl	d466e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c3c:	a804      	add	r0, sp, #16
   d4c3e:	f7ff fd16 	bl	d466e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c42:	e013      	b.n	d4c6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4c44:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4c48:	a905      	add	r1, sp, #20
   d4c4a:	a803      	add	r0, sp, #12
   d4c4c:	9205      	str	r2, [sp, #20]
   d4c4e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4c52:	f7ff fefd 	bl	d4a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4c56:	a805      	add	r0, sp, #20
   d4c58:	f7ff fe5c 	bl	d4914 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4c5c:	a805      	add	r0, sp, #20
   d4c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4c60:	f7ff fe93 	bl	d498a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4c64:	a806      	add	r0, sp, #24
   d4c66:	f7ff fd02 	bl	d466e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c6a:	e7da      	b.n	d4c22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4c6c:	4630      	mov	r0, r6
   d4c6e:	b00b      	add	sp, #44	; 0x2c
   d4c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c74:	000d4de9 	.word	0x000d4de9

000d4c78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c78:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c7c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c7e:	d006      	beq.n	d4c8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4c80:	2a03      	cmp	r2, #3
   d4c82:	d017      	beq.n	d4cb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4c84:	2a01      	cmp	r2, #1
   d4c86:	d122      	bne.n	d4cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4c88:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4c8a:	6003      	str	r3, [r0, #0]
	      break;
   d4c8c:	e01f      	b.n	d4cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4c8e:	2018      	movs	r0, #24
   d4c90:	680e      	ldr	r6, [r1, #0]
   d4c92:	f7ff fa00 	bl	d4096 <_Znwj>
   d4c96:	4605      	mov	r5, r0
   d4c98:	b150      	cbz	r0, d4cb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4c9a:	4631      	mov	r1, r6
   d4c9c:	f7ff fec8 	bl	d4a30 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4ca0:	6930      	ldr	r0, [r6, #16]
   d4ca2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4ca6:	b108      	cbz	r0, d4cac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4ca8:	f000 fe9e 	bl	d59e8 <strdup>
   d4cac:	6128      	str	r0, [r5, #16]
   d4cae:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4cb0:	6025      	str	r5, [r4, #0]
   d4cb2:	e00c      	b.n	d4cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4cb4:	6804      	ldr	r4, [r0, #0]
   d4cb6:	b154      	cbz	r4, d4cce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4cb8:	f104 0010 	add.w	r0, r4, #16
   d4cbc:	f7ff fe2a 	bl	d4914 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4cc0:	4620      	mov	r0, r4
   d4cc2:	f7ff fd54 	bl	d476e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4cc6:	2118      	movs	r1, #24
   d4cc8:	4620      	mov	r0, r4
   d4cca:	f000 fce5 	bl	d5698 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4cce:	2000      	movs	r0, #0
   d4cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cd2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4cd2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4cd4:	2300      	movs	r3, #0
   d4cd6:	6083      	str	r3, [r0, #8]
   d4cd8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4cda:	4604      	mov	r4, r0
   d4cdc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4cde:	b12b      	cbz	r3, d4cec <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4ce0:	2202      	movs	r2, #2
   d4ce2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4ce4:	68eb      	ldr	r3, [r5, #12]
   d4ce6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4ce8:	68ab      	ldr	r3, [r5, #8]
   d4cea:	60a3      	str	r3, [r4, #8]
	}
    }
   d4cec:	4620      	mov	r0, r4
   d4cee:	bd38      	pop	{r3, r4, r5, pc}

000d4cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cf0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4cf2:	b570      	push	{r4, r5, r6, lr}
   d4cf4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4cf6:	d006      	beq.n	d4d06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4cf8:	2a03      	cmp	r2, #3
   d4cfa:	d011      	beq.n	d4d20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4cfc:	2a01      	cmp	r2, #1
   d4cfe:	d118      	bne.n	d4d32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4d00:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d02:	6003      	str	r3, [r0, #0]
	      break;
   d4d04:	e015      	b.n	d4d32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d06:	2014      	movs	r0, #20
   d4d08:	680e      	ldr	r6, [r1, #0]
   d4d0a:	f7ff f9c4 	bl	d4096 <_Znwj>
   d4d0e:	4605      	mov	r5, r0
   d4d10:	b120      	cbz	r0, d4d1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4d12:	4631      	mov	r1, r6
   d4d14:	f7ff ffdd 	bl	d4cd2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4d18:	7c33      	ldrb	r3, [r6, #16]
   d4d1a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4d1c:	6025      	str	r5, [r4, #0]
   d4d1e:	e008      	b.n	d4d32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d20:	6804      	ldr	r4, [r0, #0]
   d4d22:	b134      	cbz	r4, d4d32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d24:	4620      	mov	r0, r4
   d4d26:	f7ff fd22 	bl	d476e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4d2a:	2114      	movs	r1, #20
   d4d2c:	4620      	mov	r0, r4
   d4d2e:	f000 fcb3 	bl	d5698 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4d32:	2000      	movs	r0, #0
   d4d34:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4d38:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4d3a:	2300      	movs	r3, #0
   d4d3c:	b087      	sub	sp, #28
   d4d3e:	460c      	mov	r4, r1
   d4d40:	f3bf 8f5f 	dmb	sy
   d4d44:	e850 6f00 	ldrex	r6, [r0]
   d4d48:	e840 3200 	strex	r2, r3, [r0]
   d4d4c:	2a00      	cmp	r2, #0
   d4d4e:	d1f9      	bne.n	d4d44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4d50:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4d54:	2e00      	cmp	r6, #0
   d4d56:	d03f      	beq.n	d4dd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4d58:	4618      	mov	r0, r3
   d4d5a:	f7ff fb49 	bl	d43f0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4d5e:	4607      	mov	r7, r0
   d4d60:	b120      	cbz	r0, d4d6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4d62:	4621      	mov	r1, r4
   d4d64:	4630      	mov	r0, r6
   d4d66:	f7ff fe53 	bl	d4a10 <_ZNKSt8functionIFvRKbEEclES1_>
   d4d6a:	e02e      	b.n	d4dca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4d6c:	4631      	mov	r1, r6
   d4d6e:	a801      	add	r0, sp, #4
   d4d70:	f7ff ffaf 	bl	d4cd2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4d74:	7823      	ldrb	r3, [r4, #0]
   d4d76:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4d7a:	2010      	movs	r0, #16
   d4d7c:	f7ff f98b 	bl	d4096 <_Znwj>
   d4d80:	4605      	mov	r5, r0
   d4d82:	b1d0      	cbz	r0, d4dba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d84:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4d86:	2014      	movs	r0, #20
   d4d88:	f7ff f985 	bl	d4096 <_Znwj>
   d4d8c:	4604      	mov	r4, r0
   d4d8e:	b178      	cbz	r0, d4db0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d90:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4d92:	4601      	mov	r1, r0
   d4d94:	a801      	add	r0, sp, #4
   d4d96:	f7ff fcf9 	bl	d478c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d9a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4d9c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d9e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4da0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4da2:	9203      	str	r2, [sp, #12]
   d4da4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4da6:	60e3      	str	r3, [r4, #12]
   d4da8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4dac:	9204      	str	r2, [sp, #16]
   d4dae:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4db0:	4b0a      	ldr	r3, [pc, #40]	; (d4ddc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4db2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4db4:	4b0a      	ldr	r3, [pc, #40]	; (d4de0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4db6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4db8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dba:	a801      	add	r0, sp, #4
   d4dbc:	f7ff fcd7 	bl	d476e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4dc0:	2200      	movs	r2, #0
   d4dc2:	4629      	mov	r1, r5
   d4dc4:	4807      	ldr	r0, [pc, #28]	; (d4de4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4dc6:	f7ff fb1b 	bl	d4400 <application_thread_invoke>
   d4dca:	4630      	mov	r0, r6
   d4dcc:	f7ff fccf 	bl	d476e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4dd0:	2110      	movs	r1, #16
   d4dd2:	4630      	mov	r0, r6
   d4dd4:	f000 fc60 	bl	d5698 <_ZdlPvj>
        }
    }
   d4dd8:	b007      	add	sp, #28
   d4dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ddc:	000d4a23 	.word	0x000d4a23
   d4de0:	000d4cf1 	.word	0x000d4cf1
   d4de4:	000d5151 	.word	0x000d5151

000d4de8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4de8:	b530      	push	{r4, r5, lr}
   d4dea:	b085      	sub	sp, #20
   d4dec:	4604      	mov	r4, r0
   d4dee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4df0:	4668      	mov	r0, sp
   d4df2:	4611      	mov	r1, r2
   d4df4:	f7ff fdc9 	bl	d498a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4df8:	b17c      	cbz	r4, d4e1a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4dfa:	b224      	sxth	r4, r4
   d4dfc:	4628      	mov	r0, r5
   d4dfe:	b10d      	cbz	r5, d4e04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4e00:	f000 fdf2 	bl	d59e8 <strdup>
   d4e04:	9002      	str	r0, [sp, #8]
   d4e06:	a902      	add	r1, sp, #8
   d4e08:	4668      	mov	r0, sp
   d4e0a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4e0e:	f7ff fe1f 	bl	d4a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4e12:	a802      	add	r0, sp, #8
   d4e14:	f7ff fd7e 	bl	d4914 <_ZN8particle5ErrorD1Ev>
   d4e18:	e01d      	b.n	d4e56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4e1a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4e1c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4e20:	f04f 0201 	mov.w	r2, #1
   d4e24:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4e28:	42a3      	cmp	r3, r4
   d4e2a:	d103      	bne.n	d4e34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4e2c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4e30:	2900      	cmp	r1, #0
   d4e32:	d1f7      	bne.n	d4e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4e34:	d002      	beq.n	d4e3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4e36:	f88d 3008 	strb.w	r3, [sp, #8]
   d4e3a:	e00c      	b.n	d4e56 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4e3c:	f110 010c 	adds.w	r1, r0, #12
   d4e40:	f04f 0301 	mov.w	r3, #1
   d4e44:	bf18      	it	ne
   d4e46:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4e48:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4e4c:	3004      	adds	r0, #4
   d4e4e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4e52:	f7ff ff71 	bl	d4d38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4e56:	a801      	add	r0, sp, #4
   d4e58:	f7ff fc09 	bl	d466e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4e5c:	b005      	add	sp, #20
   d4e5e:	bd30      	pop	{r4, r5, pc}

000d4e60 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4e60:	4770      	bx	lr

000d4e62 <_ZN9IPAddressD0Ev>:
   d4e62:	b510      	push	{r4, lr}
   d4e64:	2118      	movs	r1, #24
   d4e66:	4604      	mov	r4, r0
   d4e68:	f000 fc16 	bl	d5698 <_ZdlPvj>
   d4e6c:	4620      	mov	r0, r4
   d4e6e:	bd10      	pop	{r4, pc}

000d4e70 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e70:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e72:	7d03      	ldrb	r3, [r0, #20]
   d4e74:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4e76:	b08d      	sub	sp, #52	; 0x34
   d4e78:	460e      	mov	r6, r1
   d4e7a:	f100 0704 	add.w	r7, r0, #4
   d4e7e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4e82:	d002      	beq.n	d4e8a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4e84:	f100 0508 	add.w	r5, r0, #8
   d4e88:	e018      	b.n	d4ebc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e8a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e8c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4e8e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e92:	232f      	movs	r3, #47	; 0x2f
   d4e94:	462a      	mov	r2, r5
   d4e96:	200a      	movs	r0, #10
   d4e98:	f7ff f9ea 	bl	d4270 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4e9c:	4628      	mov	r0, r5
   d4e9e:	f000 fdbe 	bl	d5a1e <strlen>
   d4ea2:	6833      	ldr	r3, [r6, #0]
   d4ea4:	4602      	mov	r2, r0
   d4ea6:	68db      	ldr	r3, [r3, #12]
   d4ea8:	4629      	mov	r1, r5
   d4eaa:	4630      	mov	r0, r6
   d4eac:	4798      	blx	r3
   d4eae:	e00f      	b.n	d4ed0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4eb0:	b124      	cbz	r4, d4ebc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4eb2:	212e      	movs	r1, #46	; 0x2e
   d4eb4:	4630      	mov	r0, r6
   d4eb6:	f7ff fc21 	bl	d46fc <_ZN5Print5printEc>
   d4eba:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4ebc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4ec0:	220a      	movs	r2, #10
   d4ec2:	4630      	mov	r0, r6
   d4ec4:	f7ff fc1d 	bl	d4702 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ec8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4eca:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ecc:	d1f0      	bne.n	d4eb0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ece:	4620      	mov	r0, r4
    }
    return n;
}
   d4ed0:	b00d      	add	sp, #52	; 0x34
   d4ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ed4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4ed4:	b510      	push	{r4, lr}
   d4ed6:	4b05      	ldr	r3, [pc, #20]	; (d4eec <_ZN9IPAddressC1Ev+0x18>)
   d4ed8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4eda:	2211      	movs	r2, #17
   d4edc:	f840 3b04 	str.w	r3, [r0], #4
   d4ee0:	2100      	movs	r1, #0
   d4ee2:	f000 fd50 	bl	d5986 <memset>
{
    clear();
}
   d4ee6:	4620      	mov	r0, r4
   d4ee8:	bd10      	pop	{r4, pc}
   d4eea:	bf00      	nop
   d4eec:	000d5bbc 	.word	0x000d5bbc

000d4ef0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ef0:	4603      	mov	r3, r0
   d4ef2:	4a07      	ldr	r2, [pc, #28]	; (d4f10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ef4:	b510      	push	{r4, lr}
   d4ef6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4efa:	f101 0210 	add.w	r2, r1, #16
   d4efe:	f851 4b04 	ldr.w	r4, [r1], #4
   d4f02:	f843 4b04 	str.w	r4, [r3], #4
   d4f06:	4291      	cmp	r1, r2
   d4f08:	d1f9      	bne.n	d4efe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4f0a:	780a      	ldrb	r2, [r1, #0]
   d4f0c:	701a      	strb	r2, [r3, #0]
}
   d4f0e:	bd10      	pop	{r4, pc}
   d4f10:	000d5bbc 	.word	0x000d5bbc

000d4f14 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4f14:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4f16:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4f1a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4f1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4f22:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4f26:	2304      	movs	r3, #4
   d4f28:	6041      	str	r1, [r0, #4]
   d4f2a:	7503      	strb	r3, [r0, #20]
   d4f2c:	bd10      	pop	{r4, pc}

000d4f2e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4f2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4f30:	780d      	ldrb	r5, [r1, #0]
   d4f32:	788b      	ldrb	r3, [r1, #2]
   d4f34:	784a      	ldrb	r2, [r1, #1]
   d4f36:	78c9      	ldrb	r1, [r1, #3]
   d4f38:	9100      	str	r1, [sp, #0]
   d4f3a:	4629      	mov	r1, r5
   d4f3c:	f7ff ffea 	bl	d4f14 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4f40:	b003      	add	sp, #12
   d4f42:	bd30      	pop	{r4, r5, pc}

000d4f44 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4f44:	7441      	strb	r1, [r0, #17]
   d4f46:	4770      	bx	lr

000d4f48 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4f48:	4770      	bx	lr

000d4f4a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4f4a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4f4c:	2100      	movs	r1, #0
   d4f4e:	7c00      	ldrb	r0, [r0, #16]
   d4f50:	f7ff fa26 	bl	d43a0 <HAL_USB_USART_Receive_Data>
}
   d4f54:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f58:	bf28      	it	cs
   d4f5a:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f5e:	bd08      	pop	{r3, pc}

000d4f60 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4f60:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4f62:	2101      	movs	r1, #1
   d4f64:	7c00      	ldrb	r0, [r0, #16]
   d4f66:	f7ff fa1b 	bl	d43a0 <HAL_USB_USART_Receive_Data>
}
   d4f6a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4f6e:	bf28      	it	cs
   d4f70:	f04f 30ff 	movcs.w	r0, #4294967295
   d4f74:	bd08      	pop	{r3, pc}

000d4f76 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4f76:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4f78:	7c00      	ldrb	r0, [r0, #16]
   d4f7a:	f7ff fa09 	bl	d4390 <HAL_USB_USART_Available_Data_For_Write>
}
   d4f7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f82:	bd08      	pop	{r3, pc}

000d4f84 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4f84:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4f86:	7c00      	ldrb	r0, [r0, #16]
   d4f88:	f7ff f9fa 	bl	d4380 <HAL_USB_USART_Available_Data>
}
   d4f8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4f90:	bd08      	pop	{r3, pc}

000d4f92 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4f92:	7c00      	ldrb	r0, [r0, #16]
   d4f94:	f7ff ba14 	b.w	d43c0 <HAL_USB_USART_Flush_Data>

000d4f98 <_ZN9USBSerialD0Ev>:
   d4f98:	b510      	push	{r4, lr}
   d4f9a:	2114      	movs	r1, #20
   d4f9c:	4604      	mov	r4, r0
   d4f9e:	f000 fb7b 	bl	d5698 <_ZdlPvj>
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	bd10      	pop	{r4, pc}

000d4fa6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4fa6:	b538      	push	{r3, r4, r5, lr}
   d4fa8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4faa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4fac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4fae:	f7ff f9ef 	bl	d4390 <HAL_USB_USART_Available_Data_For_Write>
   d4fb2:	2800      	cmp	r0, #0
   d4fb4:	dc01      	bgt.n	d4fba <_ZN9USBSerial5writeEh+0x14>
   d4fb6:	7c60      	ldrb	r0, [r4, #17]
   d4fb8:	b128      	cbz	r0, d4fc6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4fba:	4629      	mov	r1, r5
   d4fbc:	7c20      	ldrb	r0, [r4, #16]
   d4fbe:	f7ff f9f7 	bl	d43b0 <HAL_USB_USART_Send_Data>
   d4fc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4fc6:	bd38      	pop	{r3, r4, r5, pc}

000d4fc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4fc8:	b510      	push	{r4, lr}
   d4fca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4fcc:	2300      	movs	r3, #0
   d4fce:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4fd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4fd4:	60a3      	str	r3, [r4, #8]
   d4fd6:	4b05      	ldr	r3, [pc, #20]	; (d4fec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4fd8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4fda:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4fdc:	4608      	mov	r0, r1
{
  _serial = serial;
   d4fde:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4fe0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4fe2:	4611      	mov	r1, r2
   d4fe4:	f7ff f9c4 	bl	d4370 <HAL_USB_USART_Init>
}
   d4fe8:	4620      	mov	r0, r4
   d4fea:	bd10      	pop	{r4, pc}
   d4fec:	000d5bd0 	.word	0x000d5bd0

000d4ff0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ff0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4ff2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4ff4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4ff6:	2100      	movs	r1, #0
   d4ff8:	f000 fcc5 	bl	d5986 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	bd10      	pop	{r4, pc}

000d5000 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5000:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5002:	4d0e      	ldr	r5, [pc, #56]	; (d503c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5004:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5006:	a801      	add	r0, sp, #4
   d5008:	f7ff fff2 	bl	d4ff0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d500c:	6829      	ldr	r1, [r5, #0]
   d500e:	f011 0401 	ands.w	r4, r1, #1
   d5012:	d110      	bne.n	d5036 <_Z16_fetch_usbserialv+0x36>
   d5014:	4628      	mov	r0, r5
   d5016:	f7ff f844 	bl	d40a2 <__cxa_guard_acquire>
   d501a:	b160      	cbz	r0, d5036 <_Z16_fetch_usbserialv+0x36>
   d501c:	aa01      	add	r2, sp, #4
   d501e:	4621      	mov	r1, r4
   d5020:	4807      	ldr	r0, [pc, #28]	; (d5040 <_Z16_fetch_usbserialv+0x40>)
   d5022:	f7ff ffd1 	bl	d4fc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5026:	4628      	mov	r0, r5
   d5028:	f7ff f840 	bl	d40ac <__cxa_guard_release>
   d502c:	4a05      	ldr	r2, [pc, #20]	; (d5044 <_Z16_fetch_usbserialv+0x44>)
   d502e:	4906      	ldr	r1, [pc, #24]	; (d5048 <_Z16_fetch_usbserialv+0x48>)
   d5030:	4803      	ldr	r0, [pc, #12]	; (d5040 <_Z16_fetch_usbserialv+0x40>)
   d5032:	f000 fb23 	bl	d567c <__aeabi_atexit>
	return _usbserial;
}
   d5036:	4802      	ldr	r0, [pc, #8]	; (d5040 <_Z16_fetch_usbserialv+0x40>)
   d5038:	b007      	add	sp, #28
   d503a:	bd30      	pop	{r4, r5, pc}
   d503c:	2003e408 	.word	0x2003e408
   d5040:	2003e40c 	.word	0x2003e40c
   d5044:	2003e3c8 	.word	0x2003e3c8
   d5048:	000d4f49 	.word	0x000d4f49

000d504c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d504c:	4770      	bx	lr

000d504e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d504e:	7441      	strb	r1, [r0, #17]
   d5050:	4770      	bx	lr

000d5052 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5052:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5054:	7c00      	ldrb	r0, [r0, #16]
   d5056:	f7ff f94b 	bl	d42f0 <HAL_USART_Available_Data_For_Write>
}
   d505a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d505e:	bd08      	pop	{r3, pc}

000d5060 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5060:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5062:	7c00      	ldrb	r0, [r0, #16]
   d5064:	f7ff f91c 	bl	d42a0 <HAL_USART_Available_Data>
}
   d5068:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d506c:	bd08      	pop	{r3, pc}

000d506e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d506e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5070:	7c00      	ldrb	r0, [r0, #16]
   d5072:	f7ff f925 	bl	d42c0 <HAL_USART_Peek_Data>
}
   d5076:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d507a:	bf28      	it	cs
   d507c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5080:	bd08      	pop	{r3, pc}

000d5082 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5082:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5084:	7c00      	ldrb	r0, [r0, #16]
   d5086:	f7ff f913 	bl	d42b0 <HAL_USART_Read_Data>
}
   d508a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d508e:	bf28      	it	cs
   d5090:	f04f 30ff 	movcs.w	r0, #4294967295
   d5094:	bd08      	pop	{r3, pc}

000d5096 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5096:	7c00      	ldrb	r0, [r0, #16]
   d5098:	f7ff b91a 	b.w	d42d0 <HAL_USART_Flush_Data>

000d509c <_ZN11USARTSerialD0Ev>:
   d509c:	b510      	push	{r4, lr}
   d509e:	2114      	movs	r1, #20
   d50a0:	4604      	mov	r4, r0
   d50a2:	f000 faf9 	bl	d5698 <_ZdlPvj>
   d50a6:	4620      	mov	r0, r4
   d50a8:	bd10      	pop	{r4, pc}

000d50aa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d50aa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d50ac:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d50ae:	4604      	mov	r4, r0
   d50b0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d50b2:	b925      	cbnz	r5, d50be <_ZN11USARTSerial5writeEh+0x14>
   d50b4:	7c00      	ldrb	r0, [r0, #16]
   d50b6:	f7ff f91b 	bl	d42f0 <HAL_USART_Available_Data_For_Write>
   d50ba:	2800      	cmp	r0, #0
   d50bc:	dd05      	ble.n	d50ca <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d50be:	4631      	mov	r1, r6
   d50c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d50c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d50c6:	f7ff b8e3 	b.w	d4290 <HAL_USART_Write_Data>
  }
  return 0;
}
   d50ca:	4628      	mov	r0, r5
   d50cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d50d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d50d0:	b510      	push	{r4, lr}
   d50d2:	4604      	mov	r4, r0
   d50d4:	4608      	mov	r0, r1
   d50d6:	4611      	mov	r1, r2
   d50d8:	2200      	movs	r2, #0
   d50da:	6062      	str	r2, [r4, #4]
   d50dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d50e0:	60a2      	str	r2, [r4, #8]
   d50e2:	4a05      	ldr	r2, [pc, #20]	; (d50f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d50e4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d50e6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d50e8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d50ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d50ec:	461a      	mov	r2, r3
   d50ee:	f7ff f8c7 	bl	d4280 <HAL_USART_Init>
}
   d50f2:	4620      	mov	r0, r4
   d50f4:	bd10      	pop	{r4, pc}
   d50f6:	bf00      	nop
   d50f8:	000d5c00 	.word	0x000d5c00

000d50fc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d50fc:	7c00      	ldrb	r0, [r0, #16]
   d50fe:	f7ff b8ef 	b.w	d42e0 <HAL_USART_Is_Enabled>
	...

000d5104 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5104:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5106:	4d0c      	ldr	r5, [pc, #48]	; (d5138 <_Z22__fetch_global_Serial1v+0x34>)
   d5108:	6829      	ldr	r1, [r5, #0]
   d510a:	f011 0401 	ands.w	r4, r1, #1
   d510e:	d111      	bne.n	d5134 <_Z22__fetch_global_Serial1v+0x30>
   d5110:	4628      	mov	r0, r5
   d5112:	f7fe ffc6 	bl	d40a2 <__cxa_guard_acquire>
   d5116:	b168      	cbz	r0, d5134 <_Z22__fetch_global_Serial1v+0x30>
   d5118:	4a08      	ldr	r2, [pc, #32]	; (d513c <_Z22__fetch_global_Serial1v+0x38>)
   d511a:	4b09      	ldr	r3, [pc, #36]	; (d5140 <_Z22__fetch_global_Serial1v+0x3c>)
   d511c:	4809      	ldr	r0, [pc, #36]	; (d5144 <_Z22__fetch_global_Serial1v+0x40>)
   d511e:	4621      	mov	r1, r4
   d5120:	f7ff ffd6 	bl	d50d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5124:	4628      	mov	r0, r5
   d5126:	f7fe ffc1 	bl	d40ac <__cxa_guard_release>
   d512a:	4a07      	ldr	r2, [pc, #28]	; (d5148 <_Z22__fetch_global_Serial1v+0x44>)
   d512c:	4907      	ldr	r1, [pc, #28]	; (d514c <_Z22__fetch_global_Serial1v+0x48>)
   d512e:	4805      	ldr	r0, [pc, #20]	; (d5144 <_Z22__fetch_global_Serial1v+0x40>)
   d5130:	f000 faa4 	bl	d567c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5134:	4803      	ldr	r0, [pc, #12]	; (d5144 <_Z22__fetch_global_Serial1v+0x40>)
   d5136:	bd38      	pop	{r3, r4, r5, pc}
   d5138:	2003e4b8 	.word	0x2003e4b8
   d513c:	2003e4bc 	.word	0x2003e4bc
   d5140:	2003e434 	.word	0x2003e434
   d5144:	2003e420 	.word	0x2003e420
   d5148:	2003e3c8 	.word	0x2003e3c8
   d514c:	000d504d 	.word	0x000d504d

000d5150 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5150:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5152:	6883      	ldr	r3, [r0, #8]
   d5154:	4604      	mov	r4, r0
   d5156:	b90b      	cbnz	r3, d515c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5158:	f000 fab1 	bl	d56be <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d515c:	68c3      	ldr	r3, [r0, #12]
   d515e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5160:	68a3      	ldr	r3, [r4, #8]
   d5162:	b11b      	cbz	r3, d516c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5164:	2203      	movs	r2, #3
   d5166:	4621      	mov	r1, r4
   d5168:	4620      	mov	r0, r4
   d516a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d516c:	4620      	mov	r0, r4
   d516e:	2110      	movs	r1, #16
}
   d5170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5174:	f000 ba90 	b.w	d5698 <_ZdlPvj>

000d5178 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5178:	4770      	bx	lr

000d517a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d517a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d517c:	4606      	mov	r6, r0
   d517e:	4615      	mov	r5, r2
   d5180:	460c      	mov	r4, r1
   d5182:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5184:	42bc      	cmp	r4, r7
   d5186:	d006      	beq.n	d5196 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5188:	6833      	ldr	r3, [r6, #0]
   d518a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d518e:	689b      	ldr	r3, [r3, #8]
   d5190:	4630      	mov	r0, r6
   d5192:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5194:	e7f6      	b.n	d5184 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5196:	4628      	mov	r0, r5
   d5198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d519a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d519a:	2200      	movs	r2, #0
   d519c:	7c00      	ldrb	r0, [r0, #16]
   d519e:	f7ff b8af 	b.w	d4300 <HAL_I2C_Write_Data>

000d51a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d51a2:	2100      	movs	r1, #0
   d51a4:	7c00      	ldrb	r0, [r0, #16]
   d51a6:	f7ff b8b3 	b.w	d4310 <HAL_I2C_Available_Data>

000d51aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d51aa:	2100      	movs	r1, #0
   d51ac:	7c00      	ldrb	r0, [r0, #16]
   d51ae:	f7ff b8b7 	b.w	d4320 <HAL_I2C_Read_Data>

000d51b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d51b2:	2100      	movs	r1, #0
   d51b4:	7c00      	ldrb	r0, [r0, #16]
   d51b6:	f7ff b8bb 	b.w	d4330 <HAL_I2C_Peek_Data>

000d51ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d51ba:	2100      	movs	r1, #0
   d51bc:	7c00      	ldrb	r0, [r0, #16]
   d51be:	f7ff b8bf 	b.w	d4340 <HAL_I2C_Flush_Data>

000d51c2 <_ZN7TwoWireD0Ev>:
   d51c2:	b510      	push	{r4, lr}
   d51c4:	2114      	movs	r1, #20
   d51c6:	4604      	mov	r4, r0
   d51c8:	f000 fa66 	bl	d5698 <_ZdlPvj>
   d51cc:	4620      	mov	r0, r4
   d51ce:	bd10      	pop	{r4, pc}

000d51d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d51d0:	b510      	push	{r4, lr}
   d51d2:	4604      	mov	r4, r0
   d51d4:	2300      	movs	r3, #0
   d51d6:	6063      	str	r3, [r4, #4]
   d51d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51dc:	60a3      	str	r3, [r4, #8]
   d51de:	4b04      	ldr	r3, [pc, #16]	; (d51f0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d51e0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d51e2:	4608      	mov	r0, r1
   d51e4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d51e6:	4611      	mov	r1, r2
   d51e8:	f7ff f8ba 	bl	d4360 <HAL_I2C_Init>
}
   d51ec:	4620      	mov	r0, r4
   d51ee:	bd10      	pop	{r4, pc}
   d51f0:	000d5c30 	.word	0x000d5c30

000d51f4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d51f4:	2100      	movs	r1, #0
   d51f6:	7c00      	ldrb	r0, [r0, #16]
   d51f8:	f7ff b8aa 	b.w	d4350 <HAL_I2C_Is_Enabled>

000d51fc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51fc:	2200      	movs	r2, #0
   d51fe:	4611      	mov	r1, r2
   d5200:	6840      	ldr	r0, [r0, #4]
   d5202:	f7ff b951 	b.w	d44a8 <network_listening>

000d5206 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5206:	2200      	movs	r2, #0
   d5208:	4611      	mov	r1, r2
   d520a:	6840      	ldr	r0, [r0, #4]
   d520c:	f7ff b95c 	b.w	d44c8 <network_get_listen_timeout>

000d5210 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5210:	2200      	movs	r2, #0
   d5212:	6840      	ldr	r0, [r0, #4]
   d5214:	f7ff b950 	b.w	d44b8 <network_set_listen_timeout>

000d5218 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5218:	2200      	movs	r2, #0
   d521a:	f081 0101 	eor.w	r1, r1, #1
   d521e:	6840      	ldr	r0, [r0, #4]
   d5220:	f7ff b93a 	b.w	d4498 <network_listen>

000d5224 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5224:	2300      	movs	r3, #0
   d5226:	461a      	mov	r2, r3
   d5228:	2101      	movs	r1, #1
   d522a:	6840      	ldr	r0, [r0, #4]
   d522c:	f7ff b92c 	b.w	d4488 <network_off>

000d5230 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5230:	2300      	movs	r3, #0
   d5232:	461a      	mov	r2, r3
   d5234:	4619      	mov	r1, r3
   d5236:	6840      	ldr	r0, [r0, #4]
   d5238:	f7ff b91e 	b.w	d4478 <network_on>

000d523c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d523c:	2200      	movs	r2, #0
   d523e:	4611      	mov	r1, r2
   d5240:	6840      	ldr	r0, [r0, #4]
   d5242:	f7ff b911 	b.w	d4468 <network_ready>

000d5246 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5246:	2200      	movs	r2, #0
   d5248:	4611      	mov	r1, r2
   d524a:	6840      	ldr	r0, [r0, #4]
   d524c:	f7ff b8fc 	b.w	d4448 <network_connecting>

000d5250 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5250:	2200      	movs	r2, #0
   d5252:	2102      	movs	r1, #2
   d5254:	6840      	ldr	r0, [r0, #4]
   d5256:	f7ff b8ff 	b.w	d4458 <network_disconnect>

000d525a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d525a:	2300      	movs	r3, #0
   d525c:	461a      	mov	r2, r3
   d525e:	6840      	ldr	r0, [r0, #4]
   d5260:	f7ff b8ea 	b.w	d4438 <network_connect>

000d5264 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5264:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5266:	4605      	mov	r5, r0
   d5268:	b188      	cbz	r0, d528e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d526a:	6804      	ldr	r4, [r0, #0]
   d526c:	b14c      	cbz	r4, d5282 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d526e:	68a3      	ldr	r3, [r4, #8]
   d5270:	b11b      	cbz	r3, d527a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5272:	2203      	movs	r2, #3
   d5274:	4621      	mov	r1, r4
   d5276:	4620      	mov	r0, r4
   d5278:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d527a:	2110      	movs	r1, #16
   d527c:	4620      	mov	r0, r4
   d527e:	f000 fa0b 	bl	d5698 <_ZdlPvj>
   d5282:	4628      	mov	r0, r5
   d5284:	2114      	movs	r1, #20
      }
   d5286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d528a:	f000 ba05 	b.w	d5698 <_ZdlPvj>
   d528e:	bd38      	pop	{r3, r4, r5, pc}

000d5290 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5290:	b110      	cbz	r0, d5298 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5292:	6803      	ldr	r3, [r0, #0]
   d5294:	685b      	ldr	r3, [r3, #4]
   d5296:	4718      	bx	r3
   d5298:	4770      	bx	lr

000d529a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d529a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d529c:	6803      	ldr	r3, [r0, #0]
   d529e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d52a0:	b1bb      	cbz	r3, d52d2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d52a2:	6858      	ldr	r0, [r3, #4]
   d52a4:	f7fe ffbc 	bl	d4220 <os_thread_is_current>
   d52a8:	b978      	cbnz	r0, d52ca <_ZN6ThreadD1Ev+0x30>
   d52aa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d52ac:	7c5a      	ldrb	r2, [r3, #17]
   d52ae:	b912      	cbnz	r2, d52b6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d52b0:	6858      	ldr	r0, [r3, #4]
   d52b2:	f7fe ffbd 	bl	d4230 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d52b6:	6823      	ldr	r3, [r4, #0]
   d52b8:	6858      	ldr	r0, [r3, #4]
   d52ba:	f7fe ffc1 	bl	d4240 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52be:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d52c0:	2300      	movs	r3, #0
   d52c2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d52c4:	b128      	cbz	r0, d52d2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d52c6:	f7ff ffcd 	bl	d5264 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52ca:	6820      	ldr	r0, [r4, #0]
   d52cc:	b108      	cbz	r0, d52d2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d52ce:	f7ff ffc9 	bl	d5264 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d52d2:	4620      	mov	r0, r4
   d52d4:	bd10      	pop	{r4, pc}

000d52d6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d52d6:	b538      	push	{r3, r4, r5, lr}
   d52d8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52da:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d52de:	b108      	cbz	r0, d52e4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d52e0:	f7fe fedd 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d52e4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d52e8:	b108      	cbz	r0, d52ee <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d52ea:	f7fe ffb9 	bl	d4260 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52ee:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d52f2:	b135      	cbz	r5, d5302 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52f4:	4628      	mov	r0, r5
   d52f6:	f7ff ffd0 	bl	d529a <_ZN6ThreadD1Ev>
   d52fa:	2104      	movs	r1, #4
   d52fc:	4628      	mov	r0, r5
   d52fe:	f000 f9cb 	bl	d5698 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5302:	6820      	ldr	r0, [r4, #0]
   d5304:	b108      	cbz	r0, d530a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5306:	f7ff ffc3 	bl	d5290 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d530a:	4620      	mov	r0, r4
   d530c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5310 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5310:	b510      	push	{r4, lr}
   d5312:	4b04      	ldr	r3, [pc, #16]	; (d5324 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5314:	4604      	mov	r4, r0
   d5316:	f840 3b08 	str.w	r3, [r0], #8
   d531a:	f7ff ffdc 	bl	d52d6 <_ZN5spark11MeshPublishD1Ev>
   d531e:	4620      	mov	r0, r4
   d5320:	bd10      	pop	{r4, pc}
   d5322:	bf00      	nop
   d5324:	000d5c58 	.word	0x000d5c58

000d5328 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5328:	b538      	push	{r3, r4, r5, lr}
   d532a:	4c0e      	ldr	r4, [pc, #56]	; (d5364 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d532c:	4b0e      	ldr	r3, [pc, #56]	; (d5368 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d532e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5330:	2500      	movs	r5, #0
   d5332:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5334:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5338:	6063      	str	r3, [r4, #4]
   d533a:	60a5      	str	r5, [r4, #8]
   d533c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5340:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5344:	f7fe ff84 	bl	d4250 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5348:	4b08      	ldr	r3, [pc, #32]	; (d536c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d534a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d534e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5352:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5354:	4620      	mov	r0, r4
   d5356:	4a06      	ldr	r2, [pc, #24]	; (d5370 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5358:	4906      	ldr	r1, [pc, #24]	; (d5374 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d535a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d535e:	f000 b98d 	b.w	d567c <__aeabi_atexit>
   d5362:	bf00      	nop
   d5364:	2003e540 	.word	0x2003e540
   d5368:	000d5cc0 	.word	0x000d5cc0
   d536c:	000d5c58 	.word	0x000d5c58
   d5370:	2003e3c8 	.word	0x2003e3c8
   d5374:	000d5311 	.word	0x000d5311

000d5378 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5378:	2200      	movs	r2, #0
   d537a:	4611      	mov	r1, r2
   d537c:	6840      	ldr	r0, [r0, #4]
   d537e:	f7ff b873 	b.w	d4468 <network_ready>

000d5382 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5382:	2200      	movs	r2, #0
   d5384:	4611      	mov	r1, r2
   d5386:	6840      	ldr	r0, [r0, #4]
   d5388:	f7ff b88e 	b.w	d44a8 <network_listening>

000d538c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d538c:	2200      	movs	r2, #0
   d538e:	4611      	mov	r1, r2
   d5390:	6840      	ldr	r0, [r0, #4]
   d5392:	f7ff b899 	b.w	d44c8 <network_get_listen_timeout>

000d5396 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5396:	2200      	movs	r2, #0
   d5398:	6840      	ldr	r0, [r0, #4]
   d539a:	f7ff b88d 	b.w	d44b8 <network_set_listen_timeout>

000d539e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d539e:	2200      	movs	r2, #0
   d53a0:	f081 0101 	eor.w	r1, r1, #1
   d53a4:	6840      	ldr	r0, [r0, #4]
   d53a6:	f7ff b877 	b.w	d4498 <network_listen>

000d53aa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d53aa:	2300      	movs	r3, #0
   d53ac:	461a      	mov	r2, r3
   d53ae:	4619      	mov	r1, r3
   d53b0:	6840      	ldr	r0, [r0, #4]
   d53b2:	f7ff b869 	b.w	d4488 <network_off>

000d53b6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d53b6:	2300      	movs	r3, #0
   d53b8:	461a      	mov	r2, r3
   d53ba:	4619      	mov	r1, r3
   d53bc:	6840      	ldr	r0, [r0, #4]
   d53be:	f7ff b85b 	b.w	d4478 <network_on>

000d53c2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d53c2:	2200      	movs	r2, #0
   d53c4:	4611      	mov	r1, r2
   d53c6:	6840      	ldr	r0, [r0, #4]
   d53c8:	f7ff b83e 	b.w	d4448 <network_connecting>

000d53cc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d53cc:	2200      	movs	r2, #0
   d53ce:	2102      	movs	r1, #2
   d53d0:	6840      	ldr	r0, [r0, #4]
   d53d2:	f7ff b841 	b.w	d4458 <network_disconnect>

000d53d6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d53d6:	2300      	movs	r3, #0
   d53d8:	461a      	mov	r2, r3
   d53da:	6840      	ldr	r0, [r0, #4]
   d53dc:	f7ff b82c 	b.w	d4438 <network_connect>

000d53e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d53e0:	4b02      	ldr	r3, [pc, #8]	; (d53ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d53e2:	2204      	movs	r2, #4
   d53e4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d53e6:	4a02      	ldr	r2, [pc, #8]	; (d53f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d53e8:	601a      	str	r2, [r3, #0]
   d53ea:	4770      	bx	lr
   d53ec:	2003e714 	.word	0x2003e714
   d53f0:	000d5c8c 	.word	0x000d5c8c

000d53f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d53f4:	2300      	movs	r3, #0
   d53f6:	461a      	mov	r2, r3
   d53f8:	6840      	ldr	r0, [r0, #4]
   d53fa:	f7ff b81d 	b.w	d4438 <network_connect>

000d53fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d53fe:	2200      	movs	r2, #0
   d5400:	2102      	movs	r1, #2
   d5402:	6840      	ldr	r0, [r0, #4]
   d5404:	f7ff b828 	b.w	d4458 <network_disconnect>

000d5408 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5408:	2200      	movs	r2, #0
   d540a:	4611      	mov	r1, r2
   d540c:	6840      	ldr	r0, [r0, #4]
   d540e:	f7ff b81b 	b.w	d4448 <network_connecting>

000d5412 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5412:	2200      	movs	r2, #0
   d5414:	4611      	mov	r1, r2
   d5416:	6840      	ldr	r0, [r0, #4]
   d5418:	f7ff b826 	b.w	d4468 <network_ready>

000d541c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d541c:	2300      	movs	r3, #0
   d541e:	461a      	mov	r2, r3
   d5420:	4619      	mov	r1, r3
   d5422:	6840      	ldr	r0, [r0, #4]
   d5424:	f7ff b828 	b.w	d4478 <network_on>

000d5428 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5428:	2300      	movs	r3, #0
   d542a:	461a      	mov	r2, r3
   d542c:	4619      	mov	r1, r3
   d542e:	6840      	ldr	r0, [r0, #4]
   d5430:	f7ff b82a 	b.w	d4488 <network_off>

000d5434 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5434:	2200      	movs	r2, #0
   d5436:	f081 0101 	eor.w	r1, r1, #1
   d543a:	6840      	ldr	r0, [r0, #4]
   d543c:	f7ff b82c 	b.w	d4498 <network_listen>

000d5440 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5440:	2200      	movs	r2, #0
   d5442:	6840      	ldr	r0, [r0, #4]
   d5444:	f7ff b838 	b.w	d44b8 <network_set_listen_timeout>

000d5448 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5448:	2200      	movs	r2, #0
   d544a:	4611      	mov	r1, r2
   d544c:	6840      	ldr	r0, [r0, #4]
   d544e:	f7ff b83b 	b.w	d44c8 <network_get_listen_timeout>

000d5452 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5452:	2200      	movs	r2, #0
   d5454:	4611      	mov	r1, r2
   d5456:	6840      	ldr	r0, [r0, #4]
   d5458:	f7ff b826 	b.w	d44a8 <network_listening>

000d545c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d545c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5460:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5462:	b095      	sub	sp, #84	; 0x54
   d5464:	4616      	mov	r6, r2
   d5466:	460d      	mov	r5, r1
   d5468:	4607      	mov	r7, r0
    IPAddress addr;
   d546a:	f7ff fd33 	bl	d4ed4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d546e:	4621      	mov	r1, r4
   d5470:	2220      	movs	r2, #32
   d5472:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5474:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5476:	f000 fa86 	bl	d5986 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d547a:	2340      	movs	r3, #64	; 0x40
   d547c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d547e:	4621      	mov	r1, r4
   d5480:	466b      	mov	r3, sp
   d5482:	aa0c      	add	r2, sp, #48	; 0x30
   d5484:	4630      	mov	r0, r6
   d5486:	f7fe fe83 	bl	d4190 <netdb_getaddrinfo>
    if (!r) {
   d548a:	4604      	mov	r4, r0
   d548c:	2800      	cmp	r0, #0
   d548e:	d144      	bne.n	d551a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5490:	4602      	mov	r2, r0
   d5492:	2101      	movs	r1, #1
   d5494:	6868      	ldr	r0, [r5, #4]
   d5496:	f7fe ffe7 	bl	d4468 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d549a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d549c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d549e:	4622      	mov	r2, r4
   d54a0:	6868      	ldr	r0, [r5, #4]
   d54a2:	f7fe ffe1 	bl	d4468 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d54a6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d54a8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d54aa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d54ac:	2e00      	cmp	r6, #0
   d54ae:	d034      	beq.n	d551a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d54b0:	2900      	cmp	r1, #0
   d54b2:	d132      	bne.n	d551a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d54b4:	6873      	ldr	r3, [r6, #4]
   d54b6:	2b02      	cmp	r3, #2
   d54b8:	d002      	beq.n	d54c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d54ba:	2b0a      	cmp	r3, #10
   d54bc:	d009      	beq.n	d54d2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d54be:	e02a      	b.n	d5516 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d54c0:	f1b8 0f00 	cmp.w	r8, #0
   d54c4:	d027      	beq.n	d5516 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d54c6:	6971      	ldr	r1, [r6, #20]
   d54c8:	4638      	mov	r0, r7
   d54ca:	3104      	adds	r1, #4
   d54cc:	f7ff fd2f 	bl	d4f2e <_ZN9IPAddressaSEPKh>
   d54d0:	e020      	b.n	d5514 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d54d2:	f1b9 0f00 	cmp.w	r9, #0
   d54d6:	d01e      	beq.n	d5516 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d54d8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d54da:	2211      	movs	r2, #17
   d54dc:	a801      	add	r0, sp, #4
   d54de:	f000 fa52 	bl	d5986 <memset>
                    a.v = 6;
   d54e2:	2306      	movs	r3, #6
   d54e4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d54e8:	ad01      	add	r5, sp, #4
   d54ea:	f104 0308 	add.w	r3, r4, #8
   d54ee:	3418      	adds	r4, #24
   d54f0:	6818      	ldr	r0, [r3, #0]
   d54f2:	6859      	ldr	r1, [r3, #4]
   d54f4:	462a      	mov	r2, r5
   d54f6:	c203      	stmia	r2!, {r0, r1}
   d54f8:	3308      	adds	r3, #8
   d54fa:	42a3      	cmp	r3, r4
   d54fc:	4615      	mov	r5, r2
   d54fe:	d1f7      	bne.n	d54f0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5500:	a901      	add	r1, sp, #4
   d5502:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5504:	ad07      	add	r5, sp, #28
   d5506:	f7ff fcf3 	bl	d4ef0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d550a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d550c:	1d3c      	adds	r4, r7, #4
   d550e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5510:	682b      	ldr	r3, [r5, #0]
   d5512:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5514:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5516:	69f6      	ldr	r6, [r6, #28]
   d5518:	e7c8      	b.n	d54ac <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d551a:	9800      	ldr	r0, [sp, #0]
   d551c:	f7fe fe30 	bl	d4180 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5520:	4638      	mov	r0, r7
   d5522:	b015      	add	sp, #84	; 0x54
   d5524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5528 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5528:	4b02      	ldr	r3, [pc, #8]	; (d5534 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d552a:	4a03      	ldr	r2, [pc, #12]	; (d5538 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d552c:	601a      	str	r2, [r3, #0]
   d552e:	2200      	movs	r2, #0
   d5530:	605a      	str	r2, [r3, #4]
   d5532:	4770      	bx	lr
   d5534:	2003e71c 	.word	0x2003e71c
   d5538:	000d5cc0 	.word	0x000d5cc0

000d553c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d553c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d553e:	4e18      	ldr	r6, [pc, #96]	; (d55a0 <pinAvailable+0x64>)
   d5540:	6831      	ldr	r1, [r6, #0]
   d5542:	f011 0501 	ands.w	r5, r1, #1
   d5546:	4604      	mov	r4, r0
   d5548:	d10a      	bne.n	d5560 <pinAvailable+0x24>
   d554a:	4630      	mov	r0, r6
   d554c:	f7fe fda9 	bl	d40a2 <__cxa_guard_acquire>
   d5550:	b130      	cbz	r0, d5560 <pinAvailable+0x24>
   d5552:	4629      	mov	r1, r5
   d5554:	4813      	ldr	r0, [pc, #76]	; (d55a4 <pinAvailable+0x68>)
   d5556:	f7ff f835 	bl	d45c4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d555a:	4630      	mov	r0, r6
   d555c:	f7fe fda6 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d5560:	4810      	ldr	r0, [pc, #64]	; (d55a4 <pinAvailable+0x68>)
   d5562:	f7ff f839 	bl	d45d8 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5566:	b128      	cbz	r0, d5574 <pinAvailable+0x38>
   d5568:	f1a4 030b 	sub.w	r3, r4, #11
   d556c:	2b02      	cmp	r3, #2
   d556e:	d801      	bhi.n	d5574 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d5570:	2000      	movs	r0, #0
   d5572:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5574:	f000 f85c 	bl	d5630 <_Z19__fetch_global_Wirev>
   d5578:	f7ff fe3c 	bl	d51f4 <_ZN7TwoWire9isEnabledEv>
   d557c:	b108      	cbz	r0, d5582 <pinAvailable+0x46>
   d557e:	2c01      	cmp	r4, #1
   d5580:	d9f6      	bls.n	d5570 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5582:	f7ff fdbf 	bl	d5104 <_Z22__fetch_global_Serial1v>
   d5586:	f7ff fdb9 	bl	d50fc <_ZN11USARTSerial9isEnabledEv>
   d558a:	b118      	cbz	r0, d5594 <pinAvailable+0x58>
   d558c:	f1a4 0309 	sub.w	r3, r4, #9
   d5590:	2b01      	cmp	r3, #1
   d5592:	d9ed      	bls.n	d5570 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5594:	2c23      	cmp	r4, #35	; 0x23
   d5596:	bf8c      	ite	hi
   d5598:	2000      	movhi	r0, #0
   d559a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d559c:	bd70      	pop	{r4, r5, r6, pc}
   d559e:	bf00      	nop
   d55a0:	2003e724 	.word	0x2003e724
   d55a4:	2003e728 	.word	0x2003e728

000d55a8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d55a8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d55aa:	b538      	push	{r3, r4, r5, lr}
   d55ac:	4604      	mov	r4, r0
   d55ae:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d55b0:	d80a      	bhi.n	d55c8 <pinMode+0x20>
   d55b2:	29ff      	cmp	r1, #255	; 0xff
   d55b4:	d008      	beq.n	d55c8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d55b6:	f7ff ffc1 	bl	d553c <pinAvailable>
   d55ba:	b128      	cbz	r0, d55c8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d55bc:	4629      	mov	r1, r5
   d55be:	4620      	mov	r0, r4
}
   d55c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d55c4:	f7fe bdf4 	b.w	d41b0 <HAL_Pin_Mode>
   d55c8:	bd38      	pop	{r3, r4, r5, pc}

000d55ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d55ca:	b538      	push	{r3, r4, r5, lr}
   d55cc:	4604      	mov	r4, r0
   d55ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d55d0:	f7fe fdf6 	bl	d41c0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d55d4:	28ff      	cmp	r0, #255	; 0xff
   d55d6:	d010      	beq.n	d55fa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d55d8:	2806      	cmp	r0, #6
   d55da:	d804      	bhi.n	d55e6 <digitalWrite+0x1c>
   d55dc:	234d      	movs	r3, #77	; 0x4d
   d55de:	fa23 f000 	lsr.w	r0, r3, r0
   d55e2:	07c3      	lsls	r3, r0, #31
   d55e4:	d409      	bmi.n	d55fa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d55e6:	4620      	mov	r0, r4
   d55e8:	f7ff ffa8 	bl	d553c <pinAvailable>
   d55ec:	b128      	cbz	r0, d55fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d55ee:	4629      	mov	r1, r5
   d55f0:	4620      	mov	r0, r4
}
   d55f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d55f6:	f7fe bdeb 	b.w	d41d0 <HAL_GPIO_Write>
   d55fa:	bd38      	pop	{r3, r4, r5, pc}

000d55fc <_Z17acquireWireBufferv>:
   d55fc:	b570      	push	{r4, r5, r6, lr}
   d55fe:	4604      	mov	r4, r0
   d5600:	2514      	movs	r5, #20
   d5602:	462a      	mov	r2, r5
   d5604:	4e09      	ldr	r6, [pc, #36]	; (d562c <_Z17acquireWireBufferv+0x30>)
   d5606:	2100      	movs	r1, #0
   d5608:	f000 f9bd 	bl	d5986 <memset>
   d560c:	8025      	strh	r5, [r4, #0]
   d560e:	2520      	movs	r5, #32
   d5610:	4631      	mov	r1, r6
   d5612:	60a5      	str	r5, [r4, #8]
   d5614:	6125      	str	r5, [r4, #16]
   d5616:	4628      	mov	r0, r5
   d5618:	f000 f840 	bl	d569c <_ZnajRKSt9nothrow_t>
   d561c:	4631      	mov	r1, r6
   d561e:	6060      	str	r0, [r4, #4]
   d5620:	4628      	mov	r0, r5
   d5622:	f000 f83b 	bl	d569c <_ZnajRKSt9nothrow_t>
   d5626:	60e0      	str	r0, [r4, #12]
   d5628:	4620      	mov	r0, r4
   d562a:	bd70      	pop	{r4, r5, r6, pc}
   d562c:	000d5cec 	.word	0x000d5cec

000d5630 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5630:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5632:	4d0e      	ldr	r5, [pc, #56]	; (d566c <_Z19__fetch_global_Wirev+0x3c>)
   d5634:	6829      	ldr	r1, [r5, #0]
   d5636:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d563a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d563c:	d113      	bne.n	d5666 <_Z19__fetch_global_Wirev+0x36>
   d563e:	4628      	mov	r0, r5
   d5640:	f7fe fd2f 	bl	d40a2 <__cxa_guard_acquire>
   d5644:	b178      	cbz	r0, d5666 <_Z19__fetch_global_Wirev+0x36>
   d5646:	a801      	add	r0, sp, #4
   d5648:	f7ff ffd8 	bl	d55fc <_Z17acquireWireBufferv>
   d564c:	aa01      	add	r2, sp, #4
   d564e:	4621      	mov	r1, r4
   d5650:	4807      	ldr	r0, [pc, #28]	; (d5670 <_Z19__fetch_global_Wirev+0x40>)
   d5652:	f7ff fdbd 	bl	d51d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5656:	4628      	mov	r0, r5
   d5658:	f7fe fd28 	bl	d40ac <__cxa_guard_release>
   d565c:	4a05      	ldr	r2, [pc, #20]	; (d5674 <_Z19__fetch_global_Wirev+0x44>)
   d565e:	4906      	ldr	r1, [pc, #24]	; (d5678 <_Z19__fetch_global_Wirev+0x48>)
   d5660:	4803      	ldr	r0, [pc, #12]	; (d5670 <_Z19__fetch_global_Wirev+0x40>)
   d5662:	f000 f80b 	bl	d567c <__aeabi_atexit>
	return wire;
}
   d5666:	4802      	ldr	r0, [pc, #8]	; (d5670 <_Z19__fetch_global_Wirev+0x40>)
   d5668:	b007      	add	sp, #28
   d566a:	bd30      	pop	{r4, r5, pc}
   d566c:	2003e734 	.word	0x2003e734
   d5670:	2003e738 	.word	0x2003e738
   d5674:	2003e3c8 	.word	0x2003e3c8
   d5678:	000d5179 	.word	0x000d5179

000d567c <__aeabi_atexit>:
   d567c:	460b      	mov	r3, r1
   d567e:	4601      	mov	r1, r0
   d5680:	4618      	mov	r0, r3
   d5682:	f000 b967 	b.w	d5954 <__cxa_atexit>
	...

000d5688 <_ZSt15get_new_handlerv>:
   d5688:	4b02      	ldr	r3, [pc, #8]	; (d5694 <_ZSt15get_new_handlerv+0xc>)
   d568a:	6818      	ldr	r0, [r3, #0]
   d568c:	f3bf 8f5f 	dmb	sy
   d5690:	4770      	bx	lr
   d5692:	bf00      	nop
   d5694:	2003e74c 	.word	0x2003e74c

000d5698 <_ZdlPvj>:
   d5698:	f7fe bcff 	b.w	d409a <_ZdlPv>

000d569c <_ZnajRKSt9nothrow_t>:
   d569c:	f000 b800 	b.w	d56a0 <_ZnwjRKSt9nothrow_t>

000d56a0 <_ZnwjRKSt9nothrow_t>:
   d56a0:	b510      	push	{r4, lr}
   d56a2:	2800      	cmp	r0, #0
   d56a4:	bf14      	ite	ne
   d56a6:	4604      	movne	r4, r0
   d56a8:	2401      	moveq	r4, #1
   d56aa:	4620      	mov	r0, r4
   d56ac:	f7fe ff2c 	bl	d4508 <malloc>
   d56b0:	b920      	cbnz	r0, d56bc <_ZnwjRKSt9nothrow_t+0x1c>
   d56b2:	f7ff ffe9 	bl	d5688 <_ZSt15get_new_handlerv>
   d56b6:	b108      	cbz	r0, d56bc <_ZnwjRKSt9nothrow_t+0x1c>
   d56b8:	4780      	blx	r0
   d56ba:	e7f6      	b.n	d56aa <_ZnwjRKSt9nothrow_t+0xa>
   d56bc:	bd10      	pop	{r4, pc}

000d56be <_ZSt25__throw_bad_function_callv>:
   d56be:	b508      	push	{r3, lr}
   d56c0:	f7fe ff32 	bl	d4528 <abort>

000d56c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d56c4:	4b18      	ldr	r3, [pc, #96]	; (d5728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d56c6:	681a      	ldr	r2, [r3, #0]
   d56c8:	07d1      	lsls	r1, r2, #31
   d56ca:	bf5c      	itt	pl
   d56cc:	2201      	movpl	r2, #1
   d56ce:	601a      	strpl	r2, [r3, #0]
   d56d0:	4b16      	ldr	r3, [pc, #88]	; (d572c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d56d2:	681a      	ldr	r2, [r3, #0]
   d56d4:	07d2      	lsls	r2, r2, #31
   d56d6:	bf5c      	itt	pl
   d56d8:	2201      	movpl	r2, #1
   d56da:	601a      	strpl	r2, [r3, #0]
   d56dc:	4b14      	ldr	r3, [pc, #80]	; (d5730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d56de:	681a      	ldr	r2, [r3, #0]
   d56e0:	07d0      	lsls	r0, r2, #31
   d56e2:	bf5c      	itt	pl
   d56e4:	2201      	movpl	r2, #1
   d56e6:	601a      	strpl	r2, [r3, #0]
   d56e8:	4b12      	ldr	r3, [pc, #72]	; (d5734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d56ea:	681a      	ldr	r2, [r3, #0]
   d56ec:	07d1      	lsls	r1, r2, #31
   d56ee:	bf5c      	itt	pl
   d56f0:	2201      	movpl	r2, #1
   d56f2:	601a      	strpl	r2, [r3, #0]
   d56f4:	4b10      	ldr	r3, [pc, #64]	; (d5738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d56f6:	681a      	ldr	r2, [r3, #0]
   d56f8:	07d2      	lsls	r2, r2, #31
   d56fa:	bf5c      	itt	pl
   d56fc:	2201      	movpl	r2, #1
   d56fe:	601a      	strpl	r2, [r3, #0]
   d5700:	4b0e      	ldr	r3, [pc, #56]	; (d573c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5702:	681a      	ldr	r2, [r3, #0]
   d5704:	07d0      	lsls	r0, r2, #31
   d5706:	bf5c      	itt	pl
   d5708:	2201      	movpl	r2, #1
   d570a:	601a      	strpl	r2, [r3, #0]
   d570c:	4b0c      	ldr	r3, [pc, #48]	; (d5740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d570e:	681a      	ldr	r2, [r3, #0]
   d5710:	07d1      	lsls	r1, r2, #31
   d5712:	bf5c      	itt	pl
   d5714:	2201      	movpl	r2, #1
   d5716:	601a      	strpl	r2, [r3, #0]
   d5718:	4b0a      	ldr	r3, [pc, #40]	; (d5744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d571a:	681a      	ldr	r2, [r3, #0]
   d571c:	07d2      	lsls	r2, r2, #31
   d571e:	bf5c      	itt	pl
   d5720:	2201      	movpl	r2, #1
   d5722:	601a      	strpl	r2, [r3, #0]
   d5724:	4770      	bx	lr
   d5726:	bf00      	nop
   d5728:	2003e76c 	.word	0x2003e76c
   d572c:	2003e768 	.word	0x2003e768
   d5730:	2003e764 	.word	0x2003e764
   d5734:	2003e760 	.word	0x2003e760
   d5738:	2003e75c 	.word	0x2003e75c
   d573c:	2003e758 	.word	0x2003e758
   d5740:	2003e754 	.word	0x2003e754
   d5744:	2003e750 	.word	0x2003e750

000d5748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5748:	4b24      	ldr	r3, [pc, #144]	; (d57dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d574a:	681a      	ldr	r2, [r3, #0]
   d574c:	07d0      	lsls	r0, r2, #31
   d574e:	bf5c      	itt	pl
   d5750:	2201      	movpl	r2, #1
   d5752:	601a      	strpl	r2, [r3, #0]
   d5754:	4b22      	ldr	r3, [pc, #136]	; (d57e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5756:	681a      	ldr	r2, [r3, #0]
   d5758:	07d1      	lsls	r1, r2, #31
   d575a:	bf5c      	itt	pl
   d575c:	2201      	movpl	r2, #1
   d575e:	601a      	strpl	r2, [r3, #0]
   d5760:	4b20      	ldr	r3, [pc, #128]	; (d57e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5762:	681a      	ldr	r2, [r3, #0]
   d5764:	07d2      	lsls	r2, r2, #31
   d5766:	bf5c      	itt	pl
   d5768:	2201      	movpl	r2, #1
   d576a:	601a      	strpl	r2, [r3, #0]
   d576c:	4b1e      	ldr	r3, [pc, #120]	; (d57e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d576e:	681a      	ldr	r2, [r3, #0]
   d5770:	07d0      	lsls	r0, r2, #31
   d5772:	bf5c      	itt	pl
   d5774:	2201      	movpl	r2, #1
   d5776:	601a      	strpl	r2, [r3, #0]
   d5778:	4b1c      	ldr	r3, [pc, #112]	; (d57ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d577a:	681a      	ldr	r2, [r3, #0]
   d577c:	07d1      	lsls	r1, r2, #31
   d577e:	bf5c      	itt	pl
   d5780:	2201      	movpl	r2, #1
   d5782:	601a      	strpl	r2, [r3, #0]
   d5784:	4b1a      	ldr	r3, [pc, #104]	; (d57f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5786:	681a      	ldr	r2, [r3, #0]
   d5788:	07d2      	lsls	r2, r2, #31
   d578a:	bf5c      	itt	pl
   d578c:	2201      	movpl	r2, #1
   d578e:	601a      	strpl	r2, [r3, #0]
   d5790:	4b18      	ldr	r3, [pc, #96]	; (d57f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5792:	681a      	ldr	r2, [r3, #0]
   d5794:	07d0      	lsls	r0, r2, #31
   d5796:	bf5c      	itt	pl
   d5798:	2201      	movpl	r2, #1
   d579a:	601a      	strpl	r2, [r3, #0]
   d579c:	4b16      	ldr	r3, [pc, #88]	; (d57f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d579e:	681a      	ldr	r2, [r3, #0]
   d57a0:	07d1      	lsls	r1, r2, #31
   d57a2:	bf5c      	itt	pl
   d57a4:	2201      	movpl	r2, #1
   d57a6:	601a      	strpl	r2, [r3, #0]
   d57a8:	4b14      	ldr	r3, [pc, #80]	; (d57fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d57aa:	681a      	ldr	r2, [r3, #0]
   d57ac:	07d2      	lsls	r2, r2, #31
   d57ae:	bf5c      	itt	pl
   d57b0:	2201      	movpl	r2, #1
   d57b2:	601a      	strpl	r2, [r3, #0]
   d57b4:	4b12      	ldr	r3, [pc, #72]	; (d5800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d57b6:	681a      	ldr	r2, [r3, #0]
   d57b8:	07d0      	lsls	r0, r2, #31
   d57ba:	bf5c      	itt	pl
   d57bc:	2201      	movpl	r2, #1
   d57be:	601a      	strpl	r2, [r3, #0]
   d57c0:	4b10      	ldr	r3, [pc, #64]	; (d5804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d57c2:	681a      	ldr	r2, [r3, #0]
   d57c4:	07d1      	lsls	r1, r2, #31
   d57c6:	bf5c      	itt	pl
   d57c8:	2201      	movpl	r2, #1
   d57ca:	601a      	strpl	r2, [r3, #0]
   d57cc:	4b0e      	ldr	r3, [pc, #56]	; (d5808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d57ce:	681a      	ldr	r2, [r3, #0]
   d57d0:	07d2      	lsls	r2, r2, #31
   d57d2:	bf5c      	itt	pl
   d57d4:	2201      	movpl	r2, #1
   d57d6:	601a      	strpl	r2, [r3, #0]
   d57d8:	4770      	bx	lr
   d57da:	bf00      	nop
   d57dc:	2003e79c 	.word	0x2003e79c
   d57e0:	2003e798 	.word	0x2003e798
   d57e4:	2003e794 	.word	0x2003e794
   d57e8:	2003e790 	.word	0x2003e790
   d57ec:	2003e78c 	.word	0x2003e78c
   d57f0:	2003e788 	.word	0x2003e788
   d57f4:	2003e784 	.word	0x2003e784
   d57f8:	2003e780 	.word	0x2003e780
   d57fc:	2003e77c 	.word	0x2003e77c
   d5800:	2003e778 	.word	0x2003e778
   d5804:	2003e774 	.word	0x2003e774
   d5808:	2003e770 	.word	0x2003e770

000d580c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d580c:	4b24      	ldr	r3, [pc, #144]	; (d58a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d580e:	681a      	ldr	r2, [r3, #0]
   d5810:	07d0      	lsls	r0, r2, #31
   d5812:	bf5c      	itt	pl
   d5814:	2201      	movpl	r2, #1
   d5816:	601a      	strpl	r2, [r3, #0]
   d5818:	4b22      	ldr	r3, [pc, #136]	; (d58a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d581a:	681a      	ldr	r2, [r3, #0]
   d581c:	07d1      	lsls	r1, r2, #31
   d581e:	bf5c      	itt	pl
   d5820:	2201      	movpl	r2, #1
   d5822:	601a      	strpl	r2, [r3, #0]
   d5824:	4b20      	ldr	r3, [pc, #128]	; (d58a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5826:	681a      	ldr	r2, [r3, #0]
   d5828:	07d2      	lsls	r2, r2, #31
   d582a:	bf5c      	itt	pl
   d582c:	2201      	movpl	r2, #1
   d582e:	601a      	strpl	r2, [r3, #0]
   d5830:	4b1e      	ldr	r3, [pc, #120]	; (d58ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5832:	681a      	ldr	r2, [r3, #0]
   d5834:	07d0      	lsls	r0, r2, #31
   d5836:	bf5c      	itt	pl
   d5838:	2201      	movpl	r2, #1
   d583a:	601a      	strpl	r2, [r3, #0]
   d583c:	4b1c      	ldr	r3, [pc, #112]	; (d58b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d583e:	681a      	ldr	r2, [r3, #0]
   d5840:	07d1      	lsls	r1, r2, #31
   d5842:	bf5c      	itt	pl
   d5844:	2201      	movpl	r2, #1
   d5846:	601a      	strpl	r2, [r3, #0]
   d5848:	4b1a      	ldr	r3, [pc, #104]	; (d58b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d584a:	681a      	ldr	r2, [r3, #0]
   d584c:	07d2      	lsls	r2, r2, #31
   d584e:	bf5c      	itt	pl
   d5850:	2201      	movpl	r2, #1
   d5852:	601a      	strpl	r2, [r3, #0]
   d5854:	4b18      	ldr	r3, [pc, #96]	; (d58b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5856:	681a      	ldr	r2, [r3, #0]
   d5858:	07d0      	lsls	r0, r2, #31
   d585a:	bf5c      	itt	pl
   d585c:	2201      	movpl	r2, #1
   d585e:	601a      	strpl	r2, [r3, #0]
   d5860:	4b16      	ldr	r3, [pc, #88]	; (d58bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5862:	681a      	ldr	r2, [r3, #0]
   d5864:	07d1      	lsls	r1, r2, #31
   d5866:	bf5c      	itt	pl
   d5868:	2201      	movpl	r2, #1
   d586a:	601a      	strpl	r2, [r3, #0]
   d586c:	4b14      	ldr	r3, [pc, #80]	; (d58c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d586e:	681a      	ldr	r2, [r3, #0]
   d5870:	07d2      	lsls	r2, r2, #31
   d5872:	bf5c      	itt	pl
   d5874:	2201      	movpl	r2, #1
   d5876:	601a      	strpl	r2, [r3, #0]
   d5878:	4b12      	ldr	r3, [pc, #72]	; (d58c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d587a:	681a      	ldr	r2, [r3, #0]
   d587c:	07d0      	lsls	r0, r2, #31
   d587e:	bf5c      	itt	pl
   d5880:	2201      	movpl	r2, #1
   d5882:	601a      	strpl	r2, [r3, #0]
   d5884:	4b10      	ldr	r3, [pc, #64]	; (d58c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5886:	681a      	ldr	r2, [r3, #0]
   d5888:	07d1      	lsls	r1, r2, #31
   d588a:	bf5c      	itt	pl
   d588c:	2201      	movpl	r2, #1
   d588e:	601a      	strpl	r2, [r3, #0]
   d5890:	4b0e      	ldr	r3, [pc, #56]	; (d58cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5892:	681a      	ldr	r2, [r3, #0]
   d5894:	07d2      	lsls	r2, r2, #31
   d5896:	bf5c      	itt	pl
   d5898:	2201      	movpl	r2, #1
   d589a:	601a      	strpl	r2, [r3, #0]
   d589c:	4770      	bx	lr
   d589e:	bf00      	nop
   d58a0:	2003e7cc 	.word	0x2003e7cc
   d58a4:	2003e7c8 	.word	0x2003e7c8
   d58a8:	2003e7c4 	.word	0x2003e7c4
   d58ac:	2003e7c0 	.word	0x2003e7c0
   d58b0:	2003e7bc 	.word	0x2003e7bc
   d58b4:	2003e7b8 	.word	0x2003e7b8
   d58b8:	2003e7b4 	.word	0x2003e7b4
   d58bc:	2003e7b0 	.word	0x2003e7b0
   d58c0:	2003e7ac 	.word	0x2003e7ac
   d58c4:	2003e7a8 	.word	0x2003e7a8
   d58c8:	2003e7a4 	.word	0x2003e7a4
   d58cc:	2003e7a0 	.word	0x2003e7a0

000d58d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d58d0:	4b18      	ldr	r3, [pc, #96]	; (d5934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d58d2:	681a      	ldr	r2, [r3, #0]
   d58d4:	07d1      	lsls	r1, r2, #31
   d58d6:	bf5c      	itt	pl
   d58d8:	2201      	movpl	r2, #1
   d58da:	601a      	strpl	r2, [r3, #0]
   d58dc:	4b16      	ldr	r3, [pc, #88]	; (d5938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d58de:	681a      	ldr	r2, [r3, #0]
   d58e0:	07d2      	lsls	r2, r2, #31
   d58e2:	bf5c      	itt	pl
   d58e4:	2201      	movpl	r2, #1
   d58e6:	601a      	strpl	r2, [r3, #0]
   d58e8:	4b14      	ldr	r3, [pc, #80]	; (d593c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d58ea:	681a      	ldr	r2, [r3, #0]
   d58ec:	07d0      	lsls	r0, r2, #31
   d58ee:	bf5c      	itt	pl
   d58f0:	2201      	movpl	r2, #1
   d58f2:	601a      	strpl	r2, [r3, #0]
   d58f4:	4b12      	ldr	r3, [pc, #72]	; (d5940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d58f6:	681a      	ldr	r2, [r3, #0]
   d58f8:	07d1      	lsls	r1, r2, #31
   d58fa:	bf5c      	itt	pl
   d58fc:	2201      	movpl	r2, #1
   d58fe:	601a      	strpl	r2, [r3, #0]
   d5900:	4b10      	ldr	r3, [pc, #64]	; (d5944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5902:	681a      	ldr	r2, [r3, #0]
   d5904:	07d2      	lsls	r2, r2, #31
   d5906:	bf5c      	itt	pl
   d5908:	2201      	movpl	r2, #1
   d590a:	601a      	strpl	r2, [r3, #0]
   d590c:	4b0e      	ldr	r3, [pc, #56]	; (d5948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d590e:	681a      	ldr	r2, [r3, #0]
   d5910:	07d0      	lsls	r0, r2, #31
   d5912:	bf5c      	itt	pl
   d5914:	2201      	movpl	r2, #1
   d5916:	601a      	strpl	r2, [r3, #0]
   d5918:	4b0c      	ldr	r3, [pc, #48]	; (d594c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d591a:	681a      	ldr	r2, [r3, #0]
   d591c:	07d1      	lsls	r1, r2, #31
   d591e:	bf5c      	itt	pl
   d5920:	2201      	movpl	r2, #1
   d5922:	601a      	strpl	r2, [r3, #0]
   d5924:	4b0a      	ldr	r3, [pc, #40]	; (d5950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5926:	681a      	ldr	r2, [r3, #0]
   d5928:	07d2      	lsls	r2, r2, #31
   d592a:	bf5c      	itt	pl
   d592c:	2201      	movpl	r2, #1
   d592e:	601a      	strpl	r2, [r3, #0]
   d5930:	4770      	bx	lr
   d5932:	bf00      	nop
   d5934:	2003e7ec 	.word	0x2003e7ec
   d5938:	2003e7e8 	.word	0x2003e7e8
   d593c:	2003e7e4 	.word	0x2003e7e4
   d5940:	2003e7e0 	.word	0x2003e7e0
   d5944:	2003e7dc 	.word	0x2003e7dc
   d5948:	2003e7d8 	.word	0x2003e7d8
   d594c:	2003e7d4 	.word	0x2003e7d4
   d5950:	2003e7d0 	.word	0x2003e7d0

000d5954 <__cxa_atexit>:
   d5954:	b510      	push	{r4, lr}
   d5956:	4c05      	ldr	r4, [pc, #20]	; (d596c <__cxa_atexit+0x18>)
   d5958:	4613      	mov	r3, r2
   d595a:	b12c      	cbz	r4, d5968 <__cxa_atexit+0x14>
   d595c:	460a      	mov	r2, r1
   d595e:	4601      	mov	r1, r0
   d5960:	2002      	movs	r0, #2
   d5962:	f3af 8000 	nop.w
   d5966:	bd10      	pop	{r4, pc}
   d5968:	4620      	mov	r0, r4
   d596a:	bd10      	pop	{r4, pc}
   d596c:	00000000 	.word	0x00000000

000d5970 <memcpy>:
   d5970:	b510      	push	{r4, lr}
   d5972:	1e43      	subs	r3, r0, #1
   d5974:	440a      	add	r2, r1
   d5976:	4291      	cmp	r1, r2
   d5978:	d004      	beq.n	d5984 <memcpy+0x14>
   d597a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d597e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5982:	e7f8      	b.n	d5976 <memcpy+0x6>
   d5984:	bd10      	pop	{r4, pc}

000d5986 <memset>:
   d5986:	4402      	add	r2, r0
   d5988:	4603      	mov	r3, r0
   d598a:	4293      	cmp	r3, r2
   d598c:	d002      	beq.n	d5994 <memset+0xe>
   d598e:	f803 1b01 	strb.w	r1, [r3], #1
   d5992:	e7fa      	b.n	d598a <memset+0x4>
   d5994:	4770      	bx	lr
	...

000d5998 <srand>:
   d5998:	b538      	push	{r3, r4, r5, lr}
   d599a:	4b12      	ldr	r3, [pc, #72]	; (d59e4 <srand+0x4c>)
   d599c:	681c      	ldr	r4, [r3, #0]
   d599e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d59a0:	4605      	mov	r5, r0
   d59a2:	b9d3      	cbnz	r3, d59da <srand+0x42>
   d59a4:	2018      	movs	r0, #24
   d59a6:	f7fe fdaf 	bl	d4508 <malloc>
   d59aa:	f243 330e 	movw	r3, #13070	; 0x330e
   d59ae:	63a0      	str	r0, [r4, #56]	; 0x38
   d59b0:	8003      	strh	r3, [r0, #0]
   d59b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d59b6:	8043      	strh	r3, [r0, #2]
   d59b8:	f241 2334 	movw	r3, #4660	; 0x1234
   d59bc:	8083      	strh	r3, [r0, #4]
   d59be:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d59c2:	80c3      	strh	r3, [r0, #6]
   d59c4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d59c8:	8103      	strh	r3, [r0, #8]
   d59ca:	2305      	movs	r3, #5
   d59cc:	8143      	strh	r3, [r0, #10]
   d59ce:	230b      	movs	r3, #11
   d59d0:	8183      	strh	r3, [r0, #12]
   d59d2:	2201      	movs	r2, #1
   d59d4:	2300      	movs	r3, #0
   d59d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d59da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d59dc:	2200      	movs	r2, #0
   d59de:	611d      	str	r5, [r3, #16]
   d59e0:	615a      	str	r2, [r3, #20]
   d59e2:	bd38      	pop	{r3, r4, r5, pc}
   d59e4:	2003e3c4 	.word	0x2003e3c4

000d59e8 <strdup>:
   d59e8:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <strdup+0xc>)
   d59ea:	4601      	mov	r1, r0
   d59ec:	6818      	ldr	r0, [r3, #0]
   d59ee:	f000 b803 	b.w	d59f8 <_strdup_r>
   d59f2:	bf00      	nop
   d59f4:	2003e3c4 	.word	0x2003e3c4

000d59f8 <_strdup_r>:
   d59f8:	b570      	push	{r4, r5, r6, lr}
   d59fa:	4606      	mov	r6, r0
   d59fc:	4608      	mov	r0, r1
   d59fe:	460c      	mov	r4, r1
   d5a00:	f000 f80d 	bl	d5a1e <strlen>
   d5a04:	1c45      	adds	r5, r0, #1
   d5a06:	4629      	mov	r1, r5
   d5a08:	4630      	mov	r0, r6
   d5a0a:	f7fe fd95 	bl	d4538 <_malloc_r>
   d5a0e:	4606      	mov	r6, r0
   d5a10:	b118      	cbz	r0, d5a1a <_strdup_r+0x22>
   d5a12:	462a      	mov	r2, r5
   d5a14:	4621      	mov	r1, r4
   d5a16:	f7ff ffab 	bl	d5970 <memcpy>
   d5a1a:	4630      	mov	r0, r6
   d5a1c:	bd70      	pop	{r4, r5, r6, pc}

000d5a1e <strlen>:
   d5a1e:	4603      	mov	r3, r0
   d5a20:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5a24:	2a00      	cmp	r2, #0
   d5a26:	d1fb      	bne.n	d5a20 <strlen+0x2>
   d5a28:	1a18      	subs	r0, r3, r0
   d5a2a:	3801      	subs	r0, #1
   d5a2c:	4770      	bx	lr

000d5a2e <link_code_end>:
	...

000d5a30 <dynalib_user>:
   d5a30:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5a40:	0000 0000 6948 4520 696c 616a 0068 6554     ....Hi Elijah.Te
   d5a50:	7473 6e69 0067 0000                         sting...

000d5a58 <_ZTVN5spark13EthernetClassE>:
	...
   d5a60:	45a7 000d 459d 000d 4593 000d 4589 000d     .E...E...E...E..
   d5a70:	457d 000d 4571 000d 4565 000d 455d 000d     }E..qE..eE..]E..
   d5a80:	4553 000d 4549 000d 545d 000d 6162 6475     SE..IE..]T..baud
   d5a90:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5aa0:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5ab0:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5ac0:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5ad0:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5ae0:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5af0:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5b00:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5b10:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5b20:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5b30:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d5b40:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d5b50:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d5b60:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d5b70:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d5b80:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d5b90:	7463 6d69 0065 0000                         ctime...

000d5b98 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5ba0:	48d9 000d 48df 000d 4923 000d 48ed 000d     .H...H..#I...H..
   d5bb0:	48db 000d                                   .H..

000d5bb4 <_ZTV9IPAddress>:
	...
   d5bbc:	4e71 000d 4e61 000d 4e63 000d               qN..aN..cN..

000d5bc8 <_ZTV9USBSerial>:
	...
   d5bd0:	4f49 000d 4f99 000d 4fa7 000d 46b1 000d     IO...O...O...F..
   d5be0:	4f85 000d 4f4b 000d 4f61 000d 4f93 000d     .O..KO..aO...O..
   d5bf0:	4f77 000d 4f45 000d                         wO..EO..

000d5bf8 <_ZTV11USARTSerial>:
	...
   d5c00:	504d 000d 509d 000d 50ab 000d 46b1 000d     MP...P...P...F..
   d5c10:	5061 000d 5083 000d 506f 000d 5097 000d     aP...P..oP...P..
   d5c20:	504f 000d 5053 000d                         OP..SP..

000d5c28 <_ZTV7TwoWire>:
	...
   d5c30:	5179 000d 51c3 000d 519b 000d 517b 000d     yQ...Q...Q..{Q..
   d5c40:	51a3 000d 51ab 000d 51b3 000d 51bb 000d     .Q...Q...Q...Q..

000d5c50 <_ZTVN5spark9MeshClassE>:
	...
   d5c58:	525b 000d 5251 000d 5247 000d 523d 000d     [R..QR..GR..=R..
   d5c68:	5231 000d 5225 000d 5219 000d 5211 000d     1R..%R...R...R..
   d5c78:	5207 000d 51fd 000d 545d 000d               .R...Q..]T..

000d5c84 <_ZTVN5spark9WiFiClassE>:
	...
   d5c8c:	53d7 000d 53cd 000d 53c3 000d 5379 000d     .S...S...S..yS..
   d5c9c:	53b7 000d 53ab 000d 539f 000d 5397 000d     .S...S...S...S..
   d5cac:	538d 000d 5383 000d 545d 000d               .S...S..]T..

000d5cb8 <_ZTVN5spark12NetworkClassE>:
	...
   d5cc0:	53f5 000d 53ff 000d 5409 000d 5413 000d     .S...S...T...T..
   d5cd0:	541d 000d 5429 000d 5435 000d 5441 000d     .T..)T..5T..AT..
   d5ce0:	5449 000d 5453 000d 545d 000d               IT..ST..]T..

000d5cec <_ZSt7nothrow>:
   d5cec:	0000 0000                                   ....

000d5cf0 <__sf_fake_stdin>:
	...

000d5d10 <__sf_fake_stdout>:
	...

000d5d30 <__sf_fake_stderr>:
	...
   d5d50:	0043                                        C.

000d5d52 <link_const_variable_data_end>:
	...

000d5d54 <link_constructors_location>:
   d5d54:	000d4171 	.word	0x000d4171
   d5d58:	000d45b1 	.word	0x000d45b1
   d5d5c:	000d45fd 	.word	0x000d45fd
   d5d60:	000d4689 	.word	0x000d4689
   d5d64:	000d4745 	.word	0x000d4745
   d5d68:	000d4755 	.word	0x000d4755
   d5d6c:	000d47ad 	.word	0x000d47ad
   d5d70:	000d5329 	.word	0x000d5329
   d5d74:	000d53e1 	.word	0x000d53e1
   d5d78:	000d5529 	.word	0x000d5529
   d5d7c:	000d56c5 	.word	0x000d56c5
   d5d80:	000d5749 	.word	0x000d5749
   d5d84:	000d580d 	.word	0x000d580d
   d5d88:	000d58d1 	.word	0x000d58d1

000d5d8c <link_constructors_end>:
   d5d8c:	00000000 	.word	0x00000000
