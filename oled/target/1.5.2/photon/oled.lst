
c:/Users/Rick/Documents/dev/particle/oled/target/1.5.2/photon/oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005ec0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a5ee0  080a5ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a5ee8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080a5eec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000604  2000006c  2000006c  0004006c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a5f58  080a5f58  00035f58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a5f80  080a5f80  00035f80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000d8b85  00000000  00000000  00035f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00012f3a  00000000  00000000  0010eb09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00019d9b  00000000  00000000  00121a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002428  00000000  00000000  0013b7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003d60  00000000  00000000  0013dc06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002a575  00000000  00000000  00141966  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002c6c9  00000000  00000000  0016bedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000af217  00000000  00000000  001985a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ccb4  00000000  00000000  002477bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 facf 	bl	80a55d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 fad4 	bl	80a55ea <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5eec 	.word	0x080a5eec
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	2000006c 	.word	0x2000006c
 80a0058:	20000670 	.word	0x20000670
 80a005c:	20000670 	.word	0x20000670

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 fff7 	bl	80a2054 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a5ea0 	.word	0x080a5ea0
 80a0088:	080a5ee0 	.word	0x080a5ee0

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b82a 	b.w	80a00e4 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 facf 	bl	80a0634 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bf9d 	b.w	80a1fd8 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bcc9 	b.w	80a1a34 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bccf 	b.w	80a1a44 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b02      	ldr	r3, [pc, #8]	; (80a00c8 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
 80a00be:	6003      	str	r3, [r0, #0]
 80a00c0:	f000 fff4 	bl	80a10ac <_ZN10JsonWriterD1Ev>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	bd10      	pop	{r4, pc}
 80a00c8:	080a56b0 	.word	0x080a56b0

080a00cc <_ZN16JsonWriterStaticILj256EED0Ev>:
 80a00cc:	b510      	push	{r4, lr}
 80a00ce:	4604      	mov	r4, r0
 80a00d0:	f7ff fff2 	bl	80a00b8 <_ZN16JsonWriterStaticILj256EED1Ev>
 80a00d4:	4620      	mov	r0, r4
 80a00d6:	f44f 7198 	mov.w	r1, #304	; 0x130
 80a00da:	f002 feb9 	bl	80a2e50 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}
	...

080a00e4 <setup>:
String getAirQuality();
void createEventPayload(int temp, int humidity, int pressure, String airQuality);
void updateDisplay(int temp, int humidity, int pressure, String airQuality);

void setup()
{
 80a00e4:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a00e6:	f002 fb79 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a00ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ee:	f002 fb5b 	bl	80a27a8 <_ZN9USBSerial5beginEl>
  delay(50);
 80a00f2:	2032      	movs	r0, #50	; 0x32
 80a00f4:	f001 ff0e 	bl	80a1f14 <delay>

  // Configure the dust sensor pin as an input
  pinMode(DUST_SENSOR_PIN, INPUT);
 80a00f8:	2004      	movs	r0, #4
 80a00fa:	2100      	movs	r1, #0
 80a00fc:	f002 fdec 	bl	80a2cd8 <pinMode>

  if (aqSensor.init())
 80a0100:	4824      	ldr	r0, [pc, #144]	; (80a0194 <setup+0xb0>)
 80a0102:	f001 f926 	bl	80a1352 <_ZN16AirQualitySensor4initEv>
 80a0106:	b118      	cbz	r0, 80a0110 <setup+0x2c>
  {
    Serial.println("Air Quality Sensor ready.");
 80a0108:	f002 fb68 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a010c:	4922      	ldr	r1, [pc, #136]	; (80a0198 <setup+0xb4>)
 80a010e:	e002      	b.n	80a0116 <setup+0x32>
  }
  else
  {
    Serial.println("Air Quality Sensor ERROR!");
 80a0110:	f002 fb64 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a0114:	4921      	ldr	r1, [pc, #132]	; (80a019c <setup+0xb8>)
 80a0116:	f001 fe65 	bl	80a1de4 <_ZN5Print7printlnEPKc>
  }

  Wire.begin();
 80a011a:	f002 fe65 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a011e:	f002 fc93 	bl	80a2a48 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
 80a0122:	481f      	ldr	r0, [pc, #124]	; (80a01a0 <setup+0xbc>)
 80a0124:	f001 f98e 	bl	80a1444 <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
 80a0128:	481d      	ldr	r0, [pc, #116]	; (80a01a0 <setup+0xbc>)
 80a012a:	f001 f9f7 	bl	80a151c <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
 80a012e:	481c      	ldr	r0, [pc, #112]	; (80a01a0 <setup+0xbc>)
 80a0130:	f001 fa5b 	bl	80a15ea <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
 80a0134:	481a      	ldr	r0, [pc, #104]	; (80a01a0 <setup+0xbc>)
 80a0136:	f001 f99a 	bl	80a146e <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
 80a013a:	2200      	movs	r2, #0
 80a013c:	2102      	movs	r1, #2
 80a013e:	4818      	ldr	r0, [pc, #96]	; (80a01a0 <setup+0xbc>)
 80a0140:	f001 f9a2 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
 80a0144:	4917      	ldr	r1, [pc, #92]	; (80a01a4 <setup+0xc0>)
 80a0146:	4816      	ldr	r0, [pc, #88]	; (80a01a0 <setup+0xbc>)
 80a0148:	f001 fa0a 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
 80a014c:	2200      	movs	r2, #0
 80a014e:	2103      	movs	r1, #3
 80a0150:	4813      	ldr	r0, [pc, #76]	; (80a01a0 <setup+0xbc>)
 80a0152:	f001 f999 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Air Quality");
 80a0156:	4914      	ldr	r1, [pc, #80]	; (80a01a8 <setup+0xc4>)
 80a0158:	4811      	ldr	r0, [pc, #68]	; (80a01a0 <setup+0xbc>)
 80a015a:	f001 fa01 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
 80a015e:	2200      	movs	r2, #0
 80a0160:	2104      	movs	r1, #4
 80a0162:	480f      	ldr	r0, [pc, #60]	; (80a01a0 <setup+0xbc>)
 80a0164:	f001 f990 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Monitor");
 80a0168:	480d      	ldr	r0, [pc, #52]	; (80a01a0 <setup+0xbc>)
 80a016a:	4910      	ldr	r1, [pc, #64]	; (80a01ac <setup+0xc8>)
 80a016c:	f001 f9f8 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>

  if (bme.begin())
 80a0170:	480f      	ldr	r0, [pc, #60]	; (80a01b0 <setup+0xcc>)
 80a0172:	f000 ff6d 	bl	80a1050 <_ZN15Adafruit_BME2805beginEv>
 80a0176:	b118      	cbz	r0, 80a0180 <setup+0x9c>
  {
    Serial.println("BME280 Sensor ready.");
 80a0178:	f002 fb30 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a017c:	490d      	ldr	r1, [pc, #52]	; (80a01b4 <setup+0xd0>)
 80a017e:	e002      	b.n	80a0186 <setup+0xa2>
  }
  else
  {
    Serial.println("BME280 Sensor ERROR!");
 80a0180:	f002 fb2c 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a0184:	490c      	ldr	r1, [pc, #48]	; (80a01b8 <setup+0xd4>)
 80a0186:	f001 fe2d 	bl	80a1de4 <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a018a:	f001 faab 	bl	80a16e4 <HAL_Timer_Get_Milli_Seconds>
  }

  lastInterval = millis();
 80a018e:	4b0b      	ldr	r3, [pc, #44]	; (80a01bc <setup+0xd8>)
 80a0190:	6018      	str	r0, [r3, #0]
 80a0192:	bd08      	pop	{r3, pc}
 80a0194:	200000cc 	.word	0x200000cc
 80a0198:	080a56b8 	.word	0x080a56b8
 80a019c:	080a56d2 	.word	0x080a56d2
 80a01a0:	200000fc 	.word	0x200000fc
 80a01a4:	080a56ec 	.word	0x080a56ec
 80a01a8:	080a56f5 	.word	0x080a56f5
 80a01ac:	080a5701 	.word	0x080a5701
 80a01b0:	20000088 	.word	0x20000088
 80a01b4:	080a5709 	.word	0x080a5709
 80a01b8:	080a571e 	.word	0x080a571e
 80a01bc:	200000e8 	.word	0x200000e8

080a01c0 <_Z13getAirQualityv>:
    lastInterval = millis();
  }
}

String getAirQuality()
{
 80a01c0:	b538      	push	{r3, r4, r5, lr}
 80a01c2:	4604      	mov	r4, r0
  int quality = aqSensor.slope();
 80a01c4:	4811      	ldr	r0, [pc, #68]	; (80a020c <_Z13getAirQualityv+0x4c>)
 80a01c6:	f001 f8f1 	bl	80a13ac <_ZN16AirQualitySensor5slopeEv>
 80a01ca:	4605      	mov	r5, r0
  String qual = "None";
 80a01cc:	4910      	ldr	r1, [pc, #64]	; (80a0210 <_Z13getAirQualityv+0x50>)
 80a01ce:	4620      	mov	r0, r4
 80a01d0:	f001 fd91 	bl	80a1cf6 <_ZN6StringC1EPK19__FlashStringHelper>

  if (quality == AirQualitySensor::FORCE_SIGNAL)
 80a01d4:	4b0f      	ldr	r3, [pc, #60]	; (80a0214 <_Z13getAirQualityv+0x54>)
 80a01d6:	681b      	ldr	r3, [r3, #0]
 80a01d8:	429d      	cmp	r5, r3
 80a01da:	d101      	bne.n	80a01e0 <_Z13getAirQualityv+0x20>
  {
    qual = "Danger";
 80a01dc:	490e      	ldr	r1, [pc, #56]	; (80a0218 <_Z13getAirQualityv+0x58>)
 80a01de:	e010      	b.n	80a0202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::HIGH_POLLUTION)
 80a01e0:	4b0e      	ldr	r3, [pc, #56]	; (80a021c <_Z13getAirQualityv+0x5c>)
 80a01e2:	681b      	ldr	r3, [r3, #0]
 80a01e4:	429d      	cmp	r5, r3
 80a01e6:	d101      	bne.n	80a01ec <_Z13getAirQualityv+0x2c>
  {
    qual = "High Pollution";
 80a01e8:	490d      	ldr	r1, [pc, #52]	; (80a0220 <_Z13getAirQualityv+0x60>)
 80a01ea:	e00a      	b.n	80a0202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::LOW_POLLUTION)
 80a01ec:	4b0d      	ldr	r3, [pc, #52]	; (80a0224 <_Z13getAirQualityv+0x64>)
 80a01ee:	681b      	ldr	r3, [r3, #0]
 80a01f0:	429d      	cmp	r5, r3
 80a01f2:	d101      	bne.n	80a01f8 <_Z13getAirQualityv+0x38>
  {
    qual = "Low Pollution";
 80a01f4:	490c      	ldr	r1, [pc, #48]	; (80a0228 <_Z13getAirQualityv+0x68>)
 80a01f6:	e004      	b.n	80a0202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::FRESH_AIR)
 80a01f8:	4b0c      	ldr	r3, [pc, #48]	; (80a022c <_Z13getAirQualityv+0x6c>)
 80a01fa:	681b      	ldr	r3, [r3, #0]
 80a01fc:	429d      	cmp	r5, r3
 80a01fe:	d103      	bne.n	80a0208 <_Z13getAirQualityv+0x48>
  {
    qual = "Fresh Air";
 80a0200:	490b      	ldr	r1, [pc, #44]	; (80a0230 <_Z13getAirQualityv+0x70>)
 80a0202:	4620      	mov	r0, r4
 80a0204:	f001 fda4 	bl	80a1d50 <_ZN6StringaSEPKc>
  }

  return qual;
}
 80a0208:	4620      	mov	r0, r4
 80a020a:	bd38      	pop	{r3, r4, r5, pc}
 80a020c:	200000cc 	.word	0x200000cc
 80a0210:	080a5733 	.word	0x080a5733
 80a0214:	080a58f0 	.word	0x080a58f0
 80a0218:	080a5738 	.word	0x080a5738
 80a021c:	080a58ec 	.word	0x080a58ec
 80a0220:	080a573f 	.word	0x080a573f
 80a0224:	080a58e4 	.word	0x080a58e4
 80a0228:	080a574e 	.word	0x080a574e
 80a022c:	080a58e8 	.word	0x080a58e8
 80a0230:	080a575c 	.word	0x080a575c

080a0234 <_Z12getBMEValuesRiS_S_>:

int getBMEValues(int &temp, int &pressure, int &humidity)
{
 80a0234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  temp = (int)bme.readTemperature();
 80a0236:	4c0d      	ldr	r4, [pc, #52]	; (80a026c <_Z12getBMEValuesRiS_S_+0x38>)

  return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
 80a0238:	4607      	mov	r7, r0
  temp = (int)bme.readTemperature();
 80a023a:	4620      	mov	r0, r4

  return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
 80a023c:	4615      	mov	r5, r2
 80a023e:	460e      	mov	r6, r1
  temp = (int)bme.readTemperature();
 80a0240:	f000 fb98 	bl	80a0974 <_ZN15Adafruit_BME28015readTemperatureEv>
 80a0244:	f004 ffca 	bl	80a51dc <__aeabi_f2iz>
 80a0248:	6038      	str	r0, [r7, #0]
  pressure = (int)(bme.readPressure() / 100.0F);
 80a024a:	4620      	mov	r0, r4
 80a024c:	f000 fbbc 	bl	80a09c8 <_ZN15Adafruit_BME28012readPressureEv>
 80a0250:	4907      	ldr	r1, [pc, #28]	; (80a0270 <_Z12getBMEValuesRiS_S_+0x3c>)
 80a0252:	f004 feb1 	bl	80a4fb8 <__aeabi_fdiv>
 80a0256:	f004 ffc1 	bl	80a51dc <__aeabi_f2iz>
 80a025a:	6030      	str	r0, [r6, #0]
  humidity = (int)bme.readHumidity();
 80a025c:	4620      	mov	r0, r4
 80a025e:	f000 fcf3 	bl	80a0c48 <_ZN15Adafruit_BME28012readHumidityEv>
 80a0262:	f004 ffbb 	bl	80a51dc <__aeabi_f2iz>
 80a0266:	6028      	str	r0, [r5, #0]

  return 1;
}
 80a0268:	2001      	movs	r0, #1
 80a026a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a026c:	20000088 	.word	0x20000088
 80a0270:	42c80000 	.word	0x42c80000
 80a0274:	00000000 	.word	0x00000000

080a0278 <_Z21getDustSensorReadingsv>:

void getDustSensorReadings()
{
 80a0278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
 80a027c:	4c44      	ldr	r4, [pc, #272]	; (80a0390 <_Z21getDustSensorReadingsv+0x118>)
 80a027e:	4b45      	ldr	r3, [pc, #276]	; (80a0394 <_Z21getDustSensorReadingsv+0x11c>)
 80a0280:	6822      	ldr	r2, [r4, #0]
 80a0282:	b912      	cbnz	r2, 80a028a <_Z21getDustSensorReadingsv+0x12>
  {
    lowpulseoccupancy = last_lpo;
 80a0284:	681b      	ldr	r3, [r3, #0]
 80a0286:	6023      	str	r3, [r4, #0]
 80a0288:	e000      	b.n	80a028c <_Z21getDustSensorReadingsv+0x14>
  }
  else
  {
    last_lpo = lowpulseoccupancy;
 80a028a:	601a      	str	r2, [r3, #0]
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
 80a028c:	6820      	ldr	r0, [r4, #0]
 80a028e:	f004 f95b 	bl	80a4548 <__aeabi_ui2d>
 80a0292:	a337      	add	r3, pc, #220	; (adr r3, 80a0370 <_Z21getDustSensorReadingsv+0xf8>)
 80a0294:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0298:	f004 faf6 	bl	80a4888 <__aeabi_ddiv>
 80a029c:	f004 fc7a 	bl	80a4b94 <__aeabi_d2f>
 80a02a0:	4d3d      	ldr	r5, [pc, #244]	; (80a0398 <_Z21getDustSensorReadingsv+0x120>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
 80a02a2:	4e3e      	ldr	r6, [pc, #248]	; (80a039c <_Z21getDustSensorReadingsv+0x124>)
  else
  {
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
 80a02a4:	6028      	str	r0, [r5, #0]
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
 80a02a6:	f004 f971 	bl	80a458c <__aeabi_f2d>
 80a02aa:	2200      	movs	r2, #0
 80a02ac:	4b3c      	ldr	r3, [pc, #240]	; (80a03a0 <_Z21getDustSensorReadingsv+0x128>)
 80a02ae:	f002 ff2d 	bl	80a310c <pow>
 80a02b2:	682f      	ldr	r7, [r5, #0]
 80a02b4:	4680      	mov	r8, r0
 80a02b6:	4638      	mov	r0, r7
 80a02b8:	4689      	mov	r9, r1
 80a02ba:	f004 f967 	bl	80a458c <__aeabi_f2d>
 80a02be:	a32e      	add	r3, pc, #184	; (adr r3, 80a0378 <_Z21getDustSensorReadingsv+0x100>)
 80a02c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02c4:	4682      	mov	sl, r0
 80a02c6:	468b      	mov	fp, r1
 80a02c8:	4640      	mov	r0, r8
 80a02ca:	4649      	mov	r1, r9
 80a02cc:	f004 f9b2 	bl	80a4634 <__aeabi_dmul>
 80a02d0:	4652      	mov	r2, sl
 80a02d2:	4680      	mov	r8, r0
 80a02d4:	4689      	mov	r9, r1
 80a02d6:	465b      	mov	r3, fp
 80a02d8:	4650      	mov	r0, sl
 80a02da:	4659      	mov	r1, fp
 80a02dc:	f004 f9aa 	bl	80a4634 <__aeabi_dmul>
 80a02e0:	a327      	add	r3, pc, #156	; (adr r3, 80a0380 <_Z21getDustSensorReadingsv+0x108>)
 80a02e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a02e6:	f004 f9a5 	bl	80a4634 <__aeabi_dmul>
 80a02ea:	4602      	mov	r2, r0
 80a02ec:	460b      	mov	r3, r1
 80a02ee:	4640      	mov	r0, r8
 80a02f0:	4649      	mov	r1, r9
 80a02f2:	f003 ffeb 	bl	80a42cc <__aeabi_dsub>
 80a02f6:	4680      	mov	r8, r0
 80a02f8:	4689      	mov	r9, r1
 80a02fa:	4638      	mov	r0, r7
 80a02fc:	4929      	ldr	r1, [pc, #164]	; (80a03a4 <_Z21getDustSensorReadingsv+0x12c>)
 80a02fe:	f004 fda7 	bl	80a4e50 <__aeabi_fmul>
 80a0302:	f004 f943 	bl	80a458c <__aeabi_f2d>
 80a0306:	4602      	mov	r2, r0
 80a0308:	460b      	mov	r3, r1
 80a030a:	4640      	mov	r0, r8
 80a030c:	4649      	mov	r1, r9
 80a030e:	f003 ffdf 	bl	80a42d0 <__adddf3>
 80a0312:	a31d      	add	r3, pc, #116	; (adr r3, 80a0388 <_Z21getDustSensorReadingsv+0x110>)
 80a0314:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0318:	f003 ffda 	bl	80a42d0 <__adddf3>
 80a031c:	f004 fc3a 	bl	80a4b94 <__aeabi_d2f>
 80a0320:	6030      	str	r0, [r6, #0]

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
 80a0322:	f002 fa5b 	bl	80a27dc <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a0326:	6823      	ldr	r3, [r4, #0]
 80a0328:	4a1f      	ldr	r2, [pc, #124]	; (80a03a8 <_Z21getDustSensorReadingsv+0x130>)
 80a032a:	2101      	movs	r1, #1
 80a032c:	f001 fd83 	bl	80a1e36 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
 80a0330:	f002 fa54 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a0334:	4604      	mov	r4, r0
 80a0336:	6828      	ldr	r0, [r5, #0]
 80a0338:	f004 f928 	bl	80a458c <__aeabi_f2d>
 80a033c:	4a1b      	ldr	r2, [pc, #108]	; (80a03ac <_Z21getDustSensorReadingsv+0x134>)
 80a033e:	e9cd 0100 	strd	r0, r1, [sp]
 80a0342:	2101      	movs	r1, #1
 80a0344:	4620      	mov	r0, r4
 80a0346:	f001 fd76 	bl	80a1e36 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
 80a034a:	f002 fa47 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a034e:	4604      	mov	r4, r0
 80a0350:	6830      	ldr	r0, [r6, #0]
 80a0352:	f004 f91b 	bl	80a458c <__aeabi_f2d>
 80a0356:	4a16      	ldr	r2, [pc, #88]	; (80a03b0 <_Z21getDustSensorReadingsv+0x138>)
 80a0358:	e9cd 0100 	strd	r0, r1, [sp]
 80a035c:	2101      	movs	r1, #1
 80a035e:	4620      	mov	r0, r4
 80a0360:	f001 fd69 	bl	80a1e36 <_ZN5Print11printf_implEbPKcz>
}
 80a0364:	b003      	add	sp, #12
 80a0366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a036a:	bf00      	nop
 80a036c:	f3af 8000 	nop.w
 80a0370:	00000000 	.word	0x00000000
 80a0374:	41124f80 	.word	0x41124f80
 80a0378:	9999999a 	.word	0x9999999a
 80a037c:	3ff19999 	.word	0x3ff19999
 80a0380:	66666666 	.word	0x66666666
 80a0384:	400e6666 	.word	0x400e6666
 80a0388:	3d70a3d7 	.word	0x3d70a3d7
 80a038c:	3fe3d70a 	.word	0x3fe3d70a
 80a0390:	20000074 	.word	0x20000074
 80a0394:	2000007c 	.word	0x2000007c
 80a0398:	20000084 	.word	0x20000084
 80a039c:	20000070 	.word	0x20000070
 80a03a0:	40080000 	.word	0x40080000
 80a03a4:	44020000 	.word	0x44020000
 80a03a8:	080a5766 	.word	0x080a5766
 80a03ac:	080a576e 	.word	0x080a576e
 80a03b0:	080a577a 	.word	0x080a577a

080a03b4 <_Z13updateDisplayiii6String>:

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}

void updateDisplay(int temp, int humidity, int pressure, String airQuality)
{
 80a03b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a03b6:	461f      	mov	r7, r3
 80a03b8:	4606      	mov	r6, r0
 80a03ba:	460d      	mov	r5, r1
 80a03bc:	4614      	mov	r4, r2
  SeeedOled.clearDisplay();
 80a03be:	482e      	ldr	r0, [pc, #184]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a03c0:	f001 f8ac 	bl	80a151c <_ZN9SeeedOLED12clearDisplayEv>

  SeeedOled.setTextXY(0, 3);
 80a03c4:	2203      	movs	r2, #3
 80a03c6:	2100      	movs	r1, #0
 80a03c8:	482b      	ldr	r0, [pc, #172]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a03ca:	f001 f85d 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString(airQuality);
 80a03ce:	6839      	ldr	r1, [r7, #0]
 80a03d0:	4829      	ldr	r0, [pc, #164]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a03d2:	f001 f8c5 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(2, 0);
 80a03d6:	2200      	movs	r2, #0
 80a03d8:	2102      	movs	r1, #2
 80a03da:	4827      	ldr	r0, [pc, #156]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a03dc:	f001 f854 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Temp: ");
 80a03e0:	4926      	ldr	r1, [pc, #152]	; (80a047c <_Z13updateDisplayiii6String+0xc8>)
 80a03e2:	4825      	ldr	r0, [pc, #148]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a03e4:	f001 f8bc 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
 80a03e8:	4631      	mov	r1, r6
 80a03ea:	4823      	ldr	r0, [pc, #140]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a03ec:	f001 f8c5 	bl	80a157a <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("C");
 80a03f0:	4923      	ldr	r1, [pc, #140]	; (80a0480 <_Z13updateDisplayiii6String+0xcc>)
 80a03f2:	4821      	ldr	r0, [pc, #132]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a03f4:	f001 f8b4 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(3, 0);
 80a03f8:	2200      	movs	r2, #0
 80a03fa:	2103      	movs	r1, #3
 80a03fc:	481e      	ldr	r0, [pc, #120]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a03fe:	f001 f843 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Humidity: ");
 80a0402:	4920      	ldr	r1, [pc, #128]	; (80a0484 <_Z13updateDisplayiii6String+0xd0>)
 80a0404:	481c      	ldr	r0, [pc, #112]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a0406:	f001 f8ab 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
 80a040a:	4629      	mov	r1, r5
 80a040c:	481a      	ldr	r0, [pc, #104]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a040e:	f001 f8b4 	bl	80a157a <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
 80a0412:	491d      	ldr	r1, [pc, #116]	; (80a0488 <_Z13updateDisplayiii6String+0xd4>)
 80a0414:	4818      	ldr	r0, [pc, #96]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a0416:	f001 f8a3 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(4, 0);
 80a041a:	2200      	movs	r2, #0
 80a041c:	2104      	movs	r1, #4
 80a041e:	4816      	ldr	r0, [pc, #88]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a0420:	f001 f832 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Press: ");
 80a0424:	4919      	ldr	r1, [pc, #100]	; (80a048c <_Z13updateDisplayiii6String+0xd8>)
 80a0426:	4814      	ldr	r0, [pc, #80]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a0428:	f001 f89a 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(pressure);
 80a042c:	4621      	mov	r1, r4
 80a042e:	4812      	ldr	r0, [pc, #72]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
  SeeedOled.putString(" hPa");

  if (concentration > 1)
 80a0430:	4c17      	ldr	r4, [pc, #92]	; (80a0490 <_Z13updateDisplayiii6String+0xdc>)
  SeeedOled.putNumber(humidity);
  SeeedOled.putString("%");

  SeeedOled.setTextXY(4, 0);
  SeeedOled.putString("Press: ");
  SeeedOled.putNumber(pressure);
 80a0432:	f001 f8a2 	bl	80a157a <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString(" hPa");
 80a0436:	4917      	ldr	r1, [pc, #92]	; (80a0494 <_Z13updateDisplayiii6String+0xe0>)
 80a0438:	480f      	ldr	r0, [pc, #60]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a043a:	f001 f891 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>

  if (concentration > 1)
 80a043e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0442:	6820      	ldr	r0, [r4, #0]
 80a0444:	f004 fec0 	bl	80a51c8 <__aeabi_fcmpgt>
 80a0448:	b1a8      	cbz	r0, 80a0476 <_Z13updateDisplayiii6String+0xc2>
  {
    SeeedOled.setTextXY(5, 0);
 80a044a:	2200      	movs	r2, #0
 80a044c:	2105      	movs	r1, #5
 80a044e:	480a      	ldr	r0, [pc, #40]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a0450:	f001 f81a 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("Dust: ");
 80a0454:	4910      	ldr	r1, [pc, #64]	; (80a0498 <_Z13updateDisplayiii6String+0xe4>)
 80a0456:	4808      	ldr	r0, [pc, #32]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a0458:	f001 f882 	bl	80a1560 <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
 80a045c:	6820      	ldr	r0, [r4, #0]
 80a045e:	f004 febd 	bl	80a51dc <__aeabi_f2iz>
 80a0462:	4601      	mov	r1, r0
 80a0464:	4804      	ldr	r0, [pc, #16]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a0466:	f001 f888 	bl	80a157a <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString(" pcs/L");
  }
 80a046a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (concentration > 1)
  {
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
 80a046e:	490b      	ldr	r1, [pc, #44]	; (80a049c <_Z13updateDisplayiii6String+0xe8>)
 80a0470:	4801      	ldr	r0, [pc, #4]	; (80a0478 <_Z13updateDisplayiii6String+0xc4>)
 80a0472:	f001 b875 	b.w	80a1560 <_ZN9SeeedOLED9putStringEPKc>
 80a0476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0478:	200000fc 	.word	0x200000fc
 80a047c:	080a5792 	.word	0x080a5792
 80a0480:	080a5799 	.word	0x080a5799
 80a0484:	080a579b 	.word	0x080a579b
 80a0488:	080a5778 	.word	0x080a5778
 80a048c:	080a57a6 	.word	0x080a57a6
 80a0490:	20000070 	.word	0x20000070
 80a0494:	080a57ae 	.word	0x080a57ae
 80a0498:	080a57b3 	.word	0x080a57b3
 80a049c:	080a578b 	.word	0x080a578b

080a04a0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a04a0:	b570      	push	{r4, r5, r6, lr}
 80a04a2:	4604      	mov	r4, r0
 80a04a4:	460e      	mov	r6, r1
 80a04a6:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a04a8:	f000 ff08 	bl	80a12bc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a04ac:	2201      	movs	r2, #1
 80a04ae:	4631      	mov	r1, r6
 80a04b0:	4620      	mov	r0, r4
 80a04b2:	f000 fe77 	bl	80a11a4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a04b6:	4620      	mov	r0, r4
 80a04b8:	213a      	movs	r1, #58	; 0x3a
 80a04ba:	f000 fe27 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
 80a04be:	462a      	mov	r2, r5
 80a04c0:	4620      	mov	r0, r4
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
 80a04c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
 80a04c6:	4901      	ldr	r1, [pc, #4]	; (80a04cc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
 80a04c8:	f000 be5f 	b.w	80a118a <_ZN10JsonWriter13insertsprintfEPKcz>
 80a04cc:	080a576b 	.word	0x080a576b

080a04d0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a04d0:	b570      	push	{r4, r5, r6, lr}
 80a04d2:	4604      	mov	r4, r0
 80a04d4:	460e      	mov	r6, r1
 80a04d6:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a04d8:	f000 fef0 	bl	80a12bc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a04dc:	4631      	mov	r1, r6
 80a04de:	4620      	mov	r0, r4
 80a04e0:	2201      	movs	r2, #1
 80a04e2:	f000 fe5f 	bl	80a11a4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a04e6:	4620      	mov	r0, r4
 80a04e8:	213a      	movs	r1, #58	; 0x3a
 80a04ea:	f000 fe0f 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
 80a04ee:	4629      	mov	r1, r5
 80a04f0:	4620      	mov	r0, r4
	}
 80a04f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
 80a04f6:	f000 bf05 	b.w	80a1304 <_ZN10JsonWriter11insertValueEf>
	...

080a04fc <_Z18createEventPayloadiii6String>:
  Serial.printlnf("Ratio: %f%%", ratio);
  Serial.printlnf("Concentration: %f pcs/L", concentration);
}

void createEventPayload(int temp, int humidity, int pressure, String airQuality)
{
 80a04fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a04fe:	4607      	mov	r7, r0
 80a0500:	460e      	mov	r6, r1
 80a0502:	4615      	mov	r5, r2
 80a0504:	461c      	mov	r4, r3
 80a0506:	b0d5      	sub	sp, #340	; 0x154
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a0508:	f44f 7280 	mov.w	r2, #256	; 0x100
 80a050c:	a914      	add	r1, sp, #80	; 0x50
 80a050e:	a808      	add	r0, sp, #32
 80a0510:	f000 fdea 	bl	80a10e8 <_ZN10JsonWriterC1EPcj>
 80a0514:	4b39      	ldr	r3, [pc, #228]	; (80a05fc <_Z18createEventPayloadiii6String+0x100>)
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a0516:	227d      	movs	r2, #125	; 0x7d
 80a0518:	217b      	movs	r1, #123	; 0x7b
 80a051a:	a808      	add	r0, sp, #32
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a051c:	9308      	str	r3, [sp, #32]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a051e:	f000 fed8 	bl	80a12d2 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp", temp);
 80a0522:	463a      	mov	r2, r7
 80a0524:	4936      	ldr	r1, [pc, #216]	; (80a0600 <_Z18createEventPayloadiii6String+0x104>)
 80a0526:	a808      	add	r0, sp, #32
 80a0528:	f7ff ffba 	bl	80a04a0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
 80a052c:	4632      	mov	r2, r6
 80a052e:	4935      	ldr	r1, [pc, #212]	; (80a0604 <_Z18createEventPayloadiii6String+0x108>)
 80a0530:	a808      	add	r0, sp, #32
 80a0532:	f7ff ffb5 	bl	80a04a0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("pressure", pressure);
 80a0536:	462a      	mov	r2, r5
 80a0538:	4933      	ldr	r1, [pc, #204]	; (80a0608 <_Z18createEventPayloadiii6String+0x10c>)
 80a053a:	a808      	add	r0, sp, #32
 80a053c:	f7ff ffb0 	bl	80a04a0 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("air-quality", airQuality);
 80a0540:	4621      	mov	r1, r4
 80a0542:	a804      	add	r0, sp, #16
 80a0544:	f001 fbf9 	bl	80a1d3a <_ZN6StringC1ERKS_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
 80a0548:	a808      	add	r0, sp, #32
 80a054a:	f000 feb7 	bl	80a12bc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a054e:	2201      	movs	r2, #1
 80a0550:	492e      	ldr	r1, [pc, #184]	; (80a060c <_Z18createEventPayloadiii6String+0x110>)
 80a0552:	a808      	add	r0, sp, #32
 80a0554:	f000 fe26 	bl	80a11a4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0558:	213a      	movs	r1, #58	; 0x3a
 80a055a:	a808      	add	r0, sp, #32
 80a055c:	f000 fdd6 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0560:	2201      	movs	r2, #1
 80a0562:	9904      	ldr	r1, [sp, #16]
 80a0564:	a808      	add	r0, sp, #32
 80a0566:	f000 fe1d 	bl	80a11a4 <_ZN10JsonWriter12insertStringEPKcb>
 80a056a:	a804      	add	r0, sp, #16
 80a056c:	f001 fb7c 	bl	80a1c68 <_ZN6StringD1Ev>

    if (lowpulseoccupancy > 0)
 80a0570:	4b27      	ldr	r3, [pc, #156]	; (80a0610 <_Z18createEventPayloadiii6String+0x114>)
 80a0572:	681c      	ldr	r4, [r3, #0]
 80a0574:	b1e4      	cbz	r4, 80a05b0 <_Z18createEventPayloadiii6String+0xb4>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
 80a0576:	a808      	add	r0, sp, #32
 80a0578:	f000 fea0 	bl	80a12bc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a057c:	2201      	movs	r2, #1
 80a057e:	4925      	ldr	r1, [pc, #148]	; (80a0614 <_Z18createEventPayloadiii6String+0x118>)
 80a0580:	a808      	add	r0, sp, #32
 80a0582:	f000 fe0f 	bl	80a11a4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0586:	213a      	movs	r1, #58	; 0x3a
 80a0588:	a808      	add	r0, sp, #32
 80a058a:	f000 fdbf 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an unsigned long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
 80a058e:	4622      	mov	r2, r4
 80a0590:	4921      	ldr	r1, [pc, #132]	; (80a0618 <_Z18createEventPayloadiii6String+0x11c>)
 80a0592:	a808      	add	r0, sp, #32
 80a0594:	f000 fdf9 	bl	80a118a <_ZN10JsonWriter13insertsprintfEPKcz>
    {
      jw.insertKeyValue("dust-lpo", lowpulseoccupancy);
      jw.insertKeyValue("dust-ratio", ratio);
 80a0598:	4b20      	ldr	r3, [pc, #128]	; (80a061c <_Z18createEventPayloadiii6String+0x120>)
 80a059a:	4921      	ldr	r1, [pc, #132]	; (80a0620 <_Z18createEventPayloadiii6String+0x124>)
 80a059c:	681a      	ldr	r2, [r3, #0]
 80a059e:	a808      	add	r0, sp, #32
 80a05a0:	f7ff ff96 	bl	80a04d0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
      jw.insertKeyValue("dust-concentration", concentration);
 80a05a4:	4b1f      	ldr	r3, [pc, #124]	; (80a0624 <_Z18createEventPayloadiii6String+0x128>)
 80a05a6:	4920      	ldr	r1, [pc, #128]	; (80a0628 <_Z18createEventPayloadiii6String+0x12c>)
 80a05a8:	681a      	ldr	r2, [r3, #0]
 80a05aa:	a808      	add	r0, sp, #32
 80a05ac:	f7ff ff90 	bl	80a04d0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a05b0:	a808      	add	r0, sp, #32
 80a05b2:	f000 fdb9 	bl	80a1128 <_ZN10JsonWriter19finishObjectOrArrayEv>
 80a05b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a05b8:	491c      	ldr	r1, [pc, #112]	; (80a062c <_Z18createEventPayloadiii6String+0x130>)
 80a05ba:	9303      	str	r3, [sp, #12]
 80a05bc:	4b1c      	ldr	r3, [pc, #112]	; (80a0630 <_Z18createEventPayloadiii6String+0x134>)
 80a05be:	9a03      	ldr	r2, [sp, #12]
 80a05c0:	781b      	ldrb	r3, [r3, #0]
 80a05c2:	a804      	add	r0, sp, #16
 80a05c4:	f88d 3000 	strb.w	r3, [sp]
 80a05c8:	233c      	movs	r3, #60	; 0x3c
 80a05ca:	f001 feb1 	bl	80a2330 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a05ce:	9c05      	ldr	r4, [sp, #20]
 80a05d0:	b17c      	cbz	r4, 80a05f2 <_Z18createEventPayloadiii6String+0xf6>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a05d2:	6863      	ldr	r3, [r4, #4]
 80a05d4:	3b01      	subs	r3, #1
 80a05d6:	6063      	str	r3, [r4, #4]
 80a05d8:	b95b      	cbnz	r3, 80a05f2 <_Z18createEventPayloadiii6String+0xf6>
        {
          _M_dispose();
 80a05da:	6823      	ldr	r3, [r4, #0]
 80a05dc:	4620      	mov	r0, r4
 80a05de:	689b      	ldr	r3, [r3, #8]
 80a05e0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a05e2:	68a3      	ldr	r3, [r4, #8]
 80a05e4:	3b01      	subs	r3, #1
 80a05e6:	60a3      	str	r3, [r4, #8]
 80a05e8:	b91b      	cbnz	r3, 80a05f2 <_Z18createEventPayloadiii6String+0xf6>
            _M_destroy();
 80a05ea:	6823      	ldr	r3, [r4, #0]
 80a05ec:	4620      	mov	r0, r4
 80a05ee:	68db      	ldr	r3, [r3, #12]
 80a05f0:	4798      	blx	r3
  Serial.printlnf("Concentration: %f pcs/L", concentration);
}

void createEventPayload(int temp, int humidity, int pressure, String airQuality)
{
  JsonWriterStatic<256> jw;
 80a05f2:	a808      	add	r0, sp, #32
 80a05f4:	f7ff fd60 	bl	80a00b8 <_ZN16JsonWriterStaticILj256EED1Ev>
      jw.insertKeyValue("dust-concentration", concentration);
    }
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}
 80a05f8:	b055      	add	sp, #340	; 0x154
 80a05fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a05fc:	080a56b0 	.word	0x080a56b0
 80a0600:	080a57ba 	.word	0x080a57ba
 80a0604:	080a57bf 	.word	0x080a57bf
 80a0608:	080a57c8 	.word	0x080a57c8
 80a060c:	080a57d1 	.word	0x080a57d1
 80a0610:	20000074 	.word	0x20000074
 80a0614:	080a57dd 	.word	0x080a57dd
 80a0618:	080a57e6 	.word	0x080a57e6
 80a061c:	20000084 	.word	0x20000084
 80a0620:	080a57ea 	.word	0x080a57ea
 80a0624:	20000070 	.word	0x20000070
 80a0628:	080a57f5 	.word	0x080a57f5
 80a062c:	080a5808 	.word	0x080a5808
 80a0630:	20000080 	.word	0x20000080

080a0634 <loop>:

  lastInterval = millis();
}

void loop()
{
 80a0634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
 80a0638:	2100      	movs	r1, #0

  lastInterval = millis();
}

void loop()
{
 80a063a:	b08c      	sub	sp, #48	; 0x30
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
 80a063c:	2004      	movs	r0, #4
 80a063e:	f002 fb9f 	bl	80a2d80 <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
 80a0642:	4c31      	ldr	r4, [pc, #196]	; (80a0708 <loop+0xd4>)

void loop()
{
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
 80a0644:	4b31      	ldr	r3, [pc, #196]	; (80a070c <loop+0xd8>)
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
 80a0646:	4d32      	ldr	r5, [pc, #200]	; (80a0710 <loop+0xdc>)

void loop()
{
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
 80a0648:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
 80a064a:	6823      	ldr	r3, [r4, #0]
 80a064c:	4418      	add	r0, r3
 80a064e:	6020      	str	r0, [r4, #0]
 80a0650:	f001 f848 	bl	80a16e4 <HAL_Timer_Get_Milli_Seconds>

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
 80a0654:	682b      	ldr	r3, [r5, #0]
 80a0656:	1ac0      	subs	r0, r0, r3
 80a0658:	f247 5330 	movw	r3, #30000	; 0x7530
 80a065c:	4298      	cmp	r0, r3
 80a065e:	d94f      	bls.n	80a0700 <loop+0xcc>
  {
    String quality = getAirQuality();
 80a0660:	a804      	add	r0, sp, #16
 80a0662:	f7ff fdad 	bl	80a01c0 <_Z13getAirQualityv>
    Serial.printlnf("Air Quality: %s", quality.c_str());
 80a0666:	f002 f8b9 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a066a:	9b04      	ldr	r3, [sp, #16]
 80a066c:	4a29      	ldr	r2, [pc, #164]	; (80a0714 <loop+0xe0>)
 80a066e:	2101      	movs	r1, #1
 80a0670:	f001 fbe1 	bl	80a1e36 <_ZN5Print11printf_implEbPKcz>

    getBMEValues(temp, pressure, humidity);
 80a0674:	aa03      	add	r2, sp, #12
 80a0676:	a902      	add	r1, sp, #8
 80a0678:	a801      	add	r0, sp, #4
 80a067a:	f7ff fddb 	bl	80a0234 <_Z12getBMEValuesRiS_S_>
    Serial.printlnf("Temp: %d", temp);
 80a067e:	f002 f8ad 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a0682:	9b01      	ldr	r3, [sp, #4]
 80a0684:	4a24      	ldr	r2, [pc, #144]	; (80a0718 <loop+0xe4>)
 80a0686:	2101      	movs	r1, #1
 80a0688:	f001 fbd5 	bl	80a1e36 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Pressure: %d", pressure);
 80a068c:	f002 f8a6 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a0690:	9b02      	ldr	r3, [sp, #8]
 80a0692:	4a22      	ldr	r2, [pc, #136]	; (80a071c <loop+0xe8>)
 80a0694:	2101      	movs	r1, #1
 80a0696:	f001 fbce 	bl	80a1e36 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Humidity: %d", humidity);
 80a069a:	f002 f89f 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a069e:	9b03      	ldr	r3, [sp, #12]
 80a06a0:	4a1f      	ldr	r2, [pc, #124]	; (80a0720 <loop+0xec>)
 80a06a2:	2101      	movs	r1, #1
 80a06a4:	f001 fbc7 	bl	80a1e36 <_ZN5Print11printf_implEbPKcz>

    getDustSensorReadings();
 80a06a8:	f7ff fde6 	bl	80a0278 <_Z21getDustSensorReadingsv>

    updateDisplay(temp, humidity, pressure, quality);
 80a06ac:	9e01      	ldr	r6, [sp, #4]
 80a06ae:	9f03      	ldr	r7, [sp, #12]
 80a06b0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80a06b4:	a904      	add	r1, sp, #16
 80a06b6:	a808      	add	r0, sp, #32
 80a06b8:	f001 fb3f 	bl	80a1d3a <_ZN6StringC1ERKS_>
 80a06bc:	4642      	mov	r2, r8
 80a06be:	ab08      	add	r3, sp, #32
 80a06c0:	4639      	mov	r1, r7
 80a06c2:	4630      	mov	r0, r6
 80a06c4:	f7ff fe76 	bl	80a03b4 <_Z13updateDisplayiii6String>
 80a06c8:	a808      	add	r0, sp, #32
 80a06ca:	f001 facd 	bl	80a1c68 <_ZN6StringD1Ev>

    createEventPayload(temp, humidity, pressure, quality);
 80a06ce:	9e01      	ldr	r6, [sp, #4]
 80a06d0:	9f03      	ldr	r7, [sp, #12]
 80a06d2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80a06d6:	a904      	add	r1, sp, #16
 80a06d8:	a808      	add	r0, sp, #32
 80a06da:	f001 fb2e 	bl	80a1d3a <_ZN6StringC1ERKS_>
 80a06de:	ab08      	add	r3, sp, #32
 80a06e0:	4642      	mov	r2, r8
 80a06e2:	4639      	mov	r1, r7
 80a06e4:	4630      	mov	r0, r6
 80a06e6:	f7ff ff09 	bl	80a04fc <_Z18createEventPayloadiii6String>
 80a06ea:	a808      	add	r0, sp, #32
 80a06ec:	f001 fabc 	bl	80a1c68 <_ZN6StringD1Ev>

    lowpulseoccupancy = 0;
 80a06f0:	2300      	movs	r3, #0
 80a06f2:	6023      	str	r3, [r4, #0]
 80a06f4:	f000 fff6 	bl	80a16e4 <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
 80a06f8:	6028      	str	r0, [r5, #0]
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
  {
    String quality = getAirQuality();
 80a06fa:	a804      	add	r0, sp, #16
 80a06fc:	f001 fab4 	bl	80a1c68 <_ZN6StringD1Ev>
    createEventPayload(temp, humidity, pressure, quality);

    lowpulseoccupancy = 0;
    lastInterval = millis();
  }
}
 80a0700:	b00c      	add	sp, #48	; 0x30
 80a0702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0706:	bf00      	nop
 80a0708:	20000074 	.word	0x20000074
 80a070c:	20000078 	.word	0x20000078
 80a0710:	200000e8 	.word	0x200000e8
 80a0714:	080a5811 	.word	0x080a5811
 80a0718:	080a5821 	.word	0x080a5821
 80a071c:	080a582a 	.word	0x080a582a
 80a0720:	080a5837 	.word	0x080a5837

080a0724 <_GLOBAL__sub_I_aqSensor>:
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
  }
 80a0724:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0726:	4b09      	ldr	r3, [pc, #36]	; (80a074c <_GLOBAL__sub_I_aqSensor+0x28>)
 80a0728:	2401      	movs	r4, #1
 80a072a:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a072c:	f000 ff62 	bl	80a15f4 <HAL_Pin_Map>
#include "Grove_Air_Quality_Sensor.h"
#include "Adafruit_BME280.h"
#include "SeeedOLED.h"
#include "JsonParserGeneratorRK.h"

SYSTEM_THREAD(ENABLED);
 80a0730:	4620      	mov	r0, r4
 80a0732:	2100      	movs	r1, #0
 80a0734:	f001 f8ea 	bl	80a190c <system_thread_set_state>

#define AQS_PIN A2
#define DUST_SENSOR_PIN D4 
#define SENSOR_READING_INTERVAL 30000

AirQualitySensor aqSensor(AQS_PIN);
 80a0738:	210c      	movs	r1, #12
 80a073a:	4805      	ldr	r0, [pc, #20]	; (80a0750 <_GLOBAL__sub_I_aqSensor+0x2c>)
 80a073c:	f000 fe04 	bl	80a1348 <_ZN16AirQualitySensorC1Ei>
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
  }
 80a0740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define AQS_PIN A2
#define DUST_SENSOR_PIN D4 
#define SENSOR_READING_INTERVAL 30000

AirQualitySensor aqSensor(AQS_PIN);
Adafruit_BME280 bme;
 80a0744:	4803      	ldr	r0, [pc, #12]	; (80a0754 <_GLOBAL__sub_I_aqSensor+0x30>)
 80a0746:	f000 b83b 	b.w	80a07c0 <_ZN15Adafruit_BME280C1Ev>
 80a074a:	bf00      	nop
 80a074c:	20000080 	.word	0x20000080
 80a0750:	200000cc 	.word	0x200000cc
 80a0754:	20000088 	.word	0x20000088

080a0758 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a0758:	b510      	push	{r4, lr}
 80a075a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a075c:	6880      	ldr	r0, [r0, #8]
 80a075e:	b108      	cbz	r0, 80a0764 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0760:	f000 ffd0 	bl	80a1704 <os_mutex_recursive_destroy>
 80a0764:	4620      	mov	r0, r4
 80a0766:	bd10      	pop	{r4, pc}

080a0768 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a0768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a076a:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a076c:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a076e:	4608      	mov	r0, r1
 80a0770:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a0772:	b133      	cbz	r3, 80a0782 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a0774:	b93d      	cbnz	r5, 80a0786 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a0776:	490c      	ldr	r1, [pc, #48]	; (80a07a8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a0778:	b004      	add	sp, #16
 80a077a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a077e:	f001 bb1e 	b.w	80a1dbe <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a0782:	4b0a      	ldr	r3, [pc, #40]	; (80a07ac <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a0784:	e000      	b.n	80a0788 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a0786:	4b0a      	ldr	r3, [pc, #40]	; (80a07b0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a0788:	7b16      	ldrb	r6, [r2, #12]
 80a078a:	4c0a      	ldr	r4, [pc, #40]	; (80a07b4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a078c:	490a      	ldr	r1, [pc, #40]	; (80a07b8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a078e:	7b52      	ldrb	r2, [r2, #13]
 80a0790:	2e01      	cmp	r6, #1
 80a0792:	bf08      	it	eq
 80a0794:	4621      	moveq	r1, r4
 80a0796:	9202      	str	r2, [sp, #8]
 80a0798:	9101      	str	r1, [sp, #4]
 80a079a:	9500      	str	r5, [sp, #0]
 80a079c:	4a07      	ldr	r2, [pc, #28]	; (80a07bc <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a079e:	2100      	movs	r1, #0
 80a07a0:	f001 fb49 	bl	80a1e36 <_ZN5Print11printf_implEbPKcz>
  }
 80a07a4:	b004      	add	sp, #16
 80a07a6:	bd70      	pop	{r4, r5, r6, pc}
 80a07a8:	080a5861 	.word	0x080a5861
 80a07ac:	080a5ca3 	.word	0x080a5ca3
 80a07b0:	080a5850 	.word	0x080a5850
 80a07b4:	080a5859 	.word	0x080a5859
 80a07b8:	080a585d 	.word	0x080a585d
 80a07bc:	080a5877 	.word	0x080a5877

080a07c0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
 80a07c0:	22ff      	movs	r2, #255	; 0xff
 80a07c2:	7402      	strb	r2, [r0, #16]
 80a07c4:	7442      	strb	r2, [r0, #17]
 80a07c6:	7482      	strb	r2, [r0, #18]
 80a07c8:	74c2      	strb	r2, [r0, #19]
{ }
 80a07ca:	4770      	bx	lr

080a07cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a07cc:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a07ce:	4d0b      	ldr	r5, [pc, #44]	; (80a07fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a07d0:	6829      	ldr	r1, [r5, #0]
 80a07d2:	f011 0401 	ands.w	r4, r1, #1
 80a07d6:	d10f      	bne.n	80a07f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a07d8:	4628      	mov	r0, r5
 80a07da:	f7ff fc64 	bl	80a00a6 <__cxa_guard_acquire>
 80a07de:	b158      	cbz	r0, 80a07f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a07e0:	4621      	mov	r1, r4
 80a07e2:	4807      	ldr	r0, [pc, #28]	; (80a0800 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a07e4:	f001 f964 	bl	80a1ab0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a07e8:	4628      	mov	r0, r5
 80a07ea:	f7ff fc61 	bl	80a00b0 <__cxa_guard_release>
 80a07ee:	4a05      	ldr	r2, [pc, #20]	; (80a0804 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a07f0:	4905      	ldr	r1, [pc, #20]	; (80a0808 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a07f2:	4803      	ldr	r0, [pc, #12]	; (80a0800 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a07f4:	f002 fb1e 	bl	80a2e34 <__aeabi_atexit>
        return instance;
    }
 80a07f8:	4801      	ldr	r0, [pc, #4]	; (80a0800 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a07fa:	bd38      	pop	{r3, r4, r5, pc}
 80a07fc:	200000ec 	.word	0x200000ec
 80a0800:	200000f0 	.word	0x200000f0
 80a0804:	2000006c 	.word	0x2000006c
 80a0808:	080a0759 	.word	0x080a0759

080a080c <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
 80a0810:	f990 3013 	ldrsb.w	r3, [r0, #19]
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a0814:	4605      	mov	r5, r0
    // hardware SPI
    if (_sck == -1)
 80a0816:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a0818:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
 80a081a:	d106      	bne.n	80a082a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a081c:	f7ff ffd6 	bl	80a07cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0820:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 80a0822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a0826:	f001 b9ec 	b.w	80a1c02 <_ZN8SPIClass8transferEh>
 80a082a:	2607      	movs	r6, #7
 80a082c:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
 80a082e:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
 80a0832:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a0836:	2100      	movs	r1, #0
 80a0838:	b280      	uxth	r0, r0
 80a083a:	f002 fa5e 	bl	80a2cfa <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
 80a083e:	f995 0011 	ldrsb.w	r0, [r5, #17]
 80a0842:	fa08 f106 	lsl.w	r1, r8, r6
 80a0846:	4039      	ands	r1, r7
 80a0848:	b280      	uxth	r0, r0
 80a084a:	f002 fa56 	bl	80a2cfa <digitalWrite>
        digitalWrite(_sck, HIGH);
 80a084e:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a0852:	2101      	movs	r1, #1
 80a0854:	b280      	uxth	r0, r0
 80a0856:	f002 fa50 	bl	80a2cfa <digitalWrite>
        if (digitalRead(_miso))
 80a085a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
 80a085e:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
 80a0860:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
 80a0862:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
 80a0864:	f002 fa62 	bl	80a2d2c <digitalRead>
 80a0868:	b108      	cbz	r0, 80a086e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
 80a086a:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
 80a086e:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a0872:	d2de      	bcs.n	80a0832 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 80a0874:	4620      	mov	r0, r4
 80a0876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a087a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
 80a087a:	b508      	push	{r3, lr}
        instance().endTransaction();
 80a087c:	f7ff ffa6 	bl	80a07cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
 80a0880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
 80a0884:	f001 b933 	b.w	80a1aee <_ZN8SPIClass14endTransactionEv>

080a0888 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
 80a0888:	b510      	push	{r4, lr}
 80a088a:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
 80a088c:	f7ff ff9e 	bl	80a07cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0890:	4621      	mov	r1, r4
    }
 80a0892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
 80a0896:	f001 b945 	b.w	80a1b24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

080a089c <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a089c:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
 80a089e:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a08a2:	b085      	sub	sp, #20
    uint32_t value;

    if (_cs == -1) {
 80a08a4:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a08a6:	4604      	mov	r4, r0
 80a08a8:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
 80a08aa:	d121      	bne.n	80a08f0 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a08ac:	7901      	ldrb	r1, [r0, #4]
 80a08ae:	6800      	ldr	r0, [r0, #0]
 80a08b0:	f002 f901 	bl	80a2ab6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a08b4:	6820      	ldr	r0, [r4, #0]
 80a08b6:	4629      	mov	r1, r5
 80a08b8:	6803      	ldr	r3, [r0, #0]
 80a08ba:	689b      	ldr	r3, [r3, #8]
 80a08bc:	4798      	blx	r3
        _wire -> endTransmission();
 80a08be:	6820      	ldr	r0, [r4, #0]
 80a08c0:	f002 f904 	bl	80a2acc <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
 80a08c4:	2203      	movs	r2, #3
 80a08c6:	7921      	ldrb	r1, [r4, #4]
 80a08c8:	6820      	ldr	r0, [r4, #0]
 80a08ca:	f002 f8f1 	bl	80a2ab0 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
 80a08ce:	6820      	ldr	r0, [r4, #0]
 80a08d0:	6803      	ldr	r3, [r0, #0]
 80a08d2:	695b      	ldr	r3, [r3, #20]
 80a08d4:	4798      	blx	r3
        value <<= 8;
 80a08d6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a08d8:	6820      	ldr	r0, [r4, #0]
 80a08da:	6803      	ldr	r3, [r0, #0]
 80a08dc:	695b      	ldr	r3, [r3, #20]
 80a08de:	4798      	blx	r3
 80a08e0:	4328      	orrs	r0, r5
        value <<= 8;
 80a08e2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a08e4:	6820      	ldr	r0, [r4, #0]
 80a08e6:	6803      	ldr	r3, [r0, #0]
 80a08e8:	695b      	ldr	r3, [r3, #20]
 80a08ea:	4798      	blx	r3
 80a08ec:	4305      	orrs	r5, r0
 80a08ee:	e039      	b.n	80a0964 <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
 80a08f0:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a08f4:	3301      	adds	r3, #1
 80a08f6:	d10e      	bne.n	80a0916 <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 80a08f8:	4b1c      	ldr	r3, [pc, #112]	; (80a096c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
 80a08fa:	4a1d      	ldr	r2, [pc, #116]	; (80a0970 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 80a08fc:	9300      	str	r3, [sp, #0]
 80a08fe:	9202      	str	r2, [sp, #8]
 80a0900:	2300      	movs	r3, #0
 80a0902:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0904:	4668      	mov	r0, sp
 80a0906:	f88d 3004 	strb.w	r3, [sp, #4]
 80a090a:	f88d 200c 	strb.w	r2, [sp, #12]
 80a090e:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0912:	f7ff ffb9 	bl	80a0888 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
 80a0916:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a091a:	2100      	movs	r1, #0
 80a091c:	b280      	uxth	r0, r0
 80a091e:	f002 f9ec 	bl	80a2cfa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0922:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0926:	4620      	mov	r0, r4
 80a0928:	f7ff ff70 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
 80a092c:	2100      	movs	r1, #0
 80a092e:	4620      	mov	r0, r4
 80a0930:	f7ff ff6c 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
 80a0934:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
 80a0936:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a0938:	4620      	mov	r0, r4
 80a093a:	f7ff ff67 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
 80a093e:	4328      	orrs	r0, r5
        value <<= 8;
 80a0940:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a0942:	2100      	movs	r1, #0
 80a0944:	4620      	mov	r0, r4
 80a0946:	f7ff ff61 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
 80a094a:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
 80a094c:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0950:	2101      	movs	r1, #1
 80a0952:	b280      	uxth	r0, r0
 80a0954:	f002 f9d1 	bl	80a2cfa <digitalWrite>
        if (_sck == -1)
 80a0958:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a095c:	3301      	adds	r3, #1
 80a095e:	d101      	bne.n	80a0964 <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
 80a0960:	f7ff ff8b 	bl	80a087a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
 80a0964:	4628      	mov	r0, r5
 80a0966:	b005      	add	sp, #20
 80a0968:	bd30      	pop	{r4, r5, pc}
 80a096a:	bf00      	nop
 80a096c:	080a584c 	.word	0x080a584c
 80a0970:	0007a120 	.word	0x0007a120

080a0974 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 80a0974:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a0976:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 80a0978:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a097a:	f7ff ff8f 	bl	80a089c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
 80a097e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a0982:	d01b      	beq.n	80a09bc <_ZN15Adafruit_BME28015readTemperatureEv+0x48>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80a0984:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 80a0986:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
 80a098a:	435b      	muls	r3, r3
 80a098c:	0052      	lsls	r2, r2, #1
 80a098e:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
 80a0992:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80a0996:	131b      	asrs	r3, r3, #12
 80a0998:	4350      	muls	r0, r2
 80a099a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80a099e:	4353      	muls	r3, r2
 80a09a0:	139b      	asrs	r3, r3, #14
 80a09a2:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 80a09a6:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
 80a09a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a09ac:	3080      	adds	r0, #128	; 0x80
 80a09ae:	1200      	asrs	r0, r0, #8
 80a09b0:	f004 f9fa 	bl	80a4da8 <__aeabi_i2f>
 80a09b4:	4902      	ldr	r1, [pc, #8]	; (80a09c0 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>)
 80a09b6:	f004 faff 	bl	80a4fb8 <__aeabi_fdiv>
 80a09ba:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
 80a09bc:	4801      	ldr	r0, [pc, #4]	; (80a09c4 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>)

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
 80a09be:	bd10      	pop	{r4, pc}
 80a09c0:	42c80000 	.word	0x42c80000
 80a09c4:	7fc00000 	.word	0x7fc00000

080a09c8 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
 80a09c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09cc:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
 80a09ce:	f7ff ffd1 	bl	80a0974 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a09d2:	21f7      	movs	r1, #247	; 0xf7
 80a09d4:	4630      	mov	r0, r6
 80a09d6:	f7ff ff61 	bl	80a089c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a09da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a09de:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a09e0:	f000 80bf 	beq.w	80a0b62 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
 80a09e4:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a09e6:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
 80a09ea:	17e5      	asrs	r5, r4, #31
 80a09ec:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
 80a09f0:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a09f4:	fba4 8904 	umull	r8, r9, r4, r4
 80a09f8:	fb04 f305 	mul.w	r3, r4, r5
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a09fc:	fb02 f105 	mul.w	r1, r2, r5
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0a00:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a0a04:	17d3      	asrs	r3, r2, #31
 80a0a06:	fb04 1103 	mla	r1, r4, r3, r1
 80a0a0a:	fba2 2304 	umull	r2, r3, r2, r4
 80a0a0e:	440b      	add	r3, r1
 80a0a10:	0319      	lsls	r1, r3, #12
 80a0a12:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80a0a16:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80a0a18:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
 80a0a1c:	fb02 fe09 	mul.w	lr, r2, r9
 80a0a20:	17d3      	asrs	r3, r2, #31
 80a0a22:	fb08 ee03 	mla	lr, r8, r3, lr
 80a0a26:	fba2 2308 	umull	r2, r3, r2, r8
 80a0a2a:	4473      	add	r3, lr
 80a0a2c:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 80a0a30:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 80a0a34:	eb1a 0a00 	adds.w	sl, sl, r0
 80a0a38:	8b72      	ldrh	r2, [r6, #26]
 80a0a3a:	ea4f 2b23 	mov.w	fp, r3, asr #8
 80a0a3e:	eb4b 0b01 	adc.w	fp, fp, r1
 80a0a42:	f11a 0000 	adds.w	r0, sl, #0
 80a0a46:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
 80a0a4a:	fba0 ab02 	umull	sl, fp, r0, r2
 80a0a4e:	fb02 bb01 	mla	fp, r2, r1, fp
 80a0a52:	ea4f 026b 	mov.w	r2, fp, asr #1
 80a0a56:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
 80a0a5a:	ea52 0103 	orrs.w	r1, r2, r3
 80a0a5e:	f000 8083 	beq.w	80a0b68 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a0a62:	1138      	asrs	r0, r7, #4
 80a0a64:	f640 4735 	movw	r7, #3125	; 0xc35
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0a68:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a0a6c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0a70:	fb0a f109 	mul.w	r1, sl, r9
 80a0a74:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a0a78:	fb08 110b 	mla	r1, r8, fp, r1
 80a0a7c:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0a80:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a0a84:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a0a86:	fb0a f105 	mul.w	r1, sl, r5
 80a0a8a:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a0a8e:	fb04 110b 	mla	r1, r4, fp, r1
 80a0a92:	fbaa 4504 	umull	r4, r5, sl, r4
 80a0a96:	440d      	add	r5, r1
 80a0a98:	ea4f 4b45 	mov.w	fp, r5, lsl #17
 80a0a9c:	ea4f 4a44 	mov.w	sl, r4, lsl #17
 80a0aa0:	eb1a 0a08 	adds.w	sl, sl, r8
 80a0aa4:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
 80a0aa8:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a0aac:	ea4f 79e0 	mov.w	r9, r0, asr #31
 80a0ab0:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 80a0ab4:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
 80a0ab8:	07c4      	lsls	r4, r0, #31
 80a0aba:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
 80a0abe:	f04f 0800 	mov.w	r8, #0
 80a0ac2:	eb18 080a 	adds.w	r8, r8, sl
 80a0ac6:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 80a0aca:	eb49 090b 	adc.w	r9, r9, fp
 80a0ace:	ebb4 0408 	subs.w	r4, r4, r8
 80a0ad2:	fba4 0107 	umull	r0, r1, r4, r7
 80a0ad6:	eb65 0509 	sbc.w	r5, r5, r9
 80a0ada:	fb07 1105 	mla	r1, r7, r5, r1
 80a0ade:	f004 fba3 	bl	80a5228 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0ae2:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a0ae6:	134c      	asrs	r4, r1, #13
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0ae8:	fb02 f704 	mul.w	r7, r2, r4
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a0aec:	0b45      	lsrs	r5, r0, #13
 80a0aee:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0af2:	17d3      	asrs	r3, r2, #31
 80a0af4:	fb05 7703 	mla	r7, r5, r3, r7
 80a0af8:	fba2 2305 	umull	r2, r3, r2, r5
 80a0afc:	4354      	muls	r4, r2
 80a0afe:	443b      	add	r3, r7
 80a0b00:	fb05 4403 	mla	r4, r5, r3, r4
 80a0b04:	fba2 2305 	umull	r2, r3, r2, r5
 80a0b08:	4423      	add	r3, r4
 80a0b0a:	0e54      	lsrs	r4, r2, #25
 80a0b0c:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 80a0b10:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
 80a0b14:	1824      	adds	r4, r4, r0
 80a0b16:	ea4f 6563 	mov.w	r5, r3, asr #25
 80a0b1a:	414d      	adcs	r5, r1
 80a0b1c:	4351      	muls	r1, r2
 80a0b1e:	17d3      	asrs	r3, r2, #31
 80a0b20:	fb00 1303 	mla	r3, r0, r3, r1
 80a0b24:	fba2 0100 	umull	r0, r1, r2, r0
 80a0b28:	4419      	add	r1, r3
 80a0b2a:	0cc2      	lsrs	r2, r0, #19
 80a0b2c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80a0b30:	1912      	adds	r2, r2, r4
    return (float)p/256;
 80a0b32:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0b36:	ea4f 43e1 	mov.w	r3, r1, asr #19
 80a0b3a:	416b      	adcs	r3, r5
 80a0b3c:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
 80a0b3e:	17e5      	asrs	r5, r4, #31
 80a0b40:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a0b42:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a0b46:	1219      	asrs	r1, r3, #8
    return (float)p/256;
 80a0b48:	012b      	lsls	r3, r5, #4
 80a0b4a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80a0b4e:	1880      	adds	r0, r0, r2
 80a0b50:	4159      	adcs	r1, r3
 80a0b52:	f004 f93f 	bl	80a4dd4 <__aeabi_l2f>
 80a0b56:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a0b5a:	f004 f979 	bl	80a4e50 <__aeabi_fmul>
 80a0b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
 80a0b62:	4803      	ldr	r0, [pc, #12]	; (80a0b70 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>)
 80a0b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
 80a0b68:	2000      	movs	r0, #0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
 80a0b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b6e:	bf00      	nop
 80a0b70:	7fc00000 	.word	0x7fc00000

080a0b74 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a0b74:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
 80a0b76:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a0b7a:	b085      	sub	sp, #20
    uint16_t value;

    if (_cs == -1) {
 80a0b7c:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a0b7e:	4604      	mov	r4, r0
 80a0b80:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
 80a0b82:	d11d      	bne.n	80a0bc0 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0b84:	7901      	ldrb	r1, [r0, #4]
 80a0b86:	6800      	ldr	r0, [r0, #0]
 80a0b88:	f001 ff95 	bl	80a2ab6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0b8c:	6820      	ldr	r0, [r4, #0]
 80a0b8e:	4629      	mov	r1, r5
 80a0b90:	6803      	ldr	r3, [r0, #0]
 80a0b92:	689b      	ldr	r3, [r3, #8]
 80a0b94:	4798      	blx	r3
        _wire -> endTransmission();
 80a0b96:	6820      	ldr	r0, [r4, #0]
 80a0b98:	f001 ff98 	bl	80a2acc <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
 80a0b9c:	2202      	movs	r2, #2
 80a0b9e:	7921      	ldrb	r1, [r4, #4]
 80a0ba0:	6820      	ldr	r0, [r4, #0]
 80a0ba2:	f001 ff85 	bl	80a2ab0 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
 80a0ba6:	6820      	ldr	r0, [r4, #0]
 80a0ba8:	6803      	ldr	r3, [r0, #0]
 80a0baa:	695b      	ldr	r3, [r3, #20]
 80a0bac:	4798      	blx	r3
 80a0bae:	4605      	mov	r5, r0
 80a0bb0:	6820      	ldr	r0, [r4, #0]
 80a0bb2:	6803      	ldr	r3, [r0, #0]
 80a0bb4:	695b      	ldr	r3, [r3, #20]
 80a0bb6:	4798      	blx	r3
 80a0bb8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a0bbc:	b285      	uxth	r5, r0
 80a0bbe:	e035      	b.n	80a0c2c <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
 80a0bc0:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a0bc4:	3301      	adds	r3, #1
 80a0bc6:	d10e      	bne.n	80a0be6 <_ZN15Adafruit_BME2806read16Eh+0x72>
 80a0bc8:	4b1a      	ldr	r3, [pc, #104]	; (80a0c34 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
 80a0bca:	4a1b      	ldr	r2, [pc, #108]	; (80a0c38 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 80a0bcc:	9300      	str	r3, [sp, #0]
 80a0bce:	9202      	str	r2, [sp, #8]
 80a0bd0:	2300      	movs	r3, #0
 80a0bd2:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0bd4:	4668      	mov	r0, sp
 80a0bd6:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0bda:	f88d 200c 	strb.w	r2, [sp, #12]
 80a0bde:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0be2:	f7ff fe51 	bl	80a0888 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
 80a0be6:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0bea:	2100      	movs	r1, #0
 80a0bec:	b280      	uxth	r0, r0
 80a0bee:	f002 f884 	bl	80a2cfa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0bf2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0bf6:	4620      	mov	r0, r4
 80a0bf8:	f7ff fe08 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
 80a0bfc:	2100      	movs	r1, #0
 80a0bfe:	4620      	mov	r0, r4
 80a0c00:	f7ff fe04 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
 80a0c04:	2100      	movs	r1, #0
 80a0c06:	4605      	mov	r5, r0
 80a0c08:	4620      	mov	r0, r4
 80a0c0a:	f7ff fdff 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
 80a0c0e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a0c12:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
 80a0c14:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0c18:	2101      	movs	r1, #1
 80a0c1a:	b280      	uxth	r0, r0
 80a0c1c:	f002 f86d 	bl	80a2cfa <digitalWrite>
        if (_sck == -1)
 80a0c20:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0c24:	3301      	adds	r3, #1
 80a0c26:	d101      	bne.n	80a0c2c <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
 80a0c28:	f7ff fe27 	bl	80a087a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
 80a0c2c:	4628      	mov	r0, r5
 80a0c2e:	b005      	add	sp, #20
 80a0c30:	bd30      	pop	{r4, r5, pc}
 80a0c32:	bf00      	nop
 80a0c34:	080a584c 	.word	0x080a584c
 80a0c38:	0007a120 	.word	0x0007a120

080a0c3c <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 80a0c3c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
 80a0c3e:	f7ff ff99 	bl	80a0b74 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
 80a0c42:	ba40      	rev16	r0, r0
}
 80a0c44:	b280      	uxth	r0, r0
 80a0c46:	bd08      	pop	{r3, pc}

080a0c48 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
 80a0c48:	b510      	push	{r4, lr}
 80a0c4a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
 80a0c4c:	f7ff fe92 	bl	80a0974 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 80a0c50:	21fd      	movs	r1, #253	; 0xfd
 80a0c52:	4620      	mov	r0, r4
 80a0c54:	f7ff ff8e 	bl	80a0b74 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80a0c58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80a0c5c:	d03a      	beq.n	80a0cd4 <_ZN15Adafruit_BME28012readHumidityEv+0x8c>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a0c5e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a0c62:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a0c64:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80a0c68:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a0c6a:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a0c6e:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
 80a0c72:	fb02 3311 	mls	r3, r2, r1, r3
 80a0c76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80a0c7a:	13d8      	asrs	r0, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 80a0c7c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a0c80:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
 80a0c84:	4353      	muls	r3, r2
 80a0c86:	434a      	muls	r2, r1
 80a0c88:	12db      	asrs	r3, r3, #11
 80a0c8a:	1292      	asrs	r2, r2, #10
 80a0c8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80a0c90:	4353      	muls	r3, r2
 80a0c92:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 80a0c96:	129b      	asrs	r3, r3, #10
 80a0c98:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a0c9c:	4353      	muls	r3, r2
 80a0c9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80a0ca2:	139b      	asrs	r3, r3, #14
 80a0ca4:	4343      	muls	r3, r0

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80a0ca6:	13d8      	asrs	r0, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
 80a0ca8:	4340      	muls	r0, r0
 80a0caa:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80a0cae:	11c0      	asrs	r0, r0, #7
 80a0cb0:	4350      	muls	r0, r2
 80a0cb2:	eba3 1020 	sub.w	r0, r3, r0, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80a0cb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
 80a0cba:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80a0cbe:	bfa8      	it	ge
 80a0cc0:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 80a0cc4:	1300      	asrs	r0, r0, #12
 80a0cc6:	f004 f86f 	bl	80a4da8 <__aeabi_i2f>
 80a0cca:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80a0cce:	f004 f8bf 	bl	80a4e50 <__aeabi_fmul>
 80a0cd2:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
 80a0cd4:	4800      	ldr	r0, [pc, #0]	; (80a0cd8 <_ZN15Adafruit_BME28012readHumidityEv+0x90>)

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
 80a0cd6:	bd10      	pop	{r4, pc}
 80a0cd8:	7fc00000 	.word	0x7fc00000

080a0cdc <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a0cdc:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
 80a0cde:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a0ce2:	b085      	sub	sp, #20
    uint8_t value;
    
    if (_cs == -1) {
 80a0ce4:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a0ce6:	4604      	mov	r4, r0
 80a0ce8:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
 80a0cea:	d116      	bne.n	80a0d1a <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0cec:	7901      	ldrb	r1, [r0, #4]
 80a0cee:	6800      	ldr	r0, [r0, #0]
 80a0cf0:	f001 fee1 	bl	80a2ab6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0cf4:	6820      	ldr	r0, [r4, #0]
 80a0cf6:	4629      	mov	r1, r5
 80a0cf8:	6803      	ldr	r3, [r0, #0]
 80a0cfa:	689b      	ldr	r3, [r3, #8]
 80a0cfc:	4798      	blx	r3
        _wire -> endTransmission();
 80a0cfe:	6820      	ldr	r0, [r4, #0]
 80a0d00:	f001 fee4 	bl	80a2acc <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
 80a0d04:	2201      	movs	r2, #1
 80a0d06:	7921      	ldrb	r1, [r4, #4]
 80a0d08:	6820      	ldr	r0, [r4, #0]
 80a0d0a:	f001 fed1 	bl	80a2ab0 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
 80a0d0e:	6820      	ldr	r0, [r4, #0]
 80a0d10:	6803      	ldr	r3, [r0, #0]
 80a0d12:	695b      	ldr	r3, [r3, #20]
 80a0d14:	4798      	blx	r3
 80a0d16:	b2c5      	uxtb	r5, r0
 80a0d18:	e02e      	b.n	80a0d78 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
 80a0d1a:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a0d1e:	3301      	adds	r3, #1
 80a0d20:	d10e      	bne.n	80a0d40 <_ZN15Adafruit_BME2805read8Eh+0x64>
 80a0d22:	4b17      	ldr	r3, [pc, #92]	; (80a0d80 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
 80a0d24:	4a17      	ldr	r2, [pc, #92]	; (80a0d84 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 80a0d26:	9300      	str	r3, [sp, #0]
 80a0d28:	9202      	str	r2, [sp, #8]
 80a0d2a:	2300      	movs	r3, #0
 80a0d2c:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0d2e:	4668      	mov	r0, sp
 80a0d30:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0d34:	f88d 200c 	strb.w	r2, [sp, #12]
 80a0d38:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0d3c:	f7ff fda4 	bl	80a0888 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
 80a0d40:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0d44:	2100      	movs	r1, #0
 80a0d46:	b280      	uxth	r0, r0
 80a0d48:	f001 ffd7 	bl	80a2cfa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a0d4c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0d50:	4620      	mov	r0, r4
 80a0d52:	f7ff fd5b 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 80a0d56:	2100      	movs	r1, #0
 80a0d58:	4620      	mov	r0, r4
 80a0d5a:	f7ff fd57 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
 80a0d5e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
 80a0d60:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0d64:	2101      	movs	r1, #1
 80a0d66:	b280      	uxth	r0, r0
 80a0d68:	f001 ffc7 	bl	80a2cfa <digitalWrite>
        if (_sck == -1)
 80a0d6c:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0d70:	3301      	adds	r3, #1
 80a0d72:	d101      	bne.n	80a0d78 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
 80a0d74:	f7ff fd81 	bl	80a087a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
 80a0d78:	4628      	mov	r0, r5
 80a0d7a:	b005      	add	sp, #20
 80a0d7c:	bd30      	pop	{r4, r5, pc}
 80a0d7e:	bf00      	nop
 80a0d80:	080a584c 	.word	0x080a584c
 80a0d84:	0007a120 	.word	0x0007a120

080a0d88 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
 80a0d88:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 80a0d8a:	21f3      	movs	r1, #243	; 0xf3
 80a0d8c:	f7ff ffa6 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 80a0d90:	f000 0001 	and.w	r0, r0, #1
 80a0d94:	bd08      	pop	{r3, pc}

080a0d96 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
 80a0d96:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0d98:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
 80a0d9a:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0d9c:	f7ff ff4e 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0da0:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a0da2:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0da4:	4620      	mov	r0, r4
 80a0da6:	f7ff ff49 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0daa:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 80a0dac:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0dae:	4620      	mov	r0, r4
 80a0db0:	f7ff ff44 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0db4:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 80a0db6:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0db8:	4620      	mov	r0, r4
 80a0dba:	f7ff ff3f 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0dbe:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a0dc0:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0dc2:	4620      	mov	r0, r4
 80a0dc4:	f7ff ff3a 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0dc8:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 80a0dca:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0dcc:	4620      	mov	r0, r4
 80a0dce:	f7ff ff35 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0dd2:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 80a0dd4:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0dd6:	4620      	mov	r0, r4
 80a0dd8:	f7ff ff30 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0ddc:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 80a0dde:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0de0:	4620      	mov	r0, r4
 80a0de2:	f7ff ff2b 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0de6:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 80a0de8:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	f7ff ff26 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0df0:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 80a0df2:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0df4:	4620      	mov	r0, r4
 80a0df6:	f7ff ff21 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0dfa:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 80a0dfc:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0dfe:	4620      	mov	r0, r4
 80a0e00:	f7ff ff1c 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
 80a0e04:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 80a0e06:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0e08:	4620      	mov	r0, r4
 80a0e0a:	f7ff ff17 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a0e0e:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 80a0e10:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a0e12:	4620      	mov	r0, r4
 80a0e14:	f7ff ff62 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0e18:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a0e1a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a0e1e:	4620      	mov	r0, r4
 80a0e20:	f7ff ff0c 	bl	80a0c3c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a0e24:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 80a0e26:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a0e28:	4620      	mov	r0, r4
 80a0e2a:	f7ff ff57 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a0e2e:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a0e30:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a0e34:	4620      	mov	r0, r4
 80a0e36:	f7ff ff51 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>
 80a0e3a:	21e5      	movs	r1, #229	; 0xe5
 80a0e3c:	4605      	mov	r5, r0
 80a0e3e:	4620      	mov	r0, r4
 80a0e40:	f7ff ff4c 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>
 80a0e44:	f000 000f 	and.w	r0, r0, #15
 80a0e48:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80a0e4c:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80a0e4e:	21e6      	movs	r1, #230	; 0xe6
 80a0e50:	4620      	mov	r0, r4
 80a0e52:	f7ff ff43 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>
 80a0e56:	21e5      	movs	r1, #229	; 0xe5
 80a0e58:	4605      	mov	r5, r0
 80a0e5a:	4620      	mov	r0, r4
 80a0e5c:	f7ff ff3e 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>
 80a0e60:	1100      	asrs	r0, r0, #4
 80a0e62:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80a0e66:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 80a0e68:	21e7      	movs	r1, #231	; 0xe7
 80a0e6a:	4620      	mov	r0, r4
 80a0e6c:	f7ff ff36 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>
 80a0e70:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
 80a0e74:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0e78 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a0e78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
 80a0e7a:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a0e7e:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a0e80:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a0e82:	460e      	mov	r6, r1
 80a0e84:	4615      	mov	r5, r2
    if (_cs == -1) {
 80a0e86:	d111      	bne.n	80a0eac <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a0e88:	7901      	ldrb	r1, [r0, #4]
 80a0e8a:	6800      	ldr	r0, [r0, #0]
 80a0e8c:	f001 fe13 	bl	80a2ab6 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a0e90:	6820      	ldr	r0, [r4, #0]
 80a0e92:	4631      	mov	r1, r6
 80a0e94:	6803      	ldr	r3, [r0, #0]
 80a0e96:	689b      	ldr	r3, [r3, #8]
 80a0e98:	4798      	blx	r3
        _wire -> write((uint8_t)value);
 80a0e9a:	6820      	ldr	r0, [r4, #0]
 80a0e9c:	4629      	mov	r1, r5
 80a0e9e:	6803      	ldr	r3, [r0, #0]
 80a0ea0:	689b      	ldr	r3, [r3, #8]
 80a0ea2:	4798      	blx	r3
        _wire -> endTransmission();
 80a0ea4:	6820      	ldr	r0, [r4, #0]
 80a0ea6:	f001 fe11 	bl	80a2acc <_ZN7TwoWire15endTransmissionEv>
 80a0eaa:	e02d      	b.n	80a0f08 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
 80a0eac:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a0eb0:	3301      	adds	r3, #1
 80a0eb2:	d10e      	bne.n	80a0ed2 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
 80a0eb4:	4b15      	ldr	r3, [pc, #84]	; (80a0f0c <_ZN15Adafruit_BME2806write8Ehh+0x94>)
 80a0eb6:	4a16      	ldr	r2, [pc, #88]	; (80a0f10 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
 80a0eb8:	9300      	str	r3, [sp, #0]
 80a0eba:	9202      	str	r2, [sp, #8]
 80a0ebc:	2300      	movs	r3, #0
 80a0ebe:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a0ec0:	4668      	mov	r0, sp
 80a0ec2:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0ec6:	f88d 200c 	strb.w	r2, [sp, #12]
 80a0eca:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0ece:	f7ff fcdb 	bl	80a0888 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
 80a0ed2:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0ed6:	2100      	movs	r1, #0
 80a0ed8:	b280      	uxth	r0, r0
 80a0eda:	f001 ff0e 	bl	80a2cfa <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
 80a0ede:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80a0ee2:	4620      	mov	r0, r4
 80a0ee4:	f7ff fc92 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
 80a0ee8:	4629      	mov	r1, r5
 80a0eea:	4620      	mov	r0, r4
 80a0eec:	f7ff fc8e 	bl	80a080c <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
 80a0ef0:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0ef4:	2101      	movs	r1, #1
 80a0ef6:	b280      	uxth	r0, r0
 80a0ef8:	f001 feff 	bl	80a2cfa <digitalWrite>
    if (_sck == -1)
 80a0efc:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a0f00:	3301      	adds	r3, #1
 80a0f02:	d101      	bne.n	80a0f08 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
 80a0f04:	f7ff fcb9 	bl	80a087a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
 80a0f08:	b004      	add	sp, #16
 80a0f0a:	bd70      	pop	{r4, r5, r6, pc}
 80a0f0c:	080a584c 	.word	0x080a584c
 80a0f10:	0007a120 	.word	0x0007a120

080a0f14 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a0f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f16:	4604      	mov	r4, r0
    _measReg.mode     = mode;
 80a0f18:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a0f1c:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.mode     = mode;
 80a0f20:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
 80a0f24:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
 80a0f28:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
 80a0f2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a0f30:	f89d e01c 	ldrb.w	lr, [sp, #28]
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
 80a0f34:	f366 1347 	bfi	r3, r6, #5, #3
 80a0f38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
 80a0f3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a0f40:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
 80a0f44:	f36e 03c5 	bfi	r3, lr, #3, #3
    _configReg.t_sb   = duration;
 80a0f48:	f367 0302 	bfi	r3, r7, #0, #3
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
 80a0f4c:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
 80a0f50:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 80a0f54:	f006 0207 	and.w	r2, r6, #7
 80a0f58:	21f2      	movs	r1, #242	; 0xf2
 80a0f5a:	f7ff ff8d 	bl	80a0e78 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
 80a0f5e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
 80a0f62:	4620      	mov	r0, r4
 80a0f64:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a0f68:	f002 0107 	and.w	r1, r2, #7
 80a0f6c:	009b      	lsls	r3, r3, #2
 80a0f6e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a0f72:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 80a0f76:	21f5      	movs	r1, #245	; 0xf5
 80a0f78:	f7ff ff7e 	bl	80a0e78 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
 80a0f7c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a0f80:	4620      	mov	r0, r4
 80a0f82:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a0f86:	f002 0107 	and.w	r1, r2, #7
 80a0f8a:	009b      	lsls	r3, r3, #2
 80a0f8c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a0f90:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 80a0f94:	21f4      	movs	r1, #244	; 0xf4
}
 80a0f96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a0f9a:	f7ff bf6d 	b.w	80a0e78 <_ZN15Adafruit_BME2806write8Ehh>

080a0f9e <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
 80a0f9e:	b530      	push	{r4, r5, lr}
 80a0fa0:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
 80a0fa2:	f990 0010 	ldrsb.w	r0, [r0, #16]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
 80a0fa6:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
 80a0fa8:	1c42      	adds	r2, r0, #1
 80a0faa:	d103      	bne.n	80a0fb4 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
 80a0fac:	6820      	ldr	r0, [r4, #0]
 80a0fae:	f001 fd4b 	bl	80a2a48 <_ZN7TwoWire5beginEv>
 80a0fb2:	e022      	b.n	80a0ffa <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
 80a0fb4:	2101      	movs	r1, #1
 80a0fb6:	b280      	uxth	r0, r0
 80a0fb8:	f001 fe9f 	bl	80a2cfa <digitalWrite>
        pinMode(_cs, OUTPUT);
 80a0fbc:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a0fc0:	2101      	movs	r1, #1
 80a0fc2:	b280      	uxth	r0, r0
 80a0fc4:	f001 fe88 	bl	80a2cd8 <pinMode>
        if (_sck == -1) {
 80a0fc8:	f994 0013 	ldrsb.w	r0, [r4, #19]
 80a0fcc:	1c43      	adds	r3, r0, #1
 80a0fce:	d104      	bne.n	80a0fda <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
 80a0fd0:	f7ff fbfc 	bl	80a07cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0fd4:	f000 fd7b 	bl	80a1ace <_ZN8SPIClass5beginEv>
 80a0fd8:	e00f      	b.n	80a0ffa <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
 80a0fda:	2101      	movs	r1, #1
 80a0fdc:	b280      	uxth	r0, r0
 80a0fde:	f001 fe7b 	bl	80a2cd8 <pinMode>
            pinMode(_mosi, OUTPUT);
 80a0fe2:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a0fe6:	2101      	movs	r1, #1
 80a0fe8:	b280      	uxth	r0, r0
 80a0fea:	f001 fe75 	bl	80a2cd8 <pinMode>
            pinMode(_miso, INPUT);
 80a0fee:	f994 0012 	ldrsb.w	r0, [r4, #18]
 80a0ff2:	2100      	movs	r1, #0
 80a0ff4:	b280      	uxth	r0, r0
 80a0ff6:	f001 fe6f 	bl	80a2cd8 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a0ffa:	21d0      	movs	r1, #208	; 0xd0
 80a0ffc:	4620      	mov	r0, r4
 80a0ffe:	f7ff fe6d 	bl	80a0cdc <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
 80a1002:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a1004:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
 80a1006:	d120      	bne.n	80a104a <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
 80a1008:	4620      	mov	r0, r4
 80a100a:	22b6      	movs	r2, #182	; 0xb6
 80a100c:	21e0      	movs	r1, #224	; 0xe0
 80a100e:	f7ff ff33 	bl	80a0e78 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
 80a1012:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a1016:	f000 ff7d 	bl	80a1f14 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
 80a101a:	4620      	mov	r0, r4
 80a101c:	f7ff feb4 	bl	80a0d88 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 80a1020:	4605      	mov	r5, r0
 80a1022:	b108      	cbz	r0, 80a1028 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
 80a1024:	2064      	movs	r0, #100	; 0x64
 80a1026:	e7f6      	b.n	80a1016 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
 80a1028:	4620      	mov	r0, r4
 80a102a:	f7ff feb4 	bl	80a0d96 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
 80a102e:	2305      	movs	r3, #5
 80a1030:	9300      	str	r3, [sp, #0]
 80a1032:	461a      	mov	r2, r3
 80a1034:	2103      	movs	r1, #3
 80a1036:	4620      	mov	r0, r4
 80a1038:	9502      	str	r5, [sp, #8]
 80a103a:	9501      	str	r5, [sp, #4]
 80a103c:	f7ff ff6a 	bl	80a0f14 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
 80a1040:	2064      	movs	r0, #100	; 0x64
 80a1042:	f000 ff67 	bl	80a1f14 <delay>
 80a1046:	2001      	movs	r0, #1
 80a1048:	e000      	b.n	80a104c <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
 80a104a:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
 80a104c:	b005      	add	sp, #20
 80a104e:	bd30      	pop	{r4, r5, pc}

080a1050 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
 80a1050:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
 80a1052:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
 80a1054:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
 80a1056:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
 80a1058:	f001 fec6 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a105c:	6020      	str	r0, [r4, #0]
	status = init();
 80a105e:	4620      	mov	r0, r4
 80a1060:	f7ff ff9d 	bl	80a0f9e <_ZN15Adafruit_BME2804initEv>
 	if(!status){
 80a1064:	b930      	cbnz	r0, 80a1074 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 80a1066:	2376      	movs	r3, #118	; 0x76
 80a1068:	7123      	strb	r3, [r4, #4]
 		status = init();
 80a106a:	4620      	mov	r0, r4
 		}
	return status;
}
 80a106c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
 80a1070:	f7ff bf95 	b.w	80a0f9e <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
 80a1074:	bd10      	pop	{r4, pc}

080a1076 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
 80a1076:	f000 babd 	b.w	80a15f4 <HAL_Pin_Map>
	...

080a107c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a107c:	b510      	push	{r4, lr}
 80a107e:	4b05      	ldr	r3, [pc, #20]	; (80a1094 <_ZN10JsonBufferD1Ev+0x18>)
 80a1080:	4604      	mov	r4, r0
 80a1082:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a1084:	7c03      	ldrb	r3, [r0, #16]
 80a1086:	b91b      	cbnz	r3, 80a1090 <_ZN10JsonBufferD1Ev+0x14>
 80a1088:	6840      	ldr	r0, [r0, #4]
 80a108a:	b108      	cbz	r0, 80a1090 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a108c:	f000 fcda 	bl	80a1a44 <free>
	}
}
 80a1090:	4620      	mov	r0, r4
 80a1092:	bd10      	pop	{r4, pc}
 80a1094:	080a58a0 	.word	0x080a58a0

080a1098 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a1098:	b510      	push	{r4, lr}
 80a109a:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
 80a109c:	f7ff ffee 	bl	80a107c <_ZN10JsonBufferD1Ev>
 80a10a0:	4620      	mov	r0, r4
 80a10a2:	2114      	movs	r1, #20
 80a10a4:	f001 fed4 	bl	80a2e50 <_ZdlPvj>
 80a10a8:	4620      	mov	r0, r4
 80a10aa:	bd10      	pop	{r4, pc}

080a10ac <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a10ac:	b510      	push	{r4, lr}
 80a10ae:	4604      	mov	r4, r0
 80a10b0:	4b02      	ldr	r3, [pc, #8]	; (80a10bc <_ZN10JsonWriterD1Ev+0x10>)
 80a10b2:	6003      	str	r3, [r0, #0]
 80a10b4:	f7ff ffe2 	bl	80a107c <_ZN10JsonBufferD1Ev>

}
 80a10b8:	4620      	mov	r0, r4
 80a10ba:	bd10      	pop	{r4, pc}
 80a10bc:	080a58b0 	.word	0x080a58b0

080a10c0 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a10c0:	b510      	push	{r4, lr}
 80a10c2:	4604      	mov	r4, r0

}
 80a10c4:	f7ff fff2 	bl	80a10ac <_ZN10JsonWriterD1Ev>
 80a10c8:	4620      	mov	r0, r4
 80a10ca:	2130      	movs	r1, #48	; 0x30
 80a10cc:	f001 fec0 	bl	80a2e50 <_ZdlPvj>
 80a10d0:	4620      	mov	r0, r4
 80a10d2:	bd10      	pop	{r4, pc}

080a10d4 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a10d4:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
 80a10d6:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a10d8:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
 80a10da:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
 80a10dc:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
 80a10de:	7643      	strb	r3, [r0, #25]

	truncated = false;
 80a10e0:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 80a10e4:	4770      	bx	lr
	...

080a10e8 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a10e8:	2300      	movs	r3, #0
 80a10ea:	60c3      	str	r3, [r0, #12]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a10ec:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a10ee:	2301      	movs	r3, #1
 80a10f0:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a10f2:	4b05      	ldr	r3, [pc, #20]	; (80a1108 <_ZN10JsonWriterC1EPcj+0x20>)
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a10f4:	6041      	str	r1, [r0, #4]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a10f6:	6003      	str	r3, [r0, #0]
 80a10f8:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a10fc:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a10fe:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
 80a1100:	f7ff ffe8 	bl	80a10d4 <_ZN10JsonWriter4initEv>
}
 80a1104:	bd10      	pop	{r4, pc}
 80a1106:	bf00      	nop
 80a1108:	080a58b0 	.word	0x080a58b0

080a110c <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 80a110c:	68c3      	ldr	r3, [r0, #12]
 80a110e:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
 80a1110:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
 80a1112:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
 80a1114:	bf3d      	ittte	cc
 80a1116:	6842      	ldrcc	r2, [r0, #4]
 80a1118:	1c5c      	addcc	r4, r3, #1
 80a111a:	60c4      	strcc	r4, [r0, #12]
	}
	else {
		truncated = true;
 80a111c:	2301      	movcs	r3, #1
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
		buffer[offset++] = ch;
 80a111e:	bf34      	ite	cc
 80a1120:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
 80a1122:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
 80a1126:	bd10      	pop	{r4, pc}

080a1128 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
 80a1128:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 80a112a:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
 80a112c:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 80a112e:	b143      	cbz	r3, 80a1142 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 80a1130:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a1134:	7e59      	ldrb	r1, [r3, #25]
 80a1136:	b109      	cbz	r1, 80a113c <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 80a1138:	f7ff ffe8 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
 80a113c:	6963      	ldr	r3, [r4, #20]
 80a113e:	3b01      	subs	r3, #1
 80a1140:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
 80a1142:	68a3      	ldr	r3, [r4, #8]
 80a1144:	68e0      	ldr	r0, [r4, #12]
 80a1146:	6861      	ldr	r1, [r4, #4]
 80a1148:	4298      	cmp	r0, r3
 80a114a:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
 80a114e:	bf2a      	itet	cs
 80a1150:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
 80a1152:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
 80a1154:	f803 2c01 	strbcs.w	r2, [r3, #-1]
 80a1158:	bd10      	pop	{r4, pc}

080a115a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a115a:	b570      	push	{r4, r5, r6, lr}
 80a115c:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 80a115e:	68c0      	ldr	r0, [r0, #12]
 80a1160:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a1162:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
 80a1164:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a1166:	4613      	mov	r3, r2
 80a1168:	4430      	add	r0, r6
 80a116a:	460a      	mov	r2, r1
 80a116c:	4629      	mov	r1, r5
 80a116e:	f000 fc79 	bl	80a1a64 <vsnprintf>
	if (count <= spaceAvailable) {
 80a1172:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a1174:	bf35      	itete	cc
 80a1176:	68a3      	ldrcc	r3, [r4, #8]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a1178:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a117a:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a117c:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
 80a117e:	bf36      	itet	cc
 80a1180:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a1182:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
 80a1184:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
 80a1188:	bd70      	pop	{r4, r5, r6, pc}

080a118a <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
 80a118a:	b40e      	push	{r1, r2, r3}
 80a118c:	b503      	push	{r0, r1, lr}
 80a118e:	aa03      	add	r2, sp, #12
 80a1190:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
 80a1194:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 80a1196:	f7ff ffe0 	bl	80a115a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
 80a119a:	b002      	add	sp, #8
 80a119c:	f85d eb04 	ldr.w	lr, [sp], #4
 80a11a0:	b003      	add	sp, #12
 80a11a2:	4770      	bx	lr

080a11a4 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
 80a11a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a11a8:	4604      	mov	r4, r0
 80a11aa:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
 80a11ac:	4617      	mov	r7, r2
 80a11ae:	b112      	cbz	r2, 80a11b6 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 80a11b0:	2122      	movs	r1, #34	; 0x22
 80a11b2:	f7ff ffab 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
 80a11b6:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a11b8:	5d71      	ldrb	r1, [r6, r5]
 80a11ba:	eb06 0805 	add.w	r8, r6, r5
 80a11be:	2900      	cmp	r1, #0
 80a11c0:	d071      	beq.n	80a12a6 <_ZN10JsonWriter12insertStringEPKcb+0x102>
 80a11c2:	68e2      	ldr	r2, [r4, #12]
 80a11c4:	68a3      	ldr	r3, [r4, #8]
 80a11c6:	429a      	cmp	r2, r3
 80a11c8:	d26d      	bcs.n	80a12a6 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
 80a11ca:	060b      	lsls	r3, r1, #24
 80a11cc:	d533      	bpl.n	80a1236 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 80a11ce:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80a11d2:	2be0      	cmp	r3, #224	; 0xe0
 80a11d4:	d117      	bne.n	80a1206 <_ZN10JsonWriter12insertStringEPKcb+0x62>
 80a11d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80a11da:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a11de:	2a80      	cmp	r2, #128	; 0x80
 80a11e0:	d111      	bne.n	80a1206 <_ZN10JsonWriter12insertStringEPKcb+0x62>
 80a11e2:	f105 0802 	add.w	r8, r5, #2
 80a11e6:	f816 2008 	ldrb.w	r2, [r6, r8]
 80a11ea:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 80a11ee:	2880      	cmp	r0, #128	; 0x80
 80a11f0:	d109      	bne.n	80a1206 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
 80a11f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80a11f6:	019b      	lsls	r3, r3, #6
 80a11f8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80a11fc:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80a1200:	431a      	orrs	r2, r3
 80a1202:	b292      	uxth	r2, r2
 80a1204:	e011      	b.n	80a122a <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 80a1206:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 80a120a:	2bc0      	cmp	r3, #192	; 0xc0
 80a120c:	d146      	bne.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
 80a120e:	f105 0801 	add.w	r8, r5, #1
 80a1212:	f816 3008 	ldrb.w	r3, [r6, r8]
 80a1216:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a121a:	2a80      	cmp	r2, #128	; 0x80
 80a121c:	d13e      	bne.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
 80a121e:	0189      	lsls	r1, r1, #6
 80a1220:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 80a1224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a1228:	431a      	orrs	r2, r3
 80a122a:	4923      	ldr	r1, [pc, #140]	; (80a12b8 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
 80a122c:	4620      	mov	r0, r4
 80a122e:	f7ff ffac 	bl	80a118a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 80a1232:	4645      	mov	r5, r8
 80a1234:	e035      	b.n	80a12a2 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
 80a1236:	290c      	cmp	r1, #12
 80a1238:	d018      	beq.n	80a126c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
 80a123a:	d80b      	bhi.n	80a1254 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
 80a123c:	2909      	cmp	r1, #9
 80a123e:	d021      	beq.n	80a1284 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
 80a1240:	290a      	cmp	r1, #10
 80a1242:	d019      	beq.n	80a1278 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
 80a1244:	2908      	cmp	r1, #8
 80a1246:	d129      	bne.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
 80a1248:	215c      	movs	r1, #92	; 0x5c
 80a124a:	4620      	mov	r0, r4
 80a124c:	f7ff ff5e 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 80a1250:	2162      	movs	r1, #98	; 0x62
 80a1252:	e023      	b.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
 80a1254:	2922      	cmp	r1, #34	; 0x22
 80a1256:	d01b      	beq.n	80a1290 <_ZN10JsonWriter12insertStringEPKcb+0xec>
 80a1258:	295c      	cmp	r1, #92	; 0x5c
 80a125a:	d019      	beq.n	80a1290 <_ZN10JsonWriter12insertStringEPKcb+0xec>
 80a125c:	290d      	cmp	r1, #13
 80a125e:	d11d      	bne.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
 80a1260:	215c      	movs	r1, #92	; 0x5c
 80a1262:	4620      	mov	r0, r4
 80a1264:	f7ff ff52 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 80a1268:	2172      	movs	r1, #114	; 0x72
 80a126a:	e017      	b.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
 80a126c:	215c      	movs	r1, #92	; 0x5c
 80a126e:	4620      	mov	r0, r4
 80a1270:	f7ff ff4c 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 80a1274:	2166      	movs	r1, #102	; 0x66
 80a1276:	e011      	b.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
 80a1278:	215c      	movs	r1, #92	; 0x5c
 80a127a:	4620      	mov	r0, r4
 80a127c:	f7ff ff46 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 80a1280:	216e      	movs	r1, #110	; 0x6e
 80a1282:	e00b      	b.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
 80a1284:	215c      	movs	r1, #92	; 0x5c
 80a1286:	4620      	mov	r0, r4
 80a1288:	f7ff ff40 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 80a128c:	2174      	movs	r1, #116	; 0x74
 80a128e:	e005      	b.n	80a129c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
 80a1290:	215c      	movs	r1, #92	; 0x5c
 80a1292:	4620      	mov	r0, r4
 80a1294:	f7ff ff3a 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 80a1298:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
 80a129c:	4620      	mov	r0, r4
 80a129e:	f7ff ff35 	bl	80a110c <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a12a2:	3501      	adds	r5, #1
 80a12a4:	e788      	b.n	80a11b8 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
 80a12a6:	b12f      	cbz	r7, 80a12b4 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
 80a12a8:	4620      	mov	r0, r4
	}

}
 80a12aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
 80a12ae:	2122      	movs	r1, #34	; 0x22
 80a12b0:	f7ff bf2c 	b.w	80a110c <_ZN10JsonWriter10insertCharEc>
 80a12b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a12b8:	080a58bd 	.word	0x080a58bd

080a12bc <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
 80a12bc:	6942      	ldr	r2, [r0, #20]
 80a12be:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
 80a12c2:	7e1a      	ldrb	r2, [r3, #24]
 80a12c4:	b112      	cbz	r2, 80a12cc <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 80a12c6:	2200      	movs	r2, #0
 80a12c8:	761a      	strb	r2, [r3, #24]
 80a12ca:	4770      	bx	lr
	}
	else {
		insertChar(',');
 80a12cc:	212c      	movs	r1, #44	; 0x2c
 80a12ce:	f7ff bf1d 	b.w	80a110c <_ZN10JsonWriter10insertCharEc>

080a12d2 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a12d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a12d4:	6943      	ldr	r3, [r0, #20]

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a12d6:	460e      	mov	r6, r1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a12d8:	3301      	adds	r3, #1
 80a12da:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a12dc:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a12de:	d80e      	bhi.n	80a12fe <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
 80a12e0:	f7ff ffec 	bl	80a12bc <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
 80a12e4:	6943      	ldr	r3, [r0, #20]

	context[contextIndex].isFirst = true;
 80a12e6:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
 80a12e8:	1c5a      	adds	r2, r3, #1
 80a12ea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a12ee:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
 80a12f0:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
 80a12f2:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
 80a12f4:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
 80a12f6:	f7ff ff09 	bl	80a110c <_ZN10JsonWriter10insertCharEc>
 80a12fa:	4620      	mov	r0, r4
 80a12fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
 80a12fe:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
 80a1300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1304 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a1304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1306:	4604      	mov	r4, r0
	if (floatPlaces >= 0) {
 80a1308:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a130a:	4608      	mov	r0, r1
	if (floatPlaces >= 0) {
 80a130c:	2d00      	cmp	r5, #0
 80a130e:	db0a      	blt.n	80a1326 <_ZN10JsonWriter11insertValueEf+0x22>
		insertsprintf("%.*f", floatPlaces, value);
 80a1310:	f003 f93c 	bl	80a458c <__aeabi_f2d>
 80a1314:	462a      	mov	r2, r5
 80a1316:	e9cd 0100 	strd	r0, r1, [sp]
 80a131a:	4908      	ldr	r1, [pc, #32]	; (80a133c <_ZN10JsonWriter11insertValueEf+0x38>)
 80a131c:	4620      	mov	r0, r4
 80a131e:	f7ff ff34 	bl	80a118a <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
 80a1322:	b003      	add	sp, #12
 80a1324:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
 80a1326:	f003 f931 	bl	80a458c <__aeabi_f2d>
 80a132a:	4602      	mov	r2, r0
 80a132c:	460b      	mov	r3, r1
 80a132e:	4620      	mov	r0, r4
 80a1330:	4903      	ldr	r1, [pc, #12]	; (80a1340 <_ZN10JsonWriter11insertValueEf+0x3c>)
	}
}
 80a1332:	b003      	add	sp, #12
 80a1334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
 80a1338:	f7ff bf27 	b.w	80a118a <_ZN10JsonWriter13insertsprintfEPKcz>
 80a133c:	080a58cf 	.word	0x080a58cf
 80a1340:	080a58d4 	.word	0x080a58d4

080a1344 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
 80a1344:	f000 b956 	b.w	80a15f4 <HAL_Pin_Map>

080a1348 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
 80a1348:	2200      	movs	r2, #0
 80a134a:	6001      	str	r1, [r0, #0]
 80a134c:	6102      	str	r2, [r0, #16]
 80a134e:	6142      	str	r2, [r0, #20]
    // do nothing
}
 80a1350:	4770      	bx	lr

080a1352 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
 80a1352:	b510      	push	{r4, lr}
 80a1354:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
 80a1356:	8800      	ldrh	r0, [r0, #0]
 80a1358:	f001 fcfb 	bl	80a2d52 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
 80a135c:	f240 3312 	movw	r3, #786	; 0x312
 80a1360:	f1a0 020b 	sub.w	r2, r0, #11
 80a1364:	429a      	cmp	r2, r3
 80a1366:	d807      	bhi.n	80a1378 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
 80a1368:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
 80a136a:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
 80a136c:	60e0      	str	r0, [r4, #12]
 80a136e:	f000 f9b9 	bl	80a16e4 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
 80a1372:	61a0      	str	r0, [r4, #24]

        return true;
 80a1374:	2001      	movs	r0, #1
 80a1376:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
 80a1378:	2000      	movs	r0, #0
    }
}
 80a137a:	bd10      	pop	{r4, pc}

080a137c <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
 80a137c:	b510      	push	{r4, lr}
 80a137e:	4604      	mov	r4, r0
 80a1380:	f000 f9b0 	bl	80a16e4 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
 80a1384:	69a3      	ldr	r3, [r4, #24]
 80a1386:	1ac0      	subs	r0, r0, r3
 80a1388:	4b07      	ldr	r3, [pc, #28]	; (80a13a8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
 80a138a:	4298      	cmp	r0, r3
 80a138c:	d90a      	bls.n	80a13a4 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
 80a138e:	6923      	ldr	r3, [r4, #16]
 80a1390:	6962      	ldr	r2, [r4, #20]
 80a1392:	fb93 f3f2 	sdiv	r3, r3, r2
 80a1396:	60e3      	str	r3, [r4, #12]
 80a1398:	f000 f9a4 	bl	80a16e4 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
 80a139c:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
 80a139e:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
 80a13a0:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
 80a13a2:	6163      	str	r3, [r4, #20]
 80a13a4:	bd10      	pop	{r4, pc}
 80a13a6:	bf00      	nop
 80a13a8:	0007a120 	.word	0x0007a120

080a13ac <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
 80a13ac:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
 80a13ae:	6883      	ldr	r3, [r0, #8]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
 80a13b0:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
 80a13b2:	6043      	str	r3, [r0, #4]
    _currentVoltage = analogRead(_pin);
 80a13b4:	8800      	ldrh	r0, [r0, #0]
 80a13b6:	f001 fccc 	bl	80a2d52 <analogRead>

    _voltageSum += _currentVoltage;
 80a13ba:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
 80a13bc:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
 80a13be:	4418      	add	r0, r3
    _volSumCount += 1;
 80a13c0:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
 80a13c2:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
 80a13c4:	3301      	adds	r3, #1
 80a13c6:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
 80a13c8:	4620      	mov	r0, r4
 80a13ca:	f7ff ffd7 	bl	80a137c <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
 80a13ce:	68a2      	ldr	r2, [r4, #8]
 80a13d0:	6861      	ldr	r1, [r4, #4]
 80a13d2:	1a51      	subs	r1, r2, r1
 80a13d4:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
 80a13d8:	dc10      	bgt.n	80a13fc <_ZN16AirQualitySensor5slopeEv+0x50>
 80a13da:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
 80a13de:	dc0d      	bgt.n	80a13fc <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
 80a13e0:	68e3      	ldr	r3, [r4, #12]
 80a13e2:	1ad3      	subs	r3, r2, r3
 80a13e4:	2b96      	cmp	r3, #150	; 0x96
 80a13e6:	dc0b      	bgt.n	80a1400 <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
 80a13e8:	29c8      	cmp	r1, #200	; 0xc8
 80a13ea:	dd02      	ble.n	80a13f2 <_ZN16AirQualitySensor5slopeEv+0x46>
 80a13ec:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
 80a13f0:	d108      	bne.n	80a1404 <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
 80a13f2:	2b32      	cmp	r3, #50	; 0x32
 80a13f4:	bfcc      	ite	gt
 80a13f6:	2002      	movgt	r0, #2
 80a13f8:	2003      	movle	r0, #3
 80a13fa:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
 80a13fc:	2000      	movs	r0, #0
 80a13fe:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
 80a1400:	2001      	movs	r0, #1
 80a1402:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
 80a1404:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
 80a1406:	bd10      	pop	{r4, pc}

080a1408 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
 80a1408:	f000 b8f4 	b.w	80a15f4 <HAL_Pin_Map>

080a140c <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a140c:	6803      	ldr	r3, [r0, #0]
 80a140e:	b2c9      	uxtb	r1, r1
 80a1410:	689b      	ldr	r3, [r3, #8]
 80a1412:	4718      	bx	r3

080a1414 <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
 80a1414:	b510      	push	{r4, lr}
 80a1416:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
 80a1418:	f001 fce6 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a141c:	213c      	movs	r1, #60	; 0x3c
 80a141e:	f001 fb4e 	bl	80a2abe <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
 80a1422:	f001 fce1 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a1426:	2180      	movs	r1, #128	; 0x80
 80a1428:	f7ff fff0 	bl	80a140c <_ZN7TwoWire5writeEi>
  Wire.write(command);
 80a142c:	f001 fcdc 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a1430:	6803      	ldr	r3, [r0, #0]
 80a1432:	4621      	mov	r1, r4
 80a1434:	689b      	ldr	r3, [r3, #8]
 80a1436:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
 80a1438:	f001 fcd6 	bl	80a2de8 <_Z19__fetch_global_Wirev>
}
 80a143c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
 80a1440:	f001 bb44 	b.w	80a2acc <_ZN7TwoWire15endTransmissionEv>

080a1444 <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
 80a1444:	b510      	push	{r4, lr}
 80a1446:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
 80a1448:	21ae      	movs	r1, #174	; 0xae
 80a144a:	f7ff ffe3 	bl	80a1414 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
 80a144e:	2005      	movs	r0, #5
 80a1450:	f000 fd60 	bl	80a1f14 <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
 80a1454:	21af      	movs	r1, #175	; 0xaf
 80a1456:	4620      	mov	r0, r4
 80a1458:	f7ff ffdc 	bl	80a1414 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
 80a145c:	2005      	movs	r0, #5
 80a145e:	f000 fd59 	bl	80a1f14 <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
 80a1462:	4620      	mov	r0, r4
}
 80a1464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
 80a1468:	21a6      	movs	r1, #166	; 0xa6
 80a146a:	f7ff bfd3 	b.w	80a1414 <_ZN9SeeedOLED11sendCommandEh>

080a146e <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
 80a146e:	b510      	push	{r4, lr}
 80a1470:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
 80a1472:	2301      	movs	r3, #1
 80a1474:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
 80a1476:	2120      	movs	r1, #32
 80a1478:	f7ff ffcc 	bl	80a1414 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
 80a147c:	4620      	mov	r0, r4
}
 80a147e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
 80a1482:	2102      	movs	r1, #2
 80a1484:	f7ff bfc6 	b.w	80a1414 <_ZN9SeeedOLED11sendCommandEh>

080a1488 <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
 80a1488:	b538      	push	{r3, r4, r5, lr}
 80a148a:	4614      	mov	r4, r2
 80a148c:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
 80a148e:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
 80a1490:	00e4      	lsls	r4, r4, #3
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
 80a1492:	b2c9      	uxtb	r1, r1
 80a1494:	f7ff ffbe 	bl	80a1414 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
 80a1498:	f004 0108 	and.w	r1, r4, #8
 80a149c:	4628      	mov	r0, r5
 80a149e:	f7ff ffb9 	bl	80a1414 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
 80a14a2:	f3c4 1103 	ubfx	r1, r4, #4, #4
 80a14a6:	4628      	mov	r0, r5
}
 80a14a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
 80a14ac:	3110      	adds	r1, #16
 80a14ae:	f7ff bfb1 	b.w	80a1414 <_ZN9SeeedOLED11sendCommandEh>

080a14b2 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
 80a14b2:	b510      	push	{r4, lr}
 80a14b4:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
 80a14b6:	f001 fc97 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a14ba:	213c      	movs	r1, #60	; 0x3c
 80a14bc:	f001 faff 	bl	80a2abe <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
 80a14c0:	f001 fc92 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a14c4:	2140      	movs	r1, #64	; 0x40
 80a14c6:	f7ff ffa1 	bl	80a140c <_ZN7TwoWire5writeEi>
  Wire.write(Data);
 80a14ca:	f001 fc8d 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a14ce:	6803      	ldr	r3, [r0, #0]
 80a14d0:	4621      	mov	r1, r4
 80a14d2:	689b      	ldr	r3, [r3, #8]
 80a14d4:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
 80a14d6:	f001 fc87 	bl	80a2de8 <_Z19__fetch_global_Wirev>
}
 80a14da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
 80a14de:	f001 baf5 	b.w	80a2acc <_ZN7TwoWire15endTransmissionEv>
	...

080a14e4 <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
 80a14e4:	b570      	push	{r4, r5, r6, lr}
 80a14e6:	4606      	mov	r6, r0
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
 80a14e8:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
 80a14ec:	2b5f      	cmp	r3, #95	; 0x5f
 80a14ee:	4b0a      	ldr	r3, [pc, #40]	; (80a1518 <_ZN9SeeedOLED7putCharEh+0x34>)
 80a14f0:	bf88      	it	hi
 80a14f2:	2120      	movhi	r1, #32
 80a14f4:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80a14f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80a14fc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a1500:	4415      	add	r5, r2
 80a1502:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
 80a1506:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a150a:	4630      	mov	r0, r6
 80a150c:	f7ff ffd1 	bl	80a14b2 <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
 80a1510:	42a5      	cmp	r5, r4
 80a1512:	d1f8      	bne.n	80a1506 <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
 80a1514:	bd70      	pop	{r4, r5, r6, pc}
 80a1516:	bf00      	nop
 80a1518:	080a58f4 	.word	0x080a58f4

080a151c <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
 80a151c:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
 80a151e:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
 80a1520:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
 80a1522:	f7ff ff77 	bl	80a1414 <_ZN9SeeedOLED11sendCommandEh>
 80a1526:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
 80a1528:	2200      	movs	r2, #0
 80a152a:	b2f1      	uxtb	r1, r6
 80a152c:	4628      	mov	r0, r5
 80a152e:	f7ff ffab 	bl	80a1488 <_ZN9SeeedOLED9setTextXYEhh>
 80a1532:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
 80a1534:	2120      	movs	r1, #32
 80a1536:	4628      	mov	r0, r5
 80a1538:	3c01      	subs	r4, #1
 80a153a:	f7ff ffd3 	bl	80a14e4 <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
 80a153e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a1542:	d1f7      	bne.n	80a1534 <_ZN9SeeedOLED12clearDisplayEv+0x18>
 80a1544:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
 80a1546:	2e08      	cmp	r6, #8
 80a1548:	d1ee      	bne.n	80a1528 <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
 80a154a:	4628      	mov	r0, r5
 80a154c:	21af      	movs	r1, #175	; 0xaf
 80a154e:	f7ff ff61 	bl	80a1414 <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
 80a1552:	4622      	mov	r2, r4
 80a1554:	4621      	mov	r1, r4
 80a1556:	4628      	mov	r0, r5
}
 80a1558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
 80a155c:	f7ff bf94 	b.w	80a1488 <_ZN9SeeedOLED9setTextXYEhh>

080a1560 <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
 80a1560:	b570      	push	{r4, r5, r6, lr}
 80a1562:	4605      	mov	r5, r0
 80a1564:	460e      	mov	r6, r1
 80a1566:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
 80a1568:	b2e3      	uxtb	r3, r4
 80a156a:	5cf1      	ldrb	r1, [r6, r3]
 80a156c:	3401      	adds	r4, #1
 80a156e:	b119      	cbz	r1, 80a1578 <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
 80a1570:	4628      	mov	r0, r5
 80a1572:	f7ff ffb7 	bl	80a14e4 <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
 80a1576:	e7f7      	b.n	80a1568 <_ZN9SeeedOLED9putStringEPKc+0x8>
 80a1578:	bd70      	pop	{r4, r5, r6, pc}

080a157a <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
 80a157a:	b5f0      	push	{r4, r5, r6, r7, lr}
  unsigned char char_buffer[10] = "";
 80a157c:	2300      	movs	r3, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
 80a157e:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
 80a1580:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
 80a1582:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
 80a1584:	9301      	str	r3, [sp, #4]
 80a1586:	9302      	str	r3, [sp, #8]
 80a1588:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
 80a158c:	da07      	bge.n	80a159e <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
 80a158e:	212d      	movs	r1, #45	; 0x2d
 80a1590:	f7ff ffa8 	bl	80a14e4 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
 80a1594:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
 80a1596:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
 80a1598:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
 80a159a:	210a      	movs	r1, #10
 80a159c:	e005      	b.n	80a15aa <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
 80a159e:	d1fb      	bne.n	80a1598 <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
 80a15a0:	2130      	movs	r1, #48	; 0x30
 80a15a2:	f7ff ff9f 	bl	80a14e4 <_ZN9SeeedOLED7putCharEh>
    return f;
 80a15a6:	2001      	movs	r0, #1
 80a15a8:	e01d      	b.n	80a15e6 <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
 80a15aa:	aa04      	add	r2, sp, #16
 80a15ac:	1c65      	adds	r5, r4, #1
 80a15ae:	4414      	add	r4, r2
 80a15b0:	fb96 f2f1 	sdiv	r2, r6, r1
 80a15b4:	fb01 6612 	mls	r6, r1, r2, r6
 80a15b8:	b2ed      	uxtb	r5, r5
 80a15ba:	f804 6c0c 	strb.w	r6, [r4, #-12]
 80a15be:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
 80a15c0:	4616      	mov	r6, r2
 80a15c2:	2a00      	cmp	r2, #0
 80a15c4:	d1f1      	bne.n	80a15aa <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
 80a15c6:	442b      	add	r3, r5
 80a15c8:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
 80a15ca:	b15d      	cbz	r5, 80a15e4 <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
 80a15cc:	ab04      	add	r3, sp, #16
 80a15ce:	442b      	add	r3, r5
 80a15d0:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 80a15d4:	4638      	mov	r0, r7
 80a15d6:	3130      	adds	r1, #48	; 0x30
 80a15d8:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
 80a15da:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
 80a15dc:	f7ff ff82 	bl	80a14e4 <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
 80a15e0:	b2ed      	uxtb	r5, r5
 80a15e2:	e7f2      	b.n	80a15ca <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
 80a15e4:	4620      	mov	r0, r4
}
 80a15e6:	b005      	add	sp, #20
 80a15e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a15ea <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
 80a15ea:	21a6      	movs	r1, #166	; 0xa6
 80a15ec:	f7ff bf12 	b.w	80a1414 <_ZN9SeeedOLED11sendCommandEh>

080a15f0 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
 80a15f0:	f000 b800 	b.w	80a15f4 <HAL_Pin_Map>

080a15f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a15f4:	b508      	push	{r3, lr}
 80a15f6:	4b02      	ldr	r3, [pc, #8]	; (80a1600 <HAL_Pin_Map+0xc>)
 80a15f8:	681b      	ldr	r3, [r3, #0]
 80a15fa:	681b      	ldr	r3, [r3, #0]
 80a15fc:	9301      	str	r3, [sp, #4]
 80a15fe:	bd08      	pop	{r3, pc}
 80a1600:	080601b0 	.word	0x080601b0

080a1604 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1604:	b508      	push	{r3, lr}
 80a1606:	4b02      	ldr	r3, [pc, #8]	; (80a1610 <HAL_Validate_Pin_Function+0xc>)
 80a1608:	681b      	ldr	r3, [r3, #0]
 80a160a:	685b      	ldr	r3, [r3, #4]
 80a160c:	9301      	str	r3, [sp, #4]
 80a160e:	bd08      	pop	{r3, pc}
 80a1610:	080601b0 	.word	0x080601b0

080a1614 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1614:	b508      	push	{r3, lr}
 80a1616:	4b02      	ldr	r3, [pc, #8]	; (80a1620 <HAL_Pin_Mode+0xc>)
 80a1618:	681b      	ldr	r3, [r3, #0]
 80a161a:	689b      	ldr	r3, [r3, #8]
 80a161c:	9301      	str	r3, [sp, #4]
 80a161e:	bd08      	pop	{r3, pc}
 80a1620:	080601b0 	.word	0x080601b0

080a1624 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1624:	b508      	push	{r3, lr}
 80a1626:	4b02      	ldr	r3, [pc, #8]	; (80a1630 <HAL_Get_Pin_Mode+0xc>)
 80a1628:	681b      	ldr	r3, [r3, #0]
 80a162a:	68db      	ldr	r3, [r3, #12]
 80a162c:	9301      	str	r3, [sp, #4]
 80a162e:	bd08      	pop	{r3, pc}
 80a1630:	080601b0 	.word	0x080601b0

080a1634 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1634:	b508      	push	{r3, lr}
 80a1636:	4b02      	ldr	r3, [pc, #8]	; (80a1640 <HAL_GPIO_Write+0xc>)
 80a1638:	681b      	ldr	r3, [r3, #0]
 80a163a:	691b      	ldr	r3, [r3, #16]
 80a163c:	9301      	str	r3, [sp, #4]
 80a163e:	bd08      	pop	{r3, pc}
 80a1640:	080601b0 	.word	0x080601b0

080a1644 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1644:	b508      	push	{r3, lr}
 80a1646:	4b02      	ldr	r3, [pc, #8]	; (80a1650 <HAL_GPIO_Read+0xc>)
 80a1648:	681b      	ldr	r3, [r3, #0]
 80a164a:	695b      	ldr	r3, [r3, #20]
 80a164c:	9301      	str	r3, [sp, #4]
 80a164e:	bd08      	pop	{r3, pc}
 80a1650:	080601b0 	.word	0x080601b0

080a1654 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a1654:	b508      	push	{r3, lr}
 80a1656:	4b02      	ldr	r3, [pc, #8]	; (80a1660 <HAL_ADC_Read+0xc>)
 80a1658:	681b      	ldr	r3, [r3, #0]
 80a165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a165c:	9301      	str	r3, [sp, #4]
 80a165e:	bd08      	pop	{r3, pc}
 80a1660:	080601b0 	.word	0x080601b0

080a1664 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a1664:	b508      	push	{r3, lr}
 80a1666:	4b02      	ldr	r3, [pc, #8]	; (80a1670 <HAL_Pulse_In+0xc>)
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a166c:	9301      	str	r3, [sp, #4]
 80a166e:	bd08      	pop	{r3, pc}
 80a1670:	080601b0 	.word	0x080601b0

080a1674 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1674:	b508      	push	{r3, lr}
 80a1676:	4b02      	ldr	r3, [pc, #8]	; (80a1680 <HAL_SPI_Begin+0xc>)
 80a1678:	681b      	ldr	r3, [r3, #0]
 80a167a:	681b      	ldr	r3, [r3, #0]
 80a167c:	9301      	str	r3, [sp, #4]
 80a167e:	bd08      	pop	{r3, pc}
 80a1680:	080601b4 	.word	0x080601b4

080a1684 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1684:	b508      	push	{r3, lr}
 80a1686:	4b02      	ldr	r3, [pc, #8]	; (80a1690 <HAL_SPI_Send_Receive_Data+0xc>)
 80a1688:	681b      	ldr	r3, [r3, #0]
 80a168a:	695b      	ldr	r3, [r3, #20]
 80a168c:	9301      	str	r3, [sp, #4]
 80a168e:	bd08      	pop	{r3, pc}
 80a1690:	080601b4 	.word	0x080601b4

080a1694 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1694:	b508      	push	{r3, lr}
 80a1696:	4b02      	ldr	r3, [pc, #8]	; (80a16a0 <HAL_SPI_Init+0xc>)
 80a1698:	681b      	ldr	r3, [r3, #0]
 80a169a:	69db      	ldr	r3, [r3, #28]
 80a169c:	9301      	str	r3, [sp, #4]
 80a169e:	bd08      	pop	{r3, pc}
 80a16a0:	080601b4 	.word	0x080601b4

080a16a4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a16a4:	b508      	push	{r3, lr}
 80a16a6:	4b02      	ldr	r3, [pc, #8]	; (80a16b0 <HAL_SPI_Is_Enabled+0xc>)
 80a16a8:	681b      	ldr	r3, [r3, #0]
 80a16aa:	6a1b      	ldr	r3, [r3, #32]
 80a16ac:	9301      	str	r3, [sp, #4]
 80a16ae:	bd08      	pop	{r3, pc}
 80a16b0:	080601b4 	.word	0x080601b4

080a16b4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a16b4:	b508      	push	{r3, lr}
 80a16b6:	4b02      	ldr	r3, [pc, #8]	; (80a16c0 <HAL_SPI_Info+0xc>)
 80a16b8:	681b      	ldr	r3, [r3, #0]
 80a16ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	bd08      	pop	{r3, pc}
 80a16c0:	080601b4 	.word	0x080601b4

080a16c4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a16c4:	b508      	push	{r3, lr}
 80a16c6:	4b02      	ldr	r3, [pc, #8]	; (80a16d0 <HAL_SPI_Set_Settings+0xc>)
 80a16c8:	681b      	ldr	r3, [r3, #0]
 80a16ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a16cc:	9301      	str	r3, [sp, #4]
 80a16ce:	bd08      	pop	{r3, pc}
 80a16d0:	080601b4 	.word	0x080601b4

080a16d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a16d4:	b508      	push	{r3, lr}
 80a16d6:	4b02      	ldr	r3, [pc, #8]	; (80a16e0 <HAL_RNG_GetRandomNumber+0xc>)
 80a16d8:	681b      	ldr	r3, [r3, #0]
 80a16da:	685b      	ldr	r3, [r3, #4]
 80a16dc:	9301      	str	r3, [sp, #4]
 80a16de:	bd08      	pop	{r3, pc}
 80a16e0:	0806019c 	.word	0x0806019c

080a16e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a16e4:	b508      	push	{r3, lr}
 80a16e6:	4b02      	ldr	r3, [pc, #8]	; (80a16f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a16e8:	681b      	ldr	r3, [r3, #0]
 80a16ea:	695b      	ldr	r3, [r3, #20]
 80a16ec:	9301      	str	r3, [sp, #4]
 80a16ee:	bd08      	pop	{r3, pc}
 80a16f0:	0806019c 	.word	0x0806019c

080a16f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a16f4:	b508      	push	{r3, lr}
 80a16f6:	4b02      	ldr	r3, [pc, #8]	; (80a1700 <os_mutex_recursive_create+0xc>)
 80a16f8:	681b      	ldr	r3, [r3, #0]
 80a16fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a16fc:	9301      	str	r3, [sp, #4]
 80a16fe:	bd08      	pop	{r3, pc}
 80a1700:	080601d0 	.word	0x080601d0

080a1704 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1704:	b508      	push	{r3, lr}
 80a1706:	4b02      	ldr	r3, [pc, #8]	; (80a1710 <os_mutex_recursive_destroy+0xc>)
 80a1708:	681b      	ldr	r3, [r3, #0]
 80a170a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a170c:	9301      	str	r3, [sp, #4]
 80a170e:	bd08      	pop	{r3, pc}
 80a1710:	080601d0 	.word	0x080601d0

080a1714 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a1714:	b508      	push	{r3, lr}
 80a1716:	4b02      	ldr	r3, [pc, #8]	; (80a1720 <os_mutex_recursive_lock+0xc>)
 80a1718:	681b      	ldr	r3, [r3, #0]
 80a171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a171c:	9301      	str	r3, [sp, #4]
 80a171e:	bd08      	pop	{r3, pc}
 80a1720:	080601d0 	.word	0x080601d0

080a1724 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a1724:	b508      	push	{r3, lr}
 80a1726:	4b02      	ldr	r3, [pc, #8]	; (80a1730 <os_mutex_recursive_unlock+0xc>)
 80a1728:	681b      	ldr	r3, [r3, #0]
 80a172a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a172c:	9301      	str	r3, [sp, #4]
 80a172e:	bd08      	pop	{r3, pc}
 80a1730:	080601d0 	.word	0x080601d0

080a1734 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b02      	ldr	r3, [pc, #8]	; (80a1740 <HAL_USART_Init+0xc>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	699b      	ldr	r3, [r3, #24]
 80a173c:	9301      	str	r3, [sp, #4]
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	080601c4 	.word	0x080601c4

080a1744 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1744:	b508      	push	{r3, lr}
 80a1746:	4b02      	ldr	r3, [pc, #8]	; (80a1750 <HAL_USART_Write_Data+0xc>)
 80a1748:	681b      	ldr	r3, [r3, #0]
 80a174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a174c:	9301      	str	r3, [sp, #4]
 80a174e:	bd08      	pop	{r3, pc}
 80a1750:	080601c4 	.word	0x080601c4

080a1754 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1754:	b508      	push	{r3, lr}
 80a1756:	4b02      	ldr	r3, [pc, #8]	; (80a1760 <HAL_USART_Available_Data+0xc>)
 80a1758:	681b      	ldr	r3, [r3, #0]
 80a175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a175c:	9301      	str	r3, [sp, #4]
 80a175e:	bd08      	pop	{r3, pc}
 80a1760:	080601c4 	.word	0x080601c4

080a1764 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1764:	b508      	push	{r3, lr}
 80a1766:	4b02      	ldr	r3, [pc, #8]	; (80a1770 <HAL_USART_Read_Data+0xc>)
 80a1768:	681b      	ldr	r3, [r3, #0]
 80a176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a176c:	9301      	str	r3, [sp, #4]
 80a176e:	bd08      	pop	{r3, pc}
 80a1770:	080601c4 	.word	0x080601c4

080a1774 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <HAL_USART_Peek_Data+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601c4 	.word	0x080601c4

080a1784 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <HAL_USART_Flush_Data+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601c4 	.word	0x080601c4

080a1794 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b02      	ldr	r3, [pc, #8]	; (80a17a0 <HAL_USART_Is_Enabled+0xc>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a179c:	9301      	str	r3, [sp, #4]
 80a179e:	bd08      	pop	{r3, pc}
 80a17a0:	080601c4 	.word	0x080601c4

080a17a4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a17a4:	b508      	push	{r3, lr}
 80a17a6:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17ac:	9301      	str	r3, [sp, #4]
 80a17ae:	bd08      	pop	{r3, pc}
 80a17b0:	080601c4 	.word	0x080601c4

080a17b4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	4b02      	ldr	r3, [pc, #8]	; (80a17c0 <HAL_I2C_Begin+0xc>)
 80a17b8:	681b      	ldr	r3, [r3, #0]
 80a17ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a17bc:	9301      	str	r3, [sp, #4]
 80a17be:	bd08      	pop	{r3, pc}
 80a17c0:	080601ac 	.word	0x080601ac

080a17c4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <HAL_I2C_Begin_Transmission+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601ac 	.word	0x080601ac

080a17d4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <HAL_I2C_End_Transmission+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601ac 	.word	0x080601ac

080a17e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <HAL_I2C_Write_Data+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601ac 	.word	0x080601ac

080a17f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b02      	ldr	r3, [pc, #8]	; (80a1800 <HAL_I2C_Available_Data+0xc>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a17fc:	9301      	str	r3, [sp, #4]
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	080601ac 	.word	0x080601ac

080a1804 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1804:	b508      	push	{r3, lr}
 80a1806:	4b02      	ldr	r3, [pc, #8]	; (80a1810 <HAL_I2C_Read_Data+0xc>)
 80a1808:	681b      	ldr	r3, [r3, #0]
 80a180a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a180c:	9301      	str	r3, [sp, #4]
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	080601ac 	.word	0x080601ac

080a1814 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b02      	ldr	r3, [pc, #8]	; (80a1820 <HAL_I2C_Peek_Data+0xc>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a181c:	9301      	str	r3, [sp, #4]
 80a181e:	bd08      	pop	{r3, pc}
 80a1820:	080601ac 	.word	0x080601ac

080a1824 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <HAL_I2C_Flush_Data+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080601ac 	.word	0x080601ac

080a1834 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <HAL_I2C_Is_Enabled+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601ac 	.word	0x080601ac

080a1844 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b03      	ldr	r3, [pc, #12]	; (80a1854 <HAL_I2C_Init+0x10>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a184e:	9301      	str	r3, [sp, #4]
 80a1850:	bd08      	pop	{r3, pc}
 80a1852:	0000      	.short	0x0000
 80a1854:	080601ac 	.word	0x080601ac

080a1858 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80a1858:	b508      	push	{r3, lr}
 80a185a:	4b03      	ldr	r3, [pc, #12]	; (80a1868 <HAL_I2C_Request_Data_Ex+0x10>)
 80a185c:	681b      	ldr	r3, [r3, #0]
 80a185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1862:	9301      	str	r3, [sp, #4]
 80a1864:	bd08      	pop	{r3, pc}
 80a1866:	0000      	.short	0x0000
 80a1868:	080601ac 	.word	0x080601ac

080a186c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <HAL_USB_USART_Init+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	681b      	ldr	r3, [r3, #0]
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601d8 	.word	0x080601d8

080a187c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <HAL_USB_USART_Begin+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	685b      	ldr	r3, [r3, #4]
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601d8 	.word	0x080601d8

080a188c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a188c:	b508      	push	{r3, lr}
 80a188e:	4b02      	ldr	r3, [pc, #8]	; (80a1898 <HAL_USB_USART_Available_Data+0xc>)
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	691b      	ldr	r3, [r3, #16]
 80a1894:	9301      	str	r3, [sp, #4]
 80a1896:	bd08      	pop	{r3, pc}
 80a1898:	080601d8 	.word	0x080601d8

080a189c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a189c:	b508      	push	{r3, lr}
 80a189e:	4b02      	ldr	r3, [pc, #8]	; (80a18a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a18a0:	681b      	ldr	r3, [r3, #0]
 80a18a2:	695b      	ldr	r3, [r3, #20]
 80a18a4:	9301      	str	r3, [sp, #4]
 80a18a6:	bd08      	pop	{r3, pc}
 80a18a8:	080601d8 	.word	0x080601d8

080a18ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a18ac:	b508      	push	{r3, lr}
 80a18ae:	4b02      	ldr	r3, [pc, #8]	; (80a18b8 <HAL_USB_USART_Receive_Data+0xc>)
 80a18b0:	681b      	ldr	r3, [r3, #0]
 80a18b2:	699b      	ldr	r3, [r3, #24]
 80a18b4:	9301      	str	r3, [sp, #4]
 80a18b6:	bd08      	pop	{r3, pc}
 80a18b8:	080601d8 	.word	0x080601d8

080a18bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a18bc:	b508      	push	{r3, lr}
 80a18be:	4b02      	ldr	r3, [pc, #8]	; (80a18c8 <HAL_USB_USART_Send_Data+0xc>)
 80a18c0:	681b      	ldr	r3, [r3, #0]
 80a18c2:	69db      	ldr	r3, [r3, #28]
 80a18c4:	9301      	str	r3, [sp, #4]
 80a18c6:	bd08      	pop	{r3, pc}
 80a18c8:	080601d8 	.word	0x080601d8

080a18cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a18cc:	b508      	push	{r3, lr}
 80a18ce:	4b02      	ldr	r3, [pc, #8]	; (80a18d8 <HAL_USB_USART_Flush_Data+0xc>)
 80a18d0:	681b      	ldr	r3, [r3, #0]
 80a18d2:	6a1b      	ldr	r3, [r3, #32]
 80a18d4:	9301      	str	r3, [sp, #4]
 80a18d6:	bd08      	pop	{r3, pc}
 80a18d8:	080601d8 	.word	0x080601d8

080a18dc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a18dc:	b508      	push	{r3, lr}
 80a18de:	4b02      	ldr	r3, [pc, #8]	; (80a18e8 <inet_gethostbyname+0xc>)
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a18e4:	9301      	str	r3, [sp, #4]
 80a18e6:	bd08      	pop	{r3, pc}
 80a18e8:	080601c0 	.word	0x080601c0

080a18ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a18ec:	b508      	push	{r3, lr}
 80a18ee:	4b02      	ldr	r3, [pc, #8]	; (80a18f8 <set_system_mode+0xc>)
 80a18f0:	681b      	ldr	r3, [r3, #0]
 80a18f2:	685b      	ldr	r3, [r3, #4]
 80a18f4:	9301      	str	r3, [sp, #4]
 80a18f6:	bd08      	pop	{r3, pc}
 80a18f8:	080601a4 	.word	0x080601a4

080a18fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <system_delay_ms+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	695b      	ldr	r3, [r3, #20]
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	080601a4 	.word	0x080601a4

080a190c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b02      	ldr	r3, [pc, #8]	; (80a1918 <system_thread_set_state+0xc>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1914:	9301      	str	r3, [sp, #4]
 80a1916:	bd08      	pop	{r3, pc}
 80a1918:	080601a4 	.word	0x080601a4

080a191c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a191c:	b508      	push	{r3, lr}
 80a191e:	4b02      	ldr	r3, [pc, #8]	; (80a1928 <application_thread_current+0xc>)
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1924:	9301      	str	r3, [sp, #4]
 80a1926:	bd08      	pop	{r3, pc}
 80a1928:	080601a4 	.word	0x080601a4

080a192c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a192c:	b508      	push	{r3, lr}
 80a192e:	4b02      	ldr	r3, [pc, #8]	; (80a1938 <application_thread_invoke+0xc>)
 80a1930:	681b      	ldr	r3, [r3, #0]
 80a1932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1934:	9301      	str	r3, [sp, #4]
 80a1936:	bd08      	pop	{r3, pc}
 80a1938:	080601a4 	.word	0x080601a4

080a193c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a193c:	b508      	push	{r3, lr}
 80a193e:	4b03      	ldr	r3, [pc, #12]	; (80a194c <system_ctrl_set_app_request_handler+0x10>)
 80a1940:	681b      	ldr	r3, [r3, #0]
 80a1942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1946:	9301      	str	r3, [sp, #4]
 80a1948:	bd08      	pop	{r3, pc}
 80a194a:	0000      	.short	0x0000
 80a194c:	080601a4 	.word	0x080601a4

080a1950 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1950:	b508      	push	{r3, lr}
 80a1952:	4b03      	ldr	r3, [pc, #12]	; (80a1960 <system_ctrl_set_result+0x10>)
 80a1954:	681b      	ldr	r3, [r3, #0]
 80a1956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a195a:	9301      	str	r3, [sp, #4]
 80a195c:	bd08      	pop	{r3, pc}
 80a195e:	0000      	.short	0x0000
 80a1960:	080601a4 	.word	0x080601a4

080a1964 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1964:	b508      	push	{r3, lr}
 80a1966:	4b02      	ldr	r3, [pc, #8]	; (80a1970 <network_connect+0xc>)
 80a1968:	681b      	ldr	r3, [r3, #0]
 80a196a:	685b      	ldr	r3, [r3, #4]
 80a196c:	9301      	str	r3, [sp, #4]
 80a196e:	bd08      	pop	{r3, pc}
 80a1970:	080601c8 	.word	0x080601c8

080a1974 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1974:	b508      	push	{r3, lr}
 80a1976:	4b02      	ldr	r3, [pc, #8]	; (80a1980 <network_connecting+0xc>)
 80a1978:	681b      	ldr	r3, [r3, #0]
 80a197a:	689b      	ldr	r3, [r3, #8]
 80a197c:	9301      	str	r3, [sp, #4]
 80a197e:	bd08      	pop	{r3, pc}
 80a1980:	080601c8 	.word	0x080601c8

080a1984 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1984:	b508      	push	{r3, lr}
 80a1986:	4b02      	ldr	r3, [pc, #8]	; (80a1990 <network_disconnect+0xc>)
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	68db      	ldr	r3, [r3, #12]
 80a198c:	9301      	str	r3, [sp, #4]
 80a198e:	bd08      	pop	{r3, pc}
 80a1990:	080601c8 	.word	0x080601c8

080a1994 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1994:	b508      	push	{r3, lr}
 80a1996:	4b02      	ldr	r3, [pc, #8]	; (80a19a0 <network_ready+0xc>)
 80a1998:	681b      	ldr	r3, [r3, #0]
 80a199a:	691b      	ldr	r3, [r3, #16]
 80a199c:	9301      	str	r3, [sp, #4]
 80a199e:	bd08      	pop	{r3, pc}
 80a19a0:	080601c8 	.word	0x080601c8

080a19a4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a19a4:	b508      	push	{r3, lr}
 80a19a6:	4b02      	ldr	r3, [pc, #8]	; (80a19b0 <network_on+0xc>)
 80a19a8:	681b      	ldr	r3, [r3, #0]
 80a19aa:	695b      	ldr	r3, [r3, #20]
 80a19ac:	9301      	str	r3, [sp, #4]
 80a19ae:	bd08      	pop	{r3, pc}
 80a19b0:	080601c8 	.word	0x080601c8

080a19b4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a19b4:	b508      	push	{r3, lr}
 80a19b6:	4b02      	ldr	r3, [pc, #8]	; (80a19c0 <network_off+0xc>)
 80a19b8:	681b      	ldr	r3, [r3, #0]
 80a19ba:	699b      	ldr	r3, [r3, #24]
 80a19bc:	9301      	str	r3, [sp, #4]
 80a19be:	bd08      	pop	{r3, pc}
 80a19c0:	080601c8 	.word	0x080601c8

080a19c4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a19c4:	b508      	push	{r3, lr}
 80a19c6:	4b02      	ldr	r3, [pc, #8]	; (80a19d0 <network_listen+0xc>)
 80a19c8:	681b      	ldr	r3, [r3, #0]
 80a19ca:	69db      	ldr	r3, [r3, #28]
 80a19cc:	9301      	str	r3, [sp, #4]
 80a19ce:	bd08      	pop	{r3, pc}
 80a19d0:	080601c8 	.word	0x080601c8

080a19d4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b02      	ldr	r3, [pc, #8]	; (80a19e0 <network_listening+0xc>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	6a1b      	ldr	r3, [r3, #32]
 80a19dc:	9301      	str	r3, [sp, #4]
 80a19de:	bd08      	pop	{r3, pc}
 80a19e0:	080601c8 	.word	0x080601c8

080a19e4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a19e4:	b508      	push	{r3, lr}
 80a19e6:	4b02      	ldr	r3, [pc, #8]	; (80a19f0 <network_set_listen_timeout+0xc>)
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19ec:	9301      	str	r3, [sp, #4]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	080601c8 	.word	0x080601c8

080a19f4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a19f4:	b508      	push	{r3, lr}
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <network_get_listen_timeout+0xc>)
 80a19f8:	681b      	ldr	r3, [r3, #0]
 80a19fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a19fc:	9301      	str	r3, [sp, #4]
 80a19fe:	bd08      	pop	{r3, pc}
 80a1a00:	080601c8 	.word	0x080601c8

080a1a04 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1a04:	b508      	push	{r3, lr}
 80a1a06:	4b02      	ldr	r3, [pc, #8]	; (80a1a10 <spark_cloud_flag_connected+0xc>)
 80a1a08:	681b      	ldr	r3, [r3, #0]
 80a1a0a:	695b      	ldr	r3, [r3, #20]
 80a1a0c:	9301      	str	r3, [sp, #4]
 80a1a0e:	bd08      	pop	{r3, pc}
 80a1a10:	080601cc 	.word	0x080601cc

080a1a14 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1a14:	b508      	push	{r3, lr}
 80a1a16:	4b02      	ldr	r3, [pc, #8]	; (80a1a20 <spark_send_event+0xc>)
 80a1a18:	681b      	ldr	r3, [r3, #0]
 80a1a1a:	6a1b      	ldr	r3, [r3, #32]
 80a1a1c:	9301      	str	r3, [sp, #4]
 80a1a1e:	bd08      	pop	{r3, pc}
 80a1a20:	080601cc 	.word	0x080601cc

080a1a24 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1a24:	b508      	push	{r3, lr}
 80a1a26:	4b02      	ldr	r3, [pc, #8]	; (80a1a30 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1a28:	681b      	ldr	r3, [r3, #0]
 80a1a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1a2c:	9301      	str	r3, [sp, #4]
 80a1a2e:	bd08      	pop	{r3, pc}
 80a1a30:	080601cc 	.word	0x080601cc

080a1a34 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1a34:	b508      	push	{r3, lr}
 80a1a36:	4b02      	ldr	r3, [pc, #8]	; (80a1a40 <malloc+0xc>)
 80a1a38:	681b      	ldr	r3, [r3, #0]
 80a1a3a:	681b      	ldr	r3, [r3, #0]
 80a1a3c:	9301      	str	r3, [sp, #4]
 80a1a3e:	bd08      	pop	{r3, pc}
 80a1a40:	080601a0 	.word	0x080601a0

080a1a44 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1a44:	b508      	push	{r3, lr}
 80a1a46:	4b02      	ldr	r3, [pc, #8]	; (80a1a50 <free+0xc>)
 80a1a48:	681b      	ldr	r3, [r3, #0]
 80a1a4a:	685b      	ldr	r3, [r3, #4]
 80a1a4c:	9301      	str	r3, [sp, #4]
 80a1a4e:	bd08      	pop	{r3, pc}
 80a1a50:	080601a0 	.word	0x080601a0

080a1a54 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1a54:	b508      	push	{r3, lr}
 80a1a56:	4b02      	ldr	r3, [pc, #8]	; (80a1a60 <realloc+0xc>)
 80a1a58:	681b      	ldr	r3, [r3, #0]
 80a1a5a:	689b      	ldr	r3, [r3, #8]
 80a1a5c:	9301      	str	r3, [sp, #4]
 80a1a5e:	bd08      	pop	{r3, pc}
 80a1a60:	080601a0 	.word	0x080601a0

080a1a64 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1a64:	b508      	push	{r3, lr}
 80a1a66:	4b02      	ldr	r3, [pc, #8]	; (80a1a70 <vsnprintf+0xc>)
 80a1a68:	681b      	ldr	r3, [r3, #0]
 80a1a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1a6c:	9301      	str	r3, [sp, #4]
 80a1a6e:	bd08      	pop	{r3, pc}
 80a1a70:	080601a0 	.word	0x080601a0

080a1a74 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1a74:	b508      	push	{r3, lr}
 80a1a76:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <abort+0xc>)
 80a1a78:	681b      	ldr	r3, [r3, #0]
 80a1a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1a7c:	9301      	str	r3, [sp, #4]
 80a1a7e:	bd08      	pop	{r3, pc}
 80a1a80:	080601a0 	.word	0x080601a0

080a1a84 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1a84:	b508      	push	{r3, lr}
 80a1a86:	4b02      	ldr	r3, [pc, #8]	; (80a1a90 <_malloc_r+0xc>)
 80a1a88:	681b      	ldr	r3, [r3, #0]
 80a1a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a8c:	9301      	str	r3, [sp, #4]
 80a1a8e:	bd08      	pop	{r3, pc}
 80a1a90:	080601a0 	.word	0x080601a0

080a1a94 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a1a94:	b508      	push	{r3, lr}
 80a1a96:	4b02      	ldr	r3, [pc, #8]	; (80a1aa0 <__errno+0xc>)
 80a1a98:	681b      	ldr	r3, [r3, #0]
 80a1a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1a9c:	9301      	str	r3, [sp, #4]
 80a1a9e:	bd08      	pop	{r3, pc}
 80a1aa0:	080601a0 	.word	0x080601a0

080a1aa4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a1aa4:	6800      	ldr	r0, [r0, #0]
 80a1aa6:	f7ff be35 	b.w	80a1714 <os_mutex_recursive_lock>

080a1aaa <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1aaa:	6800      	ldr	r0, [r0, #0]
 80a1aac:	f7ff be3a 	b.w	80a1724 <os_mutex_recursive_unlock>

080a1ab0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1ab0:	b570      	push	{r4, r5, r6, lr}
 80a1ab2:	4604      	mov	r4, r0
 80a1ab4:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1ab6:	2500      	movs	r5, #0
 80a1ab8:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1abc:	f7ff fe1a 	bl	80a16f4 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1ac0:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1ac2:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a1ac4:	f7ff fde6 	bl	80a1694 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1ac8:	6065      	str	r5, [r4, #4]
}
 80a1aca:	4620      	mov	r0, r4
 80a1acc:	bd70      	pop	{r4, r5, r6, pc}

080a1ace <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a1ace:	b538      	push	{r3, r4, r5, lr}
 80a1ad0:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a1ad2:	f100 0408 	add.w	r4, r0, #8
 80a1ad6:	4620      	mov	r0, r4
 80a1ad8:	f7ff ffe4 	bl	80a1aa4 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1adc:	7828      	ldrb	r0, [r5, #0]
 80a1ade:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1ae2:	f7ff fdc7 	bl	80a1674 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a1ae6:	4620      	mov	r0, r4
 80a1ae8:	f7ff ffdf 	bl	80a1aaa <_ZN14RecursiveMutex6unlockEv>
 80a1aec:	bd38      	pop	{r3, r4, r5, pc}

080a1aee <_ZN8SPIClass14endTransactionEv>:

    return 0;
}

void SPIClass::endTransaction()
{
 80a1aee:	b508      	push	{r3, lr}
 80a1af0:	3008      	adds	r0, #8
 80a1af2:	f7ff ffda 	bl	80a1aaa <_ZN14RecursiveMutex6unlockEv>
 80a1af6:	bd08      	pop	{r3, pc}

080a1af8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a1af8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a1afa:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a1afc:	6018      	str	r0, [r3, #0]
 80a1afe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80a1b00:	6818      	ldr	r0, [r3, #0]
 80a1b02:	b2e5      	uxtb	r5, r4
 80a1b04:	4288      	cmp	r0, r1
 80a1b06:	d906      	bls.n	80a1b16 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1b08:	3401      	adds	r4, #1
 80a1b0a:	2c08      	cmp	r4, #8
 80a1b0c:	d002      	beq.n	80a1b14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a1b0e:	0840      	lsrs	r0, r0, #1
 80a1b10:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80a1b12:	e7f5      	b.n	80a1b00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1b14:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1b16:	4b02      	ldr	r3, [pc, #8]	; (80a1b20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1b18:	5d5b      	ldrb	r3, [r3, r5]
 80a1b1a:	7013      	strb	r3, [r2, #0]
 80a1b1c:	bd30      	pop	{r4, r5, pc}
 80a1b1e:	bf00      	nop
 80a1b20:	080a5bf4 	.word	0x080a5bf4

080a1b24 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a1b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1b28:	4680      	mov	r8, r0
 80a1b2a:	b08f      	sub	sp, #60	; 0x3c
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a1b2c:	3008      	adds	r0, #8
 80a1b2e:	460e      	mov	r6, r1
 80a1b30:	f7ff ffb8 	bl	80a1aa4 <_ZN14RecursiveMutex4lockEv>
    // Lock peripheral
    CHECK(lock());

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
 80a1b34:	f898 4000 	ldrb.w	r4, [r8]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1b38:	2214      	movs	r2, #20
 80a1b3a:	2100      	movs	r1, #0
 80a1b3c:	a809      	add	r0, sp, #36	; 0x24
 80a1b3e:	f003 fd54 	bl	80a55ea <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1b42:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 80a1b44:	4620      	mov	r0, r4
 80a1b46:	2200      	movs	r2, #0
 80a1b48:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1b4a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
 80a1b4e:	f7ff fdb1 	bl	80a16b4 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
 80a1b52:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a1b56:	b14c      	cbz	r4, 80a1b6c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a1b58:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a1b5c:	b92d      	cbnz	r5, 80a1b6a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a1b5e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80a1b60:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a1b64:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a1b68:	e003      	b.n	80a1b72 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a1b6a:	2400      	movs	r4, #0
 80a1b6c:	46a1      	mov	r9, r4
 80a1b6e:	4627      	mov	r7, r4
 80a1b70:	2501      	movs	r5, #1
 80a1b72:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1b74:	b10d      	cbz	r5, 80a1b7a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a1b76:	2b00      	cmp	r3, #0
 80a1b78:	d13f      	bne.n	80a1bfa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
      return true;

    if (default_ == other.default_ &&
 80a1b7a:	429d      	cmp	r5, r3
 80a1b7c:	d10b      	bne.n	80a1b96 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a1b7e:	68b2      	ldr	r2, [r6, #8]
 80a1b80:	42ba      	cmp	r2, r7
 80a1b82:	d108      	bne.n	80a1b96 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1b84:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1b88:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a1b8c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a1b90:	89b2      	ldrh	r2, [r6, #12]
 80a1b92:	4291      	cmp	r1, r2
 80a1b94:	d031      	beq.n	80a1bfa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
 80a1b96:	b13b      	cbz	r3, 80a1ba8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
 80a1b98:	2300      	movs	r3, #0
 80a1b9a:	f898 0000 	ldrb.w	r0, [r8]
 80a1b9e:	9301      	str	r3, [sp, #4]
 80a1ba0:	9300      	str	r3, [sp, #0]
 80a1ba2:	461a      	mov	r2, r3
 80a1ba4:	2101      	movs	r1, #1
 80a1ba6:	e016      	b.n	80a1bd6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb2>
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
 80a1ba8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
 80a1bac:	68b1      	ldr	r1, [r6, #8]
 80a1bae:	ab04      	add	r3, sp, #16
 80a1bb0:	f10d 020f 	add.w	r2, sp, #15
 80a1bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a1bb6:	f7ff ff9f 	bl	80a1af8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a1bba:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1bbc:	b105      	cbz	r5, 80a1bc0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x9c>
 80a1bbe:	b9c9      	cbnz	r1, 80a1bf4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd0>
      return true;

    if (default_ == other.default_ &&
 80a1bc0:	42a9      	cmp	r1, r5
 80a1bc2:	d00b      	beq.n	80a1bdc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xb8>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
 80a1bc4:	2400      	movs	r4, #0
 80a1bc6:	9401      	str	r4, [sp, #4]
 80a1bc8:	7b74      	ldrb	r4, [r6, #13]
 80a1bca:	7b33      	ldrb	r3, [r6, #12]
 80a1bcc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a1bd0:	f898 0000 	ldrb.w	r0, [r8]
 80a1bd4:	9400      	str	r4, [sp, #0]
 80a1bd6:	f7ff fd75 	bl	80a16c4 <HAL_SPI_Set_Settings>
 80a1bda:	e00e      	b.n	80a1bfa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd6>
 80a1bdc:	68b3      	ldr	r3, [r6, #8]
 80a1bde:	42bb      	cmp	r3, r7
 80a1be0:	d3f0      	bcc.n	80a1bc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1be2:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1be6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a1bea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1bee:	89b3      	ldrh	r3, [r6, #12]
 80a1bf0:	429a      	cmp	r2, r3
 80a1bf2:	d1e7      	bne.n	80a1bc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 80a1bf4:	9b04      	ldr	r3, [sp, #16]
 80a1bf6:	42bb      	cmp	r3, r7
 80a1bf8:	d1e4      	bne.n	80a1bc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa0>
            }
        }
    }

    return 0;
}
 80a1bfa:	2000      	movs	r0, #0
 80a1bfc:	b00f      	add	sp, #60	; 0x3c
 80a1bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a1c02 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1c02:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a1c04:	7800      	ldrb	r0, [r0, #0]
 80a1c06:	f7ff fd3d 	bl	80a1684 <HAL_SPI_Send_Receive_Data>
}
 80a1c0a:	b2c0      	uxtb	r0, r0
 80a1c0c:	bd08      	pop	{r3, pc}

080a1c0e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1c0e:	7800      	ldrb	r0, [r0, #0]
 80a1c10:	f7ff bd48 	b.w	80a16a4 <HAL_SPI_Is_Enabled>

080a1c14 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1c14:	b510      	push	{r4, lr}
 80a1c16:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1c18:	6800      	ldr	r0, [r0, #0]
 80a1c1a:	b118      	cbz	r0, 80a1c24 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a1c1c:	f7ff ff12 	bl	80a1a44 <free>
            wakeupSource_ = nullptr;
 80a1c20:	2300      	movs	r3, #0
 80a1c22:	6023      	str	r3, [r4, #0]
 80a1c24:	bd10      	pop	{r4, pc}

080a1c26 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1c26:	b510      	push	{r4, lr}
 80a1c28:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a1c2a:	f7ff fff3 	bl	80a1c14 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1c2e:	4620      	mov	r0, r4
 80a1c30:	bd10      	pop	{r4, pc}
	...

080a1c34 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1c38:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1c3a:	4c08      	ldr	r4, [pc, #32]	; (80a1c5c <_GLOBAL__sub_I_System+0x28>)
 80a1c3c:	2000      	movs	r0, #0
 80a1c3e:	6020      	str	r0, [r4, #0]
 80a1c40:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1c42:	71a0      	strb	r0, [r4, #6]
 80a1c44:	8120      	strh	r0, [r4, #8]
 80a1c46:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c48:	f7ff fe50 	bl	80a18ec <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1c4c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1c52:	4a03      	ldr	r2, [pc, #12]	; (80a1c60 <_GLOBAL__sub_I_System+0x2c>)
 80a1c54:	4903      	ldr	r1, [pc, #12]	; (80a1c64 <_GLOBAL__sub_I_System+0x30>)
 80a1c56:	f001 b8ed 	b.w	80a2e34 <__aeabi_atexit>
 80a1c5a:	bf00      	nop
 80a1c5c:	20000100 	.word	0x20000100
 80a1c60:	2000006c 	.word	0x2000006c
 80a1c64:	080a1c27 	.word	0x080a1c27

080a1c68 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1c68:	b510      	push	{r4, lr}
 80a1c6a:	4604      	mov	r4, r0
{
	free(buffer);
 80a1c6c:	6800      	ldr	r0, [r0, #0]
 80a1c6e:	f7ff fee9 	bl	80a1a44 <free>
}
 80a1c72:	4620      	mov	r0, r4
 80a1c74:	bd10      	pop	{r4, pc}

080a1c76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1c76:	b510      	push	{r4, lr}
 80a1c78:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1c7a:	6800      	ldr	r0, [r0, #0]
 80a1c7c:	b108      	cbz	r0, 80a1c82 <_ZN6String10invalidateEv+0xc>
 80a1c7e:	f7ff fee1 	bl	80a1a44 <free>
	buffer = NULL;
 80a1c82:	2300      	movs	r3, #0
 80a1c84:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1c86:	60a3      	str	r3, [r4, #8]
 80a1c88:	6063      	str	r3, [r4, #4]
 80a1c8a:	bd10      	pop	{r4, pc}

080a1c8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1c8c:	b538      	push	{r3, r4, r5, lr}
 80a1c8e:	4604      	mov	r4, r0
 80a1c90:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1c92:	6800      	ldr	r0, [r0, #0]
 80a1c94:	3101      	adds	r1, #1
 80a1c96:	f7ff fedd 	bl	80a1a54 <realloc>
	if (newbuffer) {
 80a1c9a:	b110      	cbz	r0, 80a1ca2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1c9c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1ca0:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1ca2:	bd38      	pop	{r3, r4, r5, pc}

080a1ca4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1ca4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1ca6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1ca8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1caa:	b113      	cbz	r3, 80a1cb2 <_ZN6String7reserveEj+0xe>
 80a1cac:	6843      	ldr	r3, [r0, #4]
 80a1cae:	428b      	cmp	r3, r1
 80a1cb0:	d207      	bcs.n	80a1cc2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1cb2:	4620      	mov	r0, r4
 80a1cb4:	f7ff ffea 	bl	80a1c8c <_ZN6String12changeBufferEj>
 80a1cb8:	b120      	cbz	r0, 80a1cc4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1cba:	68a3      	ldr	r3, [r4, #8]
 80a1cbc:	b90b      	cbnz	r3, 80a1cc2 <_ZN6String7reserveEj+0x1e>
 80a1cbe:	6822      	ldr	r2, [r4, #0]
 80a1cc0:	7013      	strb	r3, [r2, #0]
 80a1cc2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1cc4:	bd10      	pop	{r4, pc}

080a1cc6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1cc6:	b570      	push	{r4, r5, r6, lr}
 80a1cc8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1cca:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1ccc:	4604      	mov	r4, r0
 80a1cce:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1cd0:	f7ff ffe8 	bl	80a1ca4 <_ZN6String7reserveEj>
 80a1cd4:	b918      	cbnz	r0, 80a1cde <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1cd6:	4620      	mov	r0, r4
 80a1cd8:	f7ff ffcd 	bl	80a1c76 <_ZN6String10invalidateEv>
		return *this;
 80a1cdc:	e009      	b.n	80a1cf2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1cde:	462a      	mov	r2, r5
 80a1ce0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1ce2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1ce4:	6820      	ldr	r0, [r4, #0]
 80a1ce6:	f003 fc75 	bl	80a55d4 <memcpy>
	buffer[len] = 0;
 80a1cea:	6822      	ldr	r2, [r4, #0]
 80a1cec:	68a3      	ldr	r3, [r4, #8]
 80a1cee:	2100      	movs	r1, #0
 80a1cf0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1cf2:	4620      	mov	r0, r4
 80a1cf4:	bd70      	pop	{r4, r5, r6, pc}

080a1cf6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1cf6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1cf8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1cfa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1cfc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1cfe:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1d00:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d02:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1d04:	460d      	mov	r5, r1
 80a1d06:	b139      	cbz	r1, 80a1d18 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1d08:	4608      	mov	r0, r1
 80a1d0a:	f003 fcba 	bl	80a5682 <strlen>
 80a1d0e:	4629      	mov	r1, r5
 80a1d10:	4602      	mov	r2, r0
 80a1d12:	4620      	mov	r0, r4
 80a1d14:	f7ff ffd7 	bl	80a1cc6 <_ZN6String4copyEPKcj>
}
 80a1d18:	4620      	mov	r0, r4
 80a1d1a:	bd38      	pop	{r3, r4, r5, pc}

080a1d1c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1d1c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1d1e:	b510      	push	{r4, lr}
 80a1d20:	460b      	mov	r3, r1
 80a1d22:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1d24:	d007      	beq.n	80a1d36 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1d26:	6809      	ldr	r1, [r1, #0]
 80a1d28:	b119      	cbz	r1, 80a1d32 <_ZN6StringaSERKS_+0x16>
 80a1d2a:	689a      	ldr	r2, [r3, #8]
 80a1d2c:	f7ff ffcb 	bl	80a1cc6 <_ZN6String4copyEPKcj>
 80a1d30:	e001      	b.n	80a1d36 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1d32:	f7ff ffa0 	bl	80a1c76 <_ZN6String10invalidateEv>

	return *this;
}
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	bd10      	pop	{r4, pc}

080a1d3a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1d3a:	b510      	push	{r4, lr}
 80a1d3c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1d3e:	2300      	movs	r3, #0
 80a1d40:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1d42:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1d44:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d46:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1d48:	f7ff ffe8 	bl	80a1d1c <_ZN6StringaSERKS_>
}
 80a1d4c:	4620      	mov	r0, r4
 80a1d4e:	bd10      	pop	{r4, pc}

080a1d50 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1d50:	b538      	push	{r3, r4, r5, lr}
 80a1d52:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1d54:	460c      	mov	r4, r1
 80a1d56:	b141      	cbz	r1, 80a1d6a <_ZN6StringaSEPKc+0x1a>
 80a1d58:	4608      	mov	r0, r1
 80a1d5a:	f003 fc92 	bl	80a5682 <strlen>
 80a1d5e:	4621      	mov	r1, r4
 80a1d60:	4602      	mov	r2, r0
 80a1d62:	4628      	mov	r0, r5
 80a1d64:	f7ff ffaf 	bl	80a1cc6 <_ZN6String4copyEPKcj>
 80a1d68:	e001      	b.n	80a1d6e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1d6a:	f7ff ff84 	bl	80a1c76 <_ZN6String10invalidateEv>

	return *this;
}
 80a1d6e:	4628      	mov	r0, r5
 80a1d70:	bd38      	pop	{r3, r4, r5, pc}

080a1d72 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d74:	4606      	mov	r6, r0
 80a1d76:	460d      	mov	r5, r1
 80a1d78:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1d7a:	2400      	movs	r4, #0
  while (size--) {
 80a1d7c:	42bd      	cmp	r5, r7
 80a1d7e:	d00c      	beq.n	80a1d9a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1d80:	6833      	ldr	r3, [r6, #0]
 80a1d82:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1d86:	689b      	ldr	r3, [r3, #8]
 80a1d88:	4630      	mov	r0, r6
 80a1d8a:	4798      	blx	r3
     if (chunk>=0)
 80a1d8c:	2800      	cmp	r0, #0
 80a1d8e:	db01      	blt.n	80a1d94 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1d90:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1d92:	e7f3      	b.n	80a1d7c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1d94:	2c00      	cmp	r4, #0
 80a1d96:	bf08      	it	eq
 80a1d98:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1d9a:	4620      	mov	r0, r4
 80a1d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d9e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1d9e:	b570      	push	{r4, r5, r6, lr}
 80a1da0:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1da2:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1da4:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1da6:	b149      	cbz	r1, 80a1dbc <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1da8:	f003 fc6b 	bl	80a5682 <strlen>
 80a1dac:	682b      	ldr	r3, [r5, #0]
 80a1dae:	4602      	mov	r2, r0
 80a1db0:	4621      	mov	r1, r4
 80a1db2:	4628      	mov	r0, r5
    }
 80a1db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1db8:	68db      	ldr	r3, [r3, #12]
 80a1dba:	4718      	bx	r3
    }
 80a1dbc:	bd70      	pop	{r4, r5, r6, pc}

080a1dbe <_ZN5Print5printEPKc>:
 80a1dbe:	b508      	push	{r3, lr}
 80a1dc0:	f7ff ffed 	bl	80a1d9e <_ZN5Print5writeEPKc>
 80a1dc4:	bd08      	pop	{r3, pc}

080a1dc6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1dc6:	6803      	ldr	r3, [r0, #0]
 80a1dc8:	689b      	ldr	r3, [r3, #8]
 80a1dca:	4718      	bx	r3

080a1dcc <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1dcc:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1dce:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1dd0:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1dd2:	f7ff fff8 	bl	80a1dc6 <_ZN5Print5printEc>
  n += print('\n');
 80a1dd6:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1dd8:	4604      	mov	r4, r0
  n += print('\n');
 80a1dda:	4628      	mov	r0, r5
 80a1ddc:	f7ff fff3 	bl	80a1dc6 <_ZN5Print5printEc>
  return n;
}
 80a1de0:	4420      	add	r0, r4
 80a1de2:	bd38      	pop	{r3, r4, r5, pc}

080a1de4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1de4:	b538      	push	{r3, r4, r5, lr}
 80a1de6:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1de8:	f7ff ffd9 	bl	80a1d9e <_ZN5Print5writeEPKc>
 80a1dec:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1dee:	4628      	mov	r0, r5
 80a1df0:	f7ff ffec 	bl	80a1dcc <_ZN5Print7printlnEv>
  return n;
}
 80a1df4:	4420      	add	r0, r4
 80a1df6:	bd38      	pop	{r3, r4, r5, pc}

080a1df8 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1df8:	2a01      	cmp	r2, #1
 80a1dfa:	bf98      	it	ls
 80a1dfc:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1dfe:	b530      	push	{r4, r5, lr}
 80a1e00:	460b      	mov	r3, r1
 80a1e02:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1e04:	2100      	movs	r1, #0
 80a1e06:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1e0a:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a1e0e:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a1e12:	fb05 3312 	mls	r3, r5, r2, r3
 80a1e16:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1e18:	2b09      	cmp	r3, #9
 80a1e1a:	bf94      	ite	ls
 80a1e1c:	3330      	addls	r3, #48	; 0x30
 80a1e1e:	3337      	addhi	r3, #55	; 0x37
 80a1e20:	b2db      	uxtb	r3, r3
 80a1e22:	4621      	mov	r1, r4
 80a1e24:	f804 3901 	strb.w	r3, [r4], #-1
 80a1e28:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1e2a:	2d00      	cmp	r5, #0
 80a1e2c:	d1ef      	bne.n	80a1e0e <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1e2e:	f7ff ffb6 	bl	80a1d9e <_ZN5Print5writeEPKc>
}
 80a1e32:	b00b      	add	sp, #44	; 0x2c
 80a1e34:	bd30      	pop	{r4, r5, pc}

080a1e36 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a1e36:	b40c      	push	{r2, r3}
 80a1e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1e3c:	b087      	sub	sp, #28
 80a1e3e:	af00      	add	r7, sp, #0
 80a1e40:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a1e44:	f854 9b04 	ldr.w	r9, [r4], #4
 80a1e48:	4605      	mov	r5, r0
 80a1e4a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1e4c:	4623      	mov	r3, r4
 80a1e4e:	464a      	mov	r2, r9
 80a1e50:	2114      	movs	r1, #20
 80a1e52:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a1e54:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a1e56:	f7ff fe05 	bl	80a1a64 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a1e5a:	2813      	cmp	r0, #19
 80a1e5c:	d805      	bhi.n	80a1e6a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1e5e:	1d39      	adds	r1, r7, #4
 80a1e60:	4628      	mov	r0, r5
 80a1e62:	f7ff ff9c 	bl	80a1d9e <_ZN5Print5writeEPKc>
 80a1e66:	4604      	mov	r4, r0
 80a1e68:	e013      	b.n	80a1e92 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1e6a:	f100 0308 	add.w	r3, r0, #8
 80a1e6e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a1e72:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a1e74:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1e78:	1c41      	adds	r1, r0, #1
 80a1e7a:	4623      	mov	r3, r4
 80a1e7c:	464a      	mov	r2, r9
 80a1e7e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1e80:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a1e82:	f7ff fdef 	bl	80a1a64 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1e86:	4669      	mov	r1, sp
 80a1e88:	4628      	mov	r0, r5
 80a1e8a:	f7ff ff88 	bl	80a1d9e <_ZN5Print5writeEPKc>
 80a1e8e:	4604      	mov	r4, r0
 80a1e90:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a1e92:	b11e      	cbz	r6, 80a1e9c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a1e94:	4628      	mov	r0, r5
 80a1e96:	f7ff ff99 	bl	80a1dcc <_ZN5Print7printlnEv>
 80a1e9a:	4404      	add	r4, r0
    return n;
}
 80a1e9c:	4620      	mov	r0, r4
 80a1e9e:	371c      	adds	r7, #28
 80a1ea0:	46bd      	mov	sp, r7
 80a1ea2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1ea6:	b002      	add	sp, #8
 80a1ea8:	4770      	bx	lr

080a1eaa <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1eaa:	2300      	movs	r3, #0
 80a1eac:	461a      	mov	r2, r3
 80a1eae:	4619      	mov	r1, r3
 80a1eb0:	6840      	ldr	r0, [r0, #4]
 80a1eb2:	f7ff bd77 	b.w	80a19a4 <network_on>

080a1eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1eb6:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a1eb8:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1eba:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1ebc:	b17c      	cbz	r4, 80a1ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1ebe:	6863      	ldr	r3, [r4, #4]
 80a1ec0:	3b01      	subs	r3, #1
 80a1ec2:	6063      	str	r3, [r4, #4]
 80a1ec4:	b95b      	cbnz	r3, 80a1ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a1ec6:	6823      	ldr	r3, [r4, #0]
 80a1ec8:	4620      	mov	r0, r4
 80a1eca:	689b      	ldr	r3, [r3, #8]
 80a1ecc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1ece:	68a3      	ldr	r3, [r4, #8]
 80a1ed0:	3b01      	subs	r3, #1
 80a1ed2:	60a3      	str	r3, [r4, #8]
 80a1ed4:	b91b      	cbnz	r3, 80a1ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1ed6:	6823      	ldr	r3, [r4, #0]
 80a1ed8:	4620      	mov	r0, r4
 80a1eda:	68db      	ldr	r3, [r3, #12]
 80a1edc:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1ede:	4628      	mov	r0, r5
 80a1ee0:	bd38      	pop	{r3, r4, r5, pc}

080a1ee2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1ee2:	680b      	ldr	r3, [r1, #0]
 80a1ee4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1ee6:	b113      	cbz	r3, 80a1eee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1ee8:	685a      	ldr	r2, [r3, #4]
 80a1eea:	3201      	adds	r2, #1
 80a1eec:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1eee:	4770      	bx	lr

080a1ef0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1ef0:	4a01      	ldr	r2, [pc, #4]	; (80a1ef8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1ef2:	4b02      	ldr	r3, [pc, #8]	; (80a1efc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1ef4:	601a      	str	r2, [r3, #0]
 80a1ef6:	4770      	bx	lr
 80a1ef8:	080a5c72 	.word	0x080a5c72
 80a1efc:	2000010c 	.word	0x2000010c

080a1f00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1f00:	4b02      	ldr	r3, [pc, #8]	; (80a1f0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1f02:	681a      	ldr	r2, [r3, #0]
 80a1f04:	4b02      	ldr	r3, [pc, #8]	; (80a1f10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1f06:	601a      	str	r2, [r3, #0]
 80a1f08:	4770      	bx	lr
 80a1f0a:	bf00      	nop
 80a1f0c:	20000000 	.word	0x20000000
 80a1f10:	20000110 	.word	0x20000110

080a1f14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1f14:	2100      	movs	r1, #0
 80a1f16:	f7ff bcf1 	b.w	80a18fc <system_delay_ms>

080a1f1a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1f1a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1f1c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1f1e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1f20:	b113      	cbz	r3, 80a1f28 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1f22:	2203      	movs	r2, #3
 80a1f24:	4601      	mov	r1, r0
 80a1f26:	4798      	blx	r3
    }
 80a1f28:	4620      	mov	r0, r4
 80a1f2a:	bd10      	pop	{r4, pc}

080a1f2c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1f2c:	b510      	push	{r4, lr}
 80a1f2e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f30:	f7ff fff3 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>
 80a1f34:	4620      	mov	r0, r4
 80a1f36:	bd10      	pop	{r4, pc}

080a1f38 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1f38:	b513      	push	{r0, r1, r4, lr}
 80a1f3a:	460b      	mov	r3, r1
 80a1f3c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1f3e:	c803      	ldmia	r0, {r0, r1}
 80a1f40:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1f44:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1f48:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f4c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1f50:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1f54:	b002      	add	sp, #8
 80a1f56:	bd10      	pop	{r4, pc}

080a1f58 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f58:	4803      	ldr	r0, [pc, #12]	; (80a1f68 <_GLOBAL__sub_I_RGB+0x10>)
 80a1f5a:	2300      	movs	r3, #0
 80a1f5c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1f5e:	4a03      	ldr	r2, [pc, #12]	; (80a1f6c <_GLOBAL__sub_I_RGB+0x14>)
 80a1f60:	4903      	ldr	r1, [pc, #12]	; (80a1f70 <_GLOBAL__sub_I_RGB+0x18>)
 80a1f62:	f000 bf67 	b.w	80a2e34 <__aeabi_atexit>
 80a1f66:	bf00      	nop
 80a1f68:	20000114 	.word	0x20000114
 80a1f6c:	2000006c 	.word	0x2000006c
 80a1f70:	080a1f2d 	.word	0x080a1f2d

080a1f74 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1f74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1f76:	4b14      	ldr	r3, [pc, #80]	; (80a1fc8 <serialEventRun+0x54>)
 80a1f78:	b133      	cbz	r3, 80a1f88 <serialEventRun+0x14>
 80a1f7a:	f000 fc2f 	bl	80a27dc <_Z16_fetch_usbserialv>
 80a1f7e:	6803      	ldr	r3, [r0, #0]
 80a1f80:	691b      	ldr	r3, [r3, #16]
 80a1f82:	4798      	blx	r3
 80a1f84:	2800      	cmp	r0, #0
 80a1f86:	dc16      	bgt.n	80a1fb6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1f88:	4b10      	ldr	r3, [pc, #64]	; (80a1fcc <serialEventRun+0x58>)
 80a1f8a:	b133      	cbz	r3, 80a1f9a <serialEventRun+0x26>
 80a1f8c:	f000 fce4 	bl	80a2958 <_Z22__fetch_global_Serial1v>
 80a1f90:	6803      	ldr	r3, [r0, #0]
 80a1f92:	691b      	ldr	r3, [r3, #16]
 80a1f94:	4798      	blx	r3
 80a1f96:	2800      	cmp	r0, #0
 80a1f98:	dc10      	bgt.n	80a1fbc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1f9a:	4b0d      	ldr	r3, [pc, #52]	; (80a1fd0 <serialEventRun+0x5c>)
 80a1f9c:	b10b      	cbz	r3, 80a1fa2 <serialEventRun+0x2e>
 80a1f9e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1fa2:	4b0c      	ldr	r3, [pc, #48]	; (80a1fd4 <serialEventRun+0x60>)
 80a1fa4:	b17b      	cbz	r3, 80a1fc6 <serialEventRun+0x52>
 80a1fa6:	f000 fc55 	bl	80a2854 <_Z17_fetch_usbserial1v>
 80a1faa:	6803      	ldr	r3, [r0, #0]
 80a1fac:	691b      	ldr	r3, [r3, #16]
 80a1fae:	4798      	blx	r3
 80a1fb0:	2800      	cmp	r0, #0
 80a1fb2:	dc06      	bgt.n	80a1fc2 <serialEventRun+0x4e>
 80a1fb4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1fb6:	f3af 8000 	nop.w
 80a1fba:	e7e5      	b.n	80a1f88 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1fbc:	f3af 8000 	nop.w
 80a1fc0:	e7eb      	b.n	80a1f9a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1fc2:	f3af 8000 	nop.w
 80a1fc6:	bd08      	pop	{r3, pc}
	...

080a1fd8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1fd8:	b508      	push	{r3, lr}
	serialEventRun();
 80a1fda:	f7ff ffcb 	bl	80a1f74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1fde:	f7ff fb81 	bl	80a16e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1fe2:	4b01      	ldr	r3, [pc, #4]	; (80a1fe8 <_post_loop+0x10>)
 80a1fe4:	6018      	str	r0, [r3, #0]
 80a1fe6:	bd08      	pop	{r3, pc}
 80a1fe8:	20000598 	.word	0x20000598

080a1fec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1fec:	4802      	ldr	r0, [pc, #8]	; (80a1ff8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1fee:	4a03      	ldr	r2, [pc, #12]	; (80a1ffc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1ff0:	4903      	ldr	r1, [pc, #12]	; (80a2000 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1ff2:	1a12      	subs	r2, r2, r0
 80a1ff4:	f003 baee 	b.w	80a55d4 <memcpy>
 80a1ff8:	40024000 	.word	0x40024000
 80a1ffc:	40024004 	.word	0x40024004
 80a2000:	080a5ee8 	.word	0x080a5ee8

080a2004 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2004:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2006:	2300      	movs	r3, #0
 80a2008:	9300      	str	r3, [sp, #0]
 80a200a:	461a      	mov	r2, r3
 80a200c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2010:	f7ff fc9e 	bl	80a1950 <system_ctrl_set_result>
}
 80a2014:	b003      	add	sp, #12
 80a2016:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a201c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a201c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a201e:	8843      	ldrh	r3, [r0, #2]
 80a2020:	2b0a      	cmp	r3, #10
 80a2022:	d008      	beq.n	80a2036 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2024:	2b50      	cmp	r3, #80	; 0x50
 80a2026:	d109      	bne.n	80a203c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2028:	4b09      	ldr	r3, [pc, #36]	; (80a2050 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a202a:	681b      	ldr	r3, [r3, #0]
 80a202c:	b13b      	cbz	r3, 80a203e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a202e:	b003      	add	sp, #12
 80a2030:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2034:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2036:	f7ff ffe5 	bl	80a2004 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a203a:	e006      	b.n	80a204a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a203c:	2300      	movs	r3, #0
 80a203e:	9300      	str	r3, [sp, #0]
 80a2040:	461a      	mov	r2, r3
 80a2042:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2046:	f7ff fc83 	bl	80a1950 <system_ctrl_set_result>
        break;
    }
}
 80a204a:	b003      	add	sp, #12
 80a204c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2050:	20000124 	.word	0x20000124

080a2054 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2054:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2056:	4c10      	ldr	r4, [pc, #64]	; (80a2098 <module_user_init_hook+0x44>)
 80a2058:	4d10      	ldr	r5, [pc, #64]	; (80a209c <module_user_init_hook+0x48>)
 80a205a:	6823      	ldr	r3, [r4, #0]
 80a205c:	42ab      	cmp	r3, r5
 80a205e:	4b10      	ldr	r3, [pc, #64]	; (80a20a0 <module_user_init_hook+0x4c>)
 80a2060:	bf0c      	ite	eq
 80a2062:	2201      	moveq	r2, #1
 80a2064:	2200      	movne	r2, #0
 80a2066:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2068:	d002      	beq.n	80a2070 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a206a:	f7ff ffbf 	bl	80a1fec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a206e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2070:	f7ff fb30 	bl	80a16d4 <HAL_RNG_GetRandomNumber>
 80a2074:	4604      	mov	r4, r0
    srand(seed);
 80a2076:	f003 fac1 	bl	80a55fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a207a:	4b0a      	ldr	r3, [pc, #40]	; (80a20a4 <module_user_init_hook+0x50>)
 80a207c:	b113      	cbz	r3, 80a2084 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a207e:	4620      	mov	r0, r4
 80a2080:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2084:	2100      	movs	r1, #0
 80a2086:	4807      	ldr	r0, [pc, #28]	; (80a20a4 <module_user_init_hook+0x50>)
 80a2088:	f7ff fccc 	bl	80a1a24 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a208c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2090:	2100      	movs	r1, #0
 80a2092:	4805      	ldr	r0, [pc, #20]	; (80a20a8 <module_user_init_hook+0x54>)
 80a2094:	f7ff bc52 	b.w	80a193c <system_ctrl_set_app_request_handler>
 80a2098:	40024000 	.word	0x40024000
 80a209c:	9a271c1e 	.word	0x9a271c1e
 80a20a0:	20000128 	.word	0x20000128
 80a20a4:	00000000 	.word	0x00000000
 80a20a8:	080a201d 	.word	0x080a201d

080a20ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a20ac:	4770      	bx	lr

080a20ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a20ae:	2000      	movs	r0, #0
 80a20b0:	4770      	bx	lr

080a20b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a20b2:	b510      	push	{r4, lr}
 80a20b4:	4604      	mov	r4, r0
 80a20b6:	2110      	movs	r1, #16
 80a20b8:	f000 feca 	bl	80a2e50 <_ZdlPvj>
 80a20bc:	4620      	mov	r0, r4
 80a20be:	bd10      	pop	{r4, pc}

080a20c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a20c0:	b508      	push	{r3, lr}
      { delete this; }
 80a20c2:	b108      	cbz	r0, 80a20c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a20c4:	f7ff fff5 	bl	80a20b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a20c8:	bd08      	pop	{r3, pc}

080a20ca <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a20ca:	2200      	movs	r2, #0
 80a20cc:	6002      	str	r2, [r0, #0]
 80a20ce:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a20d2:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a20d4:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a20d6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a20da:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a20dc:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a20de:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a20e0:	680c      	ldr	r4, [r1, #0]
 80a20e2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a20e4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a20e6:	bd10      	pop	{r4, pc}

080a20e8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a20e8:	b510      	push	{r4, lr}
 80a20ea:	4604      	mov	r4, r0
    free((void*)msg_);
 80a20ec:	6800      	ldr	r0, [r0, #0]
 80a20ee:	f7ff fca9 	bl	80a1a44 <free>
}
 80a20f2:	4620      	mov	r0, r4
 80a20f4:	bd10      	pop	{r4, pc}

080a20f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a20f6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a20f8:	68c4      	ldr	r4, [r0, #12]
 80a20fa:	b1f4      	cbz	r4, 80a213a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a20fc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a20fe:	2b02      	cmp	r3, #2
 80a2100:	d103      	bne.n	80a210a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2102:	f104 000c 	add.w	r0, r4, #12
 80a2106:	f7ff ffef 	bl	80a20e8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a210a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a210c:	b135      	cbz	r5, 80a211c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a210e:	4628      	mov	r0, r5
 80a2110:	f7ff ff03 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>
 80a2114:	2110      	movs	r1, #16
 80a2116:	4628      	mov	r0, r5
 80a2118:	f000 fe9a 	bl	80a2e50 <_ZdlPvj>
 80a211c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a211e:	b135      	cbz	r5, 80a212e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2120:	4628      	mov	r0, r5
 80a2122:	f7ff fefa 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>
 80a2126:	2110      	movs	r1, #16
 80a2128:	4628      	mov	r0, r5
 80a212a:	f000 fe91 	bl	80a2e50 <_ZdlPvj>
 80a212e:	4620      	mov	r0, r4
 80a2130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2134:	2114      	movs	r1, #20
 80a2136:	f000 be8b 	b.w	80a2e50 <_ZdlPvj>
 80a213a:	bd38      	pop	{r3, r4, r5, pc}

080a213c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a213c:	b513      	push	{r0, r1, r4, lr}
 80a213e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2140:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a2144:	2300      	movs	r3, #0
 80a2146:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2148:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a214a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a214c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a214e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2150:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2152:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2154:	f7ff feaf 	bl	80a1eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2158:	4620      	mov	r0, r4
 80a215a:	b002      	add	sp, #8
 80a215c:	bd10      	pop	{r4, pc}

080a215e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a215e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2160:	460c      	mov	r4, r1
 80a2162:	4606      	mov	r6, r0
 80a2164:	460f      	mov	r7, r1
 80a2166:	f854 3b04 	ldr.w	r3, [r4], #4
 80a216a:	ad02      	add	r5, sp, #8
 80a216c:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a2170:	4621      	mov	r1, r4
 80a2172:	a801      	add	r0, sp, #4
 80a2174:	f7ff feb5 	bl	80a1ee2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a2178:	4629      	mov	r1, r5
 80a217a:	4630      	mov	r0, r6
 80a217c:	f7ff ffde 	bl	80a213c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2180:	a801      	add	r0, sp, #4
 80a2182:	f7ff fe98 	bl	80a1eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2186:	4620      	mov	r0, r4
 80a2188:	f7ff fe95 	bl	80a1eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a218c:	4638      	mov	r0, r7
 80a218e:	2108      	movs	r1, #8
 80a2190:	f000 fe5e 	bl	80a2e50 <_ZdlPvj>
        return p;
    }
 80a2194:	4630      	mov	r0, r6
 80a2196:	b003      	add	sp, #12
 80a2198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a219c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a219c:	b538      	push	{r3, r4, r5, lr}
 80a219e:	2300      	movs	r3, #0
 80a21a0:	4604      	mov	r4, r0
 80a21a2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a21a4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a21a6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a21a8:	f7fd ff79 	bl	80a009e <_Znwj>
 80a21ac:	b128      	cbz	r0, 80a21ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a21ae:	2301      	movs	r3, #1
 80a21b0:	6043      	str	r3, [r0, #4]
 80a21b2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a21b4:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a21b6:	60c5      	str	r5, [r0, #12]
 80a21b8:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a21ba:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a21bc:	4620      	mov	r0, r4
 80a21be:	bd38      	pop	{r3, r4, r5, pc}
 80a21c0:	080a5d0c 	.word	0x080a5d0c

080a21c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a21c4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a21c6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a21c8:	b90a      	cbnz	r2, 80a21ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a21ca:	f000 fe54 	bl	80a2e76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a21ce:	68c3      	ldr	r3, [r0, #12]
    }
 80a21d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a21d4:	4718      	bx	r3

080a21d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a21d6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a21d8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a21da:	f100 0110 	add.w	r1, r0, #16
 80a21de:	f7ff fff1 	bl	80a21c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a21e2:	bd08      	pop	{r3, pc}

080a21e4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a21e4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a21e6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a21e8:	b90a      	cbnz	r2, 80a21ee <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a21ea:	f000 fe44 	bl	80a2e76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a21ee:	68c3      	ldr	r3, [r0, #12]
    }
 80a21f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a21f4:	4718      	bx	r3

080a21f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a21f6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a21f8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a21fa:	f100 0110 	add.w	r1, r0, #16
 80a21fe:	f7ff fff1 	bl	80a21e4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2202:	bd08      	pop	{r3, pc}

080a2204 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2204:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2206:	2300      	movs	r3, #0
 80a2208:	6083      	str	r3, [r0, #8]
 80a220a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a220c:	4604      	mov	r4, r0
 80a220e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2210:	b12b      	cbz	r3, 80a221e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2212:	2202      	movs	r2, #2
 80a2214:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2216:	68eb      	ldr	r3, [r5, #12]
 80a2218:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a221a:	68ab      	ldr	r3, [r5, #8]
 80a221c:	60a3      	str	r3, [r4, #8]
	}
    }
 80a221e:	4620      	mov	r0, r4
 80a2220:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2224 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a2224:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2226:	b089      	sub	sp, #36	; 0x24
 80a2228:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a222a:	4668      	mov	r0, sp
 80a222c:	f7ff ff4d 	bl	80a20ca <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2230:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2234:	2300      	movs	r3, #0
 80a2236:	f88d 3008 	strb.w	r3, [sp, #8]
 80a223a:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a223e:	2b00      	cmp	r3, #0
 80a2240:	d103      	bne.n	80a224a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a2242:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a2246:	2900      	cmp	r1, #0
 80a2248:	d1f7      	bne.n	80a223a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a224a:	d002      	beq.n	80a2252 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a224c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2250:	e063      	b.n	80a231a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a2252:	f114 050c 	adds.w	r5, r4, #12
 80a2256:	d003      	beq.n	80a2260 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a2258:	4669      	mov	r1, sp
 80a225a:	4628      	mov	r0, r5
 80a225c:	f7ff ff35 	bl	80a20ca <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2260:	f3bf 8f5f 	dmb	sy
 80a2264:	2301      	movs	r3, #1
 80a2266:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2268:	f3bf 8f5f 	dmb	sy
 80a226c:	f104 0308 	add.w	r3, r4, #8
 80a2270:	2000      	movs	r0, #0
 80a2272:	e853 6f00 	ldrex	r6, [r3]
 80a2276:	e843 0200 	strex	r2, r0, [r3]
 80a227a:	2a00      	cmp	r2, #0
 80a227c:	d1f9      	bne.n	80a2272 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a227e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2282:	2e00      	cmp	r6, #0
 80a2284:	d049      	beq.n	80a231a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2286:	f7ff fb49 	bl	80a191c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a228a:	b120      	cbz	r0, 80a2296 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a228c:	4629      	mov	r1, r5
 80a228e:	4630      	mov	r0, r6
 80a2290:	f7ff ff98 	bl	80a21c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2294:	e03a      	b.n	80a230c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2296:	4631      	mov	r1, r6
 80a2298:	a802      	add	r0, sp, #8
 80a229a:	f7ff ffb3 	bl	80a2204 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a229e:	68e0      	ldr	r0, [r4, #12]
 80a22a0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a22a4:	b108      	cbz	r0, 80a22aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a22a6:	f003 f9d1 	bl	80a564c <strdup>
 80a22aa:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a22ac:	2010      	movs	r0, #16
 80a22ae:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a22b2:	f7fd fef4 	bl	80a009e <_Znwj>
 80a22b6:	4605      	mov	r5, r0
 80a22b8:	b1e8      	cbz	r0, 80a22f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a22ba:	2700      	movs	r7, #0
 80a22bc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a22be:	2018      	movs	r0, #24
 80a22c0:	f7fd feed 	bl	80a009e <_Znwj>
 80a22c4:	4604      	mov	r4, r0
 80a22c6:	b188      	cbz	r0, 80a22ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a22c8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a22ca:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a22cc:	a802      	add	r0, sp, #8
 80a22ce:	f7ff fe33 	bl	80a1f38 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a22d2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a22d4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a22d6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a22d8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a22da:	9204      	str	r2, [sp, #16]
 80a22dc:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a22de:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a22e0:	60e3      	str	r3, [r4, #12]
 80a22e2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a22e6:	9205      	str	r2, [sp, #20]
 80a22e8:	f7ff feef 	bl	80a20ca <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a22ec:	4b0d      	ldr	r3, [pc, #52]	; (80a2324 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a22ee:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a22f0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a22f2:	4b0d      	ldr	r3, [pc, #52]	; (80a2328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a22f4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a22f6:	a806      	add	r0, sp, #24
 80a22f8:	f7ff fef6 	bl	80a20e8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a22fc:	a802      	add	r0, sp, #8
 80a22fe:	f7ff fe0c 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2302:	2200      	movs	r2, #0
 80a2304:	4629      	mov	r1, r5
 80a2306:	4809      	ldr	r0, [pc, #36]	; (80a232c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a2308:	f7ff fb10 	bl	80a192c <application_thread_invoke>
 80a230c:	4630      	mov	r0, r6
 80a230e:	f7ff fe04 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2312:	2110      	movs	r1, #16
 80a2314:	4630      	mov	r0, r6
 80a2316:	f000 fd9b 	bl	80a2e50 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a231a:	4668      	mov	r0, sp
 80a231c:	f7ff fee4 	bl	80a20e8 <_ZN8particle5ErrorD1Ev>
    }
 80a2320:	b009      	add	sp, #36	; 0x24
 80a2322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2324:	080a21d7 	.word	0x080a21d7
 80a2328:	080a244d 	.word	0x080a244d
 80a232c:	080a29a5 	.word	0x080a29a5

080a2330 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2334:	b08b      	sub	sp, #44	; 0x2c
 80a2336:	4606      	mov	r6, r0
 80a2338:	460f      	mov	r7, r1
 80a233a:	4690      	mov	r8, r2
 80a233c:	4699      	mov	r9, r3
 80a233e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2342:	f7ff fb5f 	bl	80a1a04 <spark_cloud_flag_connected>
 80a2346:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a2348:	4683      	mov	fp, r0
 80a234a:	bb30      	cbnz	r0, 80a239a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a234c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2350:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2352:	a905      	add	r1, sp, #20
 80a2354:	4628      	mov	r0, r5
 80a2356:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a235a:	f7ff feb6 	bl	80a20ca <_ZN8particle5ErrorC1EOS0_>
 80a235e:	2014      	movs	r0, #20
 80a2360:	f7fd fe9d 	bl	80a009e <_Znwj>
 80a2364:	4604      	mov	r4, r0
 80a2366:	b158      	cbz	r0, 80a2380 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2368:	2302      	movs	r3, #2
 80a236a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a236c:	2301      	movs	r3, #1
 80a236e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2370:	f8c0 b004 	str.w	fp, [r0, #4]
 80a2374:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a2378:	4629      	mov	r1, r5
 80a237a:	300c      	adds	r0, #12
 80a237c:	f7ff fea5 	bl	80a20ca <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2380:	4630      	mov	r0, r6
 80a2382:	4621      	mov	r1, r4
 80a2384:	f840 4b04 	str.w	r4, [r0], #4
 80a2388:	f7ff ff08 	bl	80a219c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a238c:	4628      	mov	r0, r5
 80a238e:	f7ff feab 	bl	80a20e8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2392:	a805      	add	r0, sp, #20
 80a2394:	f7ff fea8 	bl	80a20e8 <_ZN8particle5ErrorD1Ev>
 80a2398:	e052      	b.n	80a2440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a239a:	2400      	movs	r4, #0
 80a239c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a239e:	2014      	movs	r0, #20
 80a23a0:	606c      	str	r4, [r5, #4]
 80a23a2:	60ac      	str	r4, [r5, #8]
 80a23a4:	9307      	str	r3, [sp, #28]
 80a23a6:	f7fd fe7a 	bl	80a009e <_Znwj>
 80a23aa:	4601      	mov	r1, r0
 80a23ac:	b118      	cbz	r0, 80a23b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a23ae:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a23b0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a23b2:	6044      	str	r4, [r0, #4]
 80a23b4:	6084      	str	r4, [r0, #8]
 80a23b6:	a804      	add	r0, sp, #16
 80a23b8:	9103      	str	r1, [sp, #12]
 80a23ba:	f7ff feef 	bl	80a219c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a23be:	4b22      	ldr	r3, [pc, #136]	; (80a2448 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a23c0:	2008      	movs	r0, #8
 80a23c2:	9308      	str	r3, [sp, #32]
 80a23c4:	f7fd fe6b 	bl	80a009e <_Znwj>
 80a23c8:	4604      	mov	r4, r0
 80a23ca:	b128      	cbz	r0, 80a23d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a23cc:	9b03      	ldr	r3, [sp, #12]
 80a23ce:	a904      	add	r1, sp, #16
 80a23d0:	f840 3b04 	str.w	r3, [r0], #4
 80a23d4:	f7ff fd85 	bl	80a1ee2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a23d8:	9500      	str	r5, [sp, #0]
 80a23da:	fa5f f38a 	uxtb.w	r3, sl
 80a23de:	464a      	mov	r2, r9
 80a23e0:	4641      	mov	r1, r8
 80a23e2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a23e4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a23e6:	f7ff fb15 	bl	80a1a14 <spark_send_event>
 80a23ea:	b920      	cbnz	r0, 80a23f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a23ec:	9b03      	ldr	r3, [sp, #12]
 80a23ee:	785b      	ldrb	r3, [r3, #1]
 80a23f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a23f4:	b183      	cbz	r3, 80a2418 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a23f6:	9b03      	ldr	r3, [sp, #12]
 80a23f8:	a904      	add	r1, sp, #16
 80a23fa:	a806      	add	r0, sp, #24
 80a23fc:	9305      	str	r3, [sp, #20]
 80a23fe:	f7ff fd70 	bl	80a1ee2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a2402:	a905      	add	r1, sp, #20
 80a2404:	4630      	mov	r0, r6
 80a2406:	f7ff fe99 	bl	80a213c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a240a:	a806      	add	r0, sp, #24
 80a240c:	f7ff fd53 	bl	80a1eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2410:	a804      	add	r0, sp, #16
 80a2412:	f7ff fd50 	bl	80a1eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2416:	e013      	b.n	80a2440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2418:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a241c:	a905      	add	r1, sp, #20
 80a241e:	a803      	add	r0, sp, #12
 80a2420:	9205      	str	r2, [sp, #20]
 80a2422:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2426:	f7ff fefd 	bl	80a2224 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a242a:	a805      	add	r0, sp, #20
 80a242c:	f7ff fe5c 	bl	80a20e8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2430:	a805      	add	r0, sp, #20
 80a2432:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2434:	f7ff fe93 	bl	80a215e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a2438:	a806      	add	r0, sp, #24
 80a243a:	f7ff fd3c 	bl	80a1eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a243e:	e7da      	b.n	80a23f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a2440:	4630      	mov	r0, r6
 80a2442:	b00b      	add	sp, #44	; 0x2c
 80a2444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2448:	080a25bd 	.word	0x080a25bd

080a244c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a244c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a244e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2450:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2452:	d006      	beq.n	80a2462 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a2454:	2a03      	cmp	r2, #3
 80a2456:	d017      	beq.n	80a2488 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a2458:	2a01      	cmp	r2, #1
 80a245a:	d122      	bne.n	80a24a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a245c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a245e:	6003      	str	r3, [r0, #0]
	      break;
 80a2460:	e01f      	b.n	80a24a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2462:	2018      	movs	r0, #24
 80a2464:	680e      	ldr	r6, [r1, #0]
 80a2466:	f7fd fe1a 	bl	80a009e <_Znwj>
 80a246a:	4605      	mov	r5, r0
 80a246c:	b150      	cbz	r0, 80a2484 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a246e:	4631      	mov	r1, r6
 80a2470:	f7ff fec8 	bl	80a2204 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2474:	6930      	ldr	r0, [r6, #16]
 80a2476:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a247a:	b108      	cbz	r0, 80a2480 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a247c:	f003 f8e6 	bl	80a564c <strdup>
 80a2480:	6128      	str	r0, [r5, #16]
 80a2482:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2484:	6025      	str	r5, [r4, #0]
 80a2486:	e00c      	b.n	80a24a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2488:	6804      	ldr	r4, [r0, #0]
 80a248a:	b154      	cbz	r4, 80a24a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a248c:	f104 0010 	add.w	r0, r4, #16
 80a2490:	f7ff fe2a 	bl	80a20e8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2494:	4620      	mov	r0, r4
 80a2496:	f7ff fd40 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a249a:	2118      	movs	r1, #24
 80a249c:	4620      	mov	r0, r4
 80a249e:	f000 fcd7 	bl	80a2e50 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a24a2:	2000      	movs	r0, #0
 80a24a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a24a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a24a6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a24a8:	2300      	movs	r3, #0
 80a24aa:	6083      	str	r3, [r0, #8]
 80a24ac:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a24ae:	4604      	mov	r4, r0
 80a24b0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a24b2:	b12b      	cbz	r3, 80a24c0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a24b4:	2202      	movs	r2, #2
 80a24b6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a24b8:	68eb      	ldr	r3, [r5, #12]
 80a24ba:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a24bc:	68ab      	ldr	r3, [r5, #8]
 80a24be:	60a3      	str	r3, [r4, #8]
	}
    }
 80a24c0:	4620      	mov	r0, r4
 80a24c2:	bd38      	pop	{r3, r4, r5, pc}

080a24c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a24c4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a24c6:	b570      	push	{r4, r5, r6, lr}
 80a24c8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a24ca:	d006      	beq.n	80a24da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a24cc:	2a03      	cmp	r2, #3
 80a24ce:	d011      	beq.n	80a24f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a24d0:	2a01      	cmp	r2, #1
 80a24d2:	d118      	bne.n	80a2506 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a24d4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a24d6:	6003      	str	r3, [r0, #0]
	      break;
 80a24d8:	e015      	b.n	80a2506 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a24da:	2014      	movs	r0, #20
 80a24dc:	680e      	ldr	r6, [r1, #0]
 80a24de:	f7fd fdde 	bl	80a009e <_Znwj>
 80a24e2:	4605      	mov	r5, r0
 80a24e4:	b120      	cbz	r0, 80a24f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a24e6:	4631      	mov	r1, r6
 80a24e8:	f7ff ffdd 	bl	80a24a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a24ec:	7c33      	ldrb	r3, [r6, #16]
 80a24ee:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a24f0:	6025      	str	r5, [r4, #0]
 80a24f2:	e008      	b.n	80a2506 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a24f4:	6804      	ldr	r4, [r0, #0]
 80a24f6:	b134      	cbz	r4, 80a2506 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a24f8:	4620      	mov	r0, r4
 80a24fa:	f7ff fd0e 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a24fe:	2114      	movs	r1, #20
 80a2500:	4620      	mov	r0, r4
 80a2502:	f000 fca5 	bl	80a2e50 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2506:	2000      	movs	r0, #0
 80a2508:	bd70      	pop	{r4, r5, r6, pc}
	...

080a250c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a250c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a250e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2510:	f3bf 8f5f 	dmb	sy
 80a2514:	b087      	sub	sp, #28
 80a2516:	2300      	movs	r3, #0
 80a2518:	e850 6f00 	ldrex	r6, [r0]
 80a251c:	e840 3200 	strex	r2, r3, [r0]
 80a2520:	2a00      	cmp	r2, #0
 80a2522:	d1f9      	bne.n	80a2518 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2524:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2528:	2e00      	cmp	r6, #0
 80a252a:	d03f      	beq.n	80a25ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a252c:	4618      	mov	r0, r3
 80a252e:	f7ff f9f5 	bl	80a191c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2532:	4607      	mov	r7, r0
 80a2534:	b120      	cbz	r0, 80a2540 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2536:	4621      	mov	r1, r4
 80a2538:	4630      	mov	r0, r6
 80a253a:	f7ff fe53 	bl	80a21e4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a253e:	e02e      	b.n	80a259e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2540:	4631      	mov	r1, r6
 80a2542:	a801      	add	r0, sp, #4
 80a2544:	f7ff ffaf 	bl	80a24a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2548:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a254a:	2010      	movs	r0, #16
 80a254c:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2550:	f7fd fda5 	bl	80a009e <_Znwj>
 80a2554:	4605      	mov	r5, r0
 80a2556:	b1d0      	cbz	r0, 80a258e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2558:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a255a:	2014      	movs	r0, #20
 80a255c:	f7fd fd9f 	bl	80a009e <_Znwj>
 80a2560:	4604      	mov	r4, r0
 80a2562:	b178      	cbz	r0, 80a2584 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2564:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2566:	4601      	mov	r1, r0
 80a2568:	a801      	add	r0, sp, #4
 80a256a:	f7ff fce5 	bl	80a1f38 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a256e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2570:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2572:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2574:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2576:	9203      	str	r2, [sp, #12]
 80a2578:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a257a:	60e3      	str	r3, [r4, #12]
 80a257c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2580:	9204      	str	r2, [sp, #16]
 80a2582:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2584:	4b0a      	ldr	r3, [pc, #40]	; (80a25b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2586:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2588:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a258a:	4b0a      	ldr	r3, [pc, #40]	; (80a25b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a258c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a258e:	a801      	add	r0, sp, #4
 80a2590:	f7ff fcc3 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2594:	2200      	movs	r2, #0
 80a2596:	4629      	mov	r1, r5
 80a2598:	4807      	ldr	r0, [pc, #28]	; (80a25b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a259a:	f7ff f9c7 	bl	80a192c <application_thread_invoke>
 80a259e:	4630      	mov	r0, r6
 80a25a0:	f7ff fcbb 	bl	80a1f1a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a25a4:	2110      	movs	r1, #16
 80a25a6:	4630      	mov	r0, r6
 80a25a8:	f000 fc52 	bl	80a2e50 <_ZdlPvj>
        }
    }
 80a25ac:	b007      	add	sp, #28
 80a25ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a25b0:	080a21f7 	.word	0x080a21f7
 80a25b4:	080a24c5 	.word	0x080a24c5
 80a25b8:	080a29a5 	.word	0x080a29a5

080a25bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a25bc:	b530      	push	{r4, r5, lr}
 80a25be:	4604      	mov	r4, r0
 80a25c0:	b085      	sub	sp, #20
 80a25c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a25c4:	4668      	mov	r0, sp
 80a25c6:	4611      	mov	r1, r2
 80a25c8:	f7ff fdc9 	bl	80a215e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a25cc:	b17c      	cbz	r4, 80a25ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a25ce:	b224      	sxth	r4, r4
 80a25d0:	4628      	mov	r0, r5
 80a25d2:	b10d      	cbz	r5, 80a25d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a25d4:	f003 f83a 	bl	80a564c <strdup>
 80a25d8:	9002      	str	r0, [sp, #8]
 80a25da:	a902      	add	r1, sp, #8
 80a25dc:	4668      	mov	r0, sp
 80a25de:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a25e2:	f7ff fe1f 	bl	80a2224 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a25e6:	a802      	add	r0, sp, #8
 80a25e8:	f7ff fd7e 	bl	80a20e8 <_ZN8particle5ErrorD1Ev>
 80a25ec:	e01d      	b.n	80a262a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a25ee:	f04f 0201 	mov.w	r2, #1
 80a25f2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a25f4:	f88d 4008 	strb.w	r4, [sp, #8]
 80a25f8:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a25fc:	42a3      	cmp	r3, r4
 80a25fe:	d103      	bne.n	80a2608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2600:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2604:	2900      	cmp	r1, #0
 80a2606:	d1f7      	bne.n	80a25f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2608:	d002      	beq.n	80a2610 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a260a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a260e:	e00c      	b.n	80a262a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a2610:	f110 010c 	adds.w	r1, r0, #12
 80a2614:	f04f 0301 	mov.w	r3, #1
 80a2618:	bf18      	it	ne
 80a261a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a261c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a2620:	3004      	adds	r0, #4
 80a2622:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2626:	f7ff ff71 	bl	80a250c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a262a:	a801      	add	r0, sp, #4
 80a262c:	f7ff fc43 	bl	80a1eb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2630:	b005      	add	sp, #20
 80a2632:	bd30      	pop	{r4, r5, pc}

080a2634 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2634:	4770      	bx	lr

080a2636 <_ZN9IPAddressD0Ev>:
 80a2636:	b510      	push	{r4, lr}
 80a2638:	4604      	mov	r4, r0
 80a263a:	2118      	movs	r1, #24
 80a263c:	f000 fc08 	bl	80a2e50 <_ZdlPvj>
 80a2640:	4620      	mov	r0, r4
 80a2642:	bd10      	pop	{r4, pc}

080a2644 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2646:	460f      	mov	r7, r1
 80a2648:	f100 0608 	add.w	r6, r0, #8
 80a264c:	1d05      	adds	r5, r0, #4
 80a264e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a2650:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2654:	220a      	movs	r2, #10
 80a2656:	4638      	mov	r0, r7
 80a2658:	f7ff fbce 	bl	80a1df8 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a265c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a265e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2660:	d007      	beq.n	80a2672 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2662:	2c00      	cmp	r4, #0
 80a2664:	d0f4      	beq.n	80a2650 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2666:	212e      	movs	r1, #46	; 0x2e
 80a2668:	4638      	mov	r0, r7
 80a266a:	f7ff fbac 	bl	80a1dc6 <_ZN5Print5printEc>
 80a266e:	4404      	add	r4, r0
 80a2670:	e7ee      	b.n	80a2650 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2672:	4620      	mov	r0, r4
 80a2674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2678 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2678:	b510      	push	{r4, lr}
 80a267a:	4604      	mov	r4, r0
 80a267c:	4b04      	ldr	r3, [pc, #16]	; (80a2690 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a267e:	2211      	movs	r2, #17
 80a2680:	f840 3b04 	str.w	r3, [r0], #4
 80a2684:	2100      	movs	r1, #0
 80a2686:	f002 ffb0 	bl	80a55ea <memset>
{
    clear();
}
 80a268a:	4620      	mov	r0, r4
 80a268c:	bd10      	pop	{r4, pc}
 80a268e:	bf00      	nop
 80a2690:	080a5d28 	.word	0x080a5d28

080a2694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2694:	4603      	mov	r3, r0
 80a2696:	4a07      	ldr	r2, [pc, #28]	; (80a26b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2698:	b510      	push	{r4, lr}
 80a269a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a269e:	f101 0210 	add.w	r2, r1, #16
 80a26a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a26a6:	4291      	cmp	r1, r2
 80a26a8:	f843 4b04 	str.w	r4, [r3], #4
 80a26ac:	d1f9      	bne.n	80a26a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a26ae:	780a      	ldrb	r2, [r1, #0]
 80a26b0:	701a      	strb	r2, [r3, #0]
}
 80a26b2:	bd10      	pop	{r4, pc}
 80a26b4:	080a5d28 	.word	0x080a5d28

080a26b8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a26b8:	4a02      	ldr	r2, [pc, #8]	; (80a26c4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a26ba:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a26bc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a26be:	2204      	movs	r2, #4
 80a26c0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a26c2:	4770      	bx	lr
 80a26c4:	080a5d28 	.word	0x080a5d28

080a26c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a26c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a26ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a26ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a26d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a26d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a26da:	2304      	movs	r3, #4
 80a26dc:	6041      	str	r1, [r0, #4]
 80a26de:	7503      	strb	r3, [r0, #20]
 80a26e0:	bd10      	pop	{r4, pc}
	...

080a26e4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a26e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a26e6:	4d04      	ldr	r5, [pc, #16]	; (80a26f8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a26e8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a26ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a26ee:	9500      	str	r5, [sp, #0]
 80a26f0:	f7ff ffea 	bl	80a26c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a26f4:	b003      	add	sp, #12
 80a26f6:	bd30      	pop	{r4, r5, pc}
 80a26f8:	080a5d28 	.word	0x080a5d28

080a26fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a26fc:	7441      	strb	r1, [r0, #17]
 80a26fe:	4770      	bx	lr

080a2700 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2700:	4770      	bx	lr

080a2702 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2702:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2704:	2100      	movs	r1, #0
 80a2706:	7c00      	ldrb	r0, [r0, #16]
 80a2708:	f7ff f8d0 	bl	80a18ac <HAL_USB_USART_Receive_Data>
}
 80a270c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2710:	bf28      	it	cs
 80a2712:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2716:	bd08      	pop	{r3, pc}

080a2718 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2718:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a271a:	2101      	movs	r1, #1
 80a271c:	7c00      	ldrb	r0, [r0, #16]
 80a271e:	f7ff f8c5 	bl	80a18ac <HAL_USB_USART_Receive_Data>
}
 80a2722:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2726:	bf28      	it	cs
 80a2728:	f04f 30ff 	movcs.w	r0, #4294967295
 80a272c:	bd08      	pop	{r3, pc}

080a272e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a272e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2730:	7c00      	ldrb	r0, [r0, #16]
 80a2732:	f7ff f8b3 	bl	80a189c <HAL_USB_USART_Available_Data_For_Write>
}
 80a2736:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a273a:	bd08      	pop	{r3, pc}

080a273c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a273c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a273e:	7c00      	ldrb	r0, [r0, #16]
 80a2740:	f7ff f8a4 	bl	80a188c <HAL_USB_USART_Available_Data>
}
 80a2744:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2748:	bd08      	pop	{r3, pc}

080a274a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a274a:	7c00      	ldrb	r0, [r0, #16]
 80a274c:	f7ff b8be 	b.w	80a18cc <HAL_USB_USART_Flush_Data>

080a2750 <_ZN9USBSerialD0Ev>:
 80a2750:	b510      	push	{r4, lr}
 80a2752:	4604      	mov	r4, r0
 80a2754:	2114      	movs	r1, #20
 80a2756:	f000 fb7b 	bl	80a2e50 <_ZdlPvj>
 80a275a:	4620      	mov	r0, r4
 80a275c:	bd10      	pop	{r4, pc}

080a275e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a275e:	b538      	push	{r3, r4, r5, lr}
 80a2760:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2762:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2764:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2766:	f7ff f899 	bl	80a189c <HAL_USB_USART_Available_Data_For_Write>
 80a276a:	2800      	cmp	r0, #0
 80a276c:	dc01      	bgt.n	80a2772 <_ZN9USBSerial5writeEh+0x14>
 80a276e:	7c60      	ldrb	r0, [r4, #17]
 80a2770:	b128      	cbz	r0, 80a277e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2772:	4629      	mov	r1, r5
 80a2774:	7c20      	ldrb	r0, [r4, #16]
 80a2776:	f7ff f8a1 	bl	80a18bc <HAL_USB_USART_Send_Data>
 80a277a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a277e:	bd38      	pop	{r3, r4, r5, pc}

080a2780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2780:	b510      	push	{r4, lr}
 80a2782:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2784:	2300      	movs	r3, #0
 80a2786:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a278c:	60a3      	str	r3, [r4, #8]
 80a278e:	4b05      	ldr	r3, [pc, #20]	; (80a27a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2790:	4608      	mov	r0, r1
 80a2792:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2794:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2796:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2798:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a279a:	4611      	mov	r1, r2
 80a279c:	f7ff f866 	bl	80a186c <HAL_USB_USART_Init>
}
 80a27a0:	4620      	mov	r0, r4
 80a27a2:	bd10      	pop	{r4, pc}
 80a27a4:	080a5d3c 	.word	0x080a5d3c

080a27a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a27a8:	2200      	movs	r2, #0
 80a27aa:	7c00      	ldrb	r0, [r0, #16]
 80a27ac:	f7ff b866 	b.w	80a187c <HAL_USB_USART_Begin>

080a27b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a27b0:	b510      	push	{r4, lr}
 80a27b2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a27b4:	2214      	movs	r2, #20
 80a27b6:	2100      	movs	r1, #0
 80a27b8:	f002 ff17 	bl	80a55ea <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a27bc:	4b05      	ldr	r3, [pc, #20]	; (80a27d4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a27be:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a27c0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a27c2:	4b05      	ldr	r3, [pc, #20]	; (80a27d8 <_Z19acquireSerialBufferv+0x28>)
 80a27c4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a27c6:	f240 1301 	movw	r3, #257	; 0x101
 80a27ca:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a27cc:	2381      	movs	r3, #129	; 0x81
 80a27ce:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a27d0:	bd10      	pop	{r4, pc}
 80a27d2:	bf00      	nop
 80a27d4:	200001b1 	.word	0x200001b1
 80a27d8:	20000130 	.word	0x20000130

080a27dc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a27dc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a27de:	4d0e      	ldr	r5, [pc, #56]	; (80a2818 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a27e0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a27e2:	a801      	add	r0, sp, #4
 80a27e4:	f7ff ffe4 	bl	80a27b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a27e8:	6829      	ldr	r1, [r5, #0]
 80a27ea:	f011 0401 	ands.w	r4, r1, #1
 80a27ee:	d110      	bne.n	80a2812 <_Z16_fetch_usbserialv+0x36>
 80a27f0:	4628      	mov	r0, r5
 80a27f2:	f7fd fc58 	bl	80a00a6 <__cxa_guard_acquire>
 80a27f6:	b160      	cbz	r0, 80a2812 <_Z16_fetch_usbserialv+0x36>
 80a27f8:	aa01      	add	r2, sp, #4
 80a27fa:	4621      	mov	r1, r4
 80a27fc:	4807      	ldr	r0, [pc, #28]	; (80a281c <_Z16_fetch_usbserialv+0x40>)
 80a27fe:	f7ff ffbf 	bl	80a2780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2802:	4628      	mov	r0, r5
 80a2804:	f7fd fc54 	bl	80a00b0 <__cxa_guard_release>
 80a2808:	4a05      	ldr	r2, [pc, #20]	; (80a2820 <_Z16_fetch_usbserialv+0x44>)
 80a280a:	4906      	ldr	r1, [pc, #24]	; (80a2824 <_Z16_fetch_usbserialv+0x48>)
 80a280c:	4803      	ldr	r0, [pc, #12]	; (80a281c <_Z16_fetch_usbserialv+0x40>)
 80a280e:	f000 fb11 	bl	80a2e34 <__aeabi_atexit>
	return _usbserial;
}
 80a2812:	4802      	ldr	r0, [pc, #8]	; (80a281c <_Z16_fetch_usbserialv+0x40>)
 80a2814:	b007      	add	sp, #28
 80a2816:	bd30      	pop	{r4, r5, pc}
 80a2818:	2000012c 	.word	0x2000012c
 80a281c:	200002b4 	.word	0x200002b4
 80a2820:	2000006c 	.word	0x2000006c
 80a2824:	080a2701 	.word	0x080a2701

080a2828 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2828:	b510      	push	{r4, lr}
 80a282a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a282c:	2214      	movs	r2, #20
 80a282e:	2100      	movs	r1, #0
 80a2830:	f002 fedb 	bl	80a55ea <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2834:	4b05      	ldr	r3, [pc, #20]	; (80a284c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2836:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2838:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a283a:	4b05      	ldr	r3, [pc, #20]	; (80a2850 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a283c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a283e:	f240 1301 	movw	r3, #257	; 0x101
 80a2842:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2844:	2381      	movs	r3, #129	; 0x81
 80a2846:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2848:	bd10      	pop	{r4, pc}
 80a284a:	bf00      	nop
 80a284c:	20000364 	.word	0x20000364
 80a2850:	200002cc 	.word	0x200002cc

080a2854 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2854:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2856:	4c0e      	ldr	r4, [pc, #56]	; (80a2890 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2858:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a285a:	a801      	add	r0, sp, #4
 80a285c:	f7ff ffe4 	bl	80a2828 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2860:	6823      	ldr	r3, [r4, #0]
 80a2862:	07db      	lsls	r3, r3, #31
 80a2864:	d410      	bmi.n	80a2888 <_Z17_fetch_usbserial1v+0x34>
 80a2866:	4620      	mov	r0, r4
 80a2868:	f7fd fc1d 	bl	80a00a6 <__cxa_guard_acquire>
 80a286c:	b160      	cbz	r0, 80a2888 <_Z17_fetch_usbserial1v+0x34>
 80a286e:	aa01      	add	r2, sp, #4
 80a2870:	2101      	movs	r1, #1
 80a2872:	4808      	ldr	r0, [pc, #32]	; (80a2894 <_Z17_fetch_usbserial1v+0x40>)
 80a2874:	f7ff ff84 	bl	80a2780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2878:	4620      	mov	r0, r4
 80a287a:	f7fd fc19 	bl	80a00b0 <__cxa_guard_release>
 80a287e:	4a06      	ldr	r2, [pc, #24]	; (80a2898 <_Z17_fetch_usbserial1v+0x44>)
 80a2880:	4906      	ldr	r1, [pc, #24]	; (80a289c <_Z17_fetch_usbserial1v+0x48>)
 80a2882:	4804      	ldr	r0, [pc, #16]	; (80a2894 <_Z17_fetch_usbserial1v+0x40>)
 80a2884:	f000 fad6 	bl	80a2e34 <__aeabi_atexit>
  return _usbserial1;
}
 80a2888:	4802      	ldr	r0, [pc, #8]	; (80a2894 <_Z17_fetch_usbserial1v+0x40>)
 80a288a:	b006      	add	sp, #24
 80a288c:	bd10      	pop	{r4, pc}
 80a288e:	bf00      	nop
 80a2890:	200002c8 	.word	0x200002c8
 80a2894:	20000350 	.word	0x20000350
 80a2898:	2000006c 	.word	0x2000006c
 80a289c:	080a2701 	.word	0x080a2701

080a28a0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a28a0:	4770      	bx	lr

080a28a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a28a2:	7441      	strb	r1, [r0, #17]
 80a28a4:	4770      	bx	lr

080a28a6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a28a6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a28a8:	7c00      	ldrb	r0, [r0, #16]
 80a28aa:	f7fe ff7b 	bl	80a17a4 <HAL_USART_Available_Data_For_Write>
}
 80a28ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a28b2:	bd08      	pop	{r3, pc}

080a28b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a28b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a28b6:	7c00      	ldrb	r0, [r0, #16]
 80a28b8:	f7fe ff4c 	bl	80a1754 <HAL_USART_Available_Data>
}
 80a28bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a28c0:	bd08      	pop	{r3, pc}

080a28c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a28c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a28c4:	7c00      	ldrb	r0, [r0, #16]
 80a28c6:	f7fe ff55 	bl	80a1774 <HAL_USART_Peek_Data>
}
 80a28ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a28ce:	bf28      	it	cs
 80a28d0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a28d4:	bd08      	pop	{r3, pc}

080a28d6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a28d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a28d8:	7c00      	ldrb	r0, [r0, #16]
 80a28da:	f7fe ff43 	bl	80a1764 <HAL_USART_Read_Data>
}
 80a28de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a28e2:	bf28      	it	cs
 80a28e4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a28e8:	bd08      	pop	{r3, pc}

080a28ea <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a28ea:	7c00      	ldrb	r0, [r0, #16]
 80a28ec:	f7fe bf4a 	b.w	80a1784 <HAL_USART_Flush_Data>

080a28f0 <_ZN11USARTSerialD0Ev>:
 80a28f0:	b510      	push	{r4, lr}
 80a28f2:	4604      	mov	r4, r0
 80a28f4:	2114      	movs	r1, #20
 80a28f6:	f000 faab 	bl	80a2e50 <_ZdlPvj>
 80a28fa:	4620      	mov	r0, r4
 80a28fc:	bd10      	pop	{r4, pc}

080a28fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a28fe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2900:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2902:	4604      	mov	r4, r0
 80a2904:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2906:	b925      	cbnz	r5, 80a2912 <_ZN11USARTSerial5writeEh+0x14>
 80a2908:	7c00      	ldrb	r0, [r0, #16]
 80a290a:	f7fe ff4b 	bl	80a17a4 <HAL_USART_Available_Data_For_Write>
 80a290e:	2800      	cmp	r0, #0
 80a2910:	dd05      	ble.n	80a291e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2912:	4631      	mov	r1, r6
 80a2914:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a291a:	f7fe bf13 	b.w	80a1744 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a291e:	4628      	mov	r0, r5
 80a2920:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2924 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2924:	b510      	push	{r4, lr}
 80a2926:	4604      	mov	r4, r0
 80a2928:	4608      	mov	r0, r1
 80a292a:	4611      	mov	r1, r2
 80a292c:	2200      	movs	r2, #0
 80a292e:	6062      	str	r2, [r4, #4]
 80a2930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2934:	60a2      	str	r2, [r4, #8]
 80a2936:	4a05      	ldr	r2, [pc, #20]	; (80a294c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2938:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a293a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a293c:	2201      	movs	r2, #1
 80a293e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2940:	461a      	mov	r2, r3
 80a2942:	f7fe fef7 	bl	80a1734 <HAL_USART_Init>
}
 80a2946:	4620      	mov	r0, r4
 80a2948:	bd10      	pop	{r4, pc}
 80a294a:	bf00      	nop
 80a294c:	080a5d6c 	.word	0x080a5d6c

080a2950 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2950:	7c00      	ldrb	r0, [r0, #16]
 80a2952:	f7fe bf1f 	b.w	80a1794 <HAL_USART_Is_Enabled>
	...

080a2958 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2958:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a295a:	4d0c      	ldr	r5, [pc, #48]	; (80a298c <_Z22__fetch_global_Serial1v+0x34>)
 80a295c:	6829      	ldr	r1, [r5, #0]
 80a295e:	f011 0401 	ands.w	r4, r1, #1
 80a2962:	d111      	bne.n	80a2988 <_Z22__fetch_global_Serial1v+0x30>
 80a2964:	4628      	mov	r0, r5
 80a2966:	f7fd fb9e 	bl	80a00a6 <__cxa_guard_acquire>
 80a296a:	b168      	cbz	r0, 80a2988 <_Z22__fetch_global_Serial1v+0x30>
 80a296c:	4a08      	ldr	r2, [pc, #32]	; (80a2990 <_Z22__fetch_global_Serial1v+0x38>)
 80a296e:	4621      	mov	r1, r4
 80a2970:	4b08      	ldr	r3, [pc, #32]	; (80a2994 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2972:	4809      	ldr	r0, [pc, #36]	; (80a2998 <_Z22__fetch_global_Serial1v+0x40>)
 80a2974:	f7ff ffd6 	bl	80a2924 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2978:	4628      	mov	r0, r5
 80a297a:	f7fd fb99 	bl	80a00b0 <__cxa_guard_release>
 80a297e:	4a07      	ldr	r2, [pc, #28]	; (80a299c <_Z22__fetch_global_Serial1v+0x44>)
 80a2980:	4907      	ldr	r1, [pc, #28]	; (80a29a0 <_Z22__fetch_global_Serial1v+0x48>)
 80a2982:	4805      	ldr	r0, [pc, #20]	; (80a2998 <_Z22__fetch_global_Serial1v+0x40>)
 80a2984:	f000 fa56 	bl	80a2e34 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2988:	4803      	ldr	r0, [pc, #12]	; (80a2998 <_Z22__fetch_global_Serial1v+0x40>)
 80a298a:	bd38      	pop	{r3, r4, r5, pc}
 80a298c:	20000500 	.word	0x20000500
 80a2990:	20000504 	.word	0x20000504
 80a2994:	2000047c 	.word	0x2000047c
 80a2998:	20000468 	.word	0x20000468
 80a299c:	2000006c 	.word	0x2000006c
 80a29a0:	080a28a1 	.word	0x080a28a1

080a29a4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a29a4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a29a6:	6883      	ldr	r3, [r0, #8]
 80a29a8:	4604      	mov	r4, r0
 80a29aa:	b90b      	cbnz	r3, 80a29b0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a29ac:	f000 fa63 	bl	80a2e76 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a29b0:	68c3      	ldr	r3, [r0, #12]
 80a29b2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a29b4:	68a3      	ldr	r3, [r4, #8]
 80a29b6:	b11b      	cbz	r3, 80a29c0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a29b8:	2203      	movs	r2, #3
 80a29ba:	4621      	mov	r1, r4
 80a29bc:	4620      	mov	r0, r4
 80a29be:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a29c0:	4620      	mov	r0, r4
}
 80a29c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a29c6:	2110      	movs	r1, #16
 80a29c8:	f000 ba42 	b.w	80a2e50 <_ZdlPvj>

080a29cc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a29cc:	4770      	bx	lr

080a29ce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a29ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29d0:	4606      	mov	r6, r0
 80a29d2:	4615      	mov	r5, r2
 80a29d4:	460c      	mov	r4, r1
 80a29d6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a29d8:	42bc      	cmp	r4, r7
 80a29da:	d006      	beq.n	80a29ea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a29dc:	6833      	ldr	r3, [r6, #0]
 80a29de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a29e2:	689b      	ldr	r3, [r3, #8]
 80a29e4:	4630      	mov	r0, r6
 80a29e6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a29e8:	e7f6      	b.n	80a29d8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a29ea:	4628      	mov	r0, r5
 80a29ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a29ee <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a29ee:	2200      	movs	r2, #0
 80a29f0:	7c00      	ldrb	r0, [r0, #16]
 80a29f2:	f7fe bef7 	b.w	80a17e4 <HAL_I2C_Write_Data>

080a29f6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a29f6:	2100      	movs	r1, #0
 80a29f8:	7c00      	ldrb	r0, [r0, #16]
 80a29fa:	f7fe befb 	b.w	80a17f4 <HAL_I2C_Available_Data>

080a29fe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a29fe:	2100      	movs	r1, #0
 80a2a00:	7c00      	ldrb	r0, [r0, #16]
 80a2a02:	f7fe beff 	b.w	80a1804 <HAL_I2C_Read_Data>

080a2a06 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2a06:	2100      	movs	r1, #0
 80a2a08:	7c00      	ldrb	r0, [r0, #16]
 80a2a0a:	f7fe bf03 	b.w	80a1814 <HAL_I2C_Peek_Data>

080a2a0e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2a0e:	2100      	movs	r1, #0
 80a2a10:	7c00      	ldrb	r0, [r0, #16]
 80a2a12:	f7fe bf07 	b.w	80a1824 <HAL_I2C_Flush_Data>

080a2a16 <_ZN7TwoWireD0Ev>:
 80a2a16:	b510      	push	{r4, lr}
 80a2a18:	4604      	mov	r4, r0
 80a2a1a:	2114      	movs	r1, #20
 80a2a1c:	f000 fa18 	bl	80a2e50 <_ZdlPvj>
 80a2a20:	4620      	mov	r0, r4
 80a2a22:	bd10      	pop	{r4, pc}

080a2a24 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2a24:	b510      	push	{r4, lr}
 80a2a26:	4604      	mov	r4, r0
 80a2a28:	2300      	movs	r3, #0
 80a2a2a:	6063      	str	r3, [r4, #4]
 80a2a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2a30:	60a3      	str	r3, [r4, #8]
 80a2a32:	4b04      	ldr	r3, [pc, #16]	; (80a2a44 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a2a34:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2a36:	4608      	mov	r0, r1
 80a2a38:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a2a3a:	4611      	mov	r1, r2
 80a2a3c:	f7fe ff02 	bl	80a1844 <HAL_I2C_Init>
}
 80a2a40:	4620      	mov	r0, r4
 80a2a42:	bd10      	pop	{r4, pc}
 80a2a44:	080a5d9c 	.word	0x080a5d9c

080a2a48 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2a48:	2300      	movs	r3, #0
 80a2a4a:	461a      	mov	r2, r3
 80a2a4c:	4619      	mov	r1, r3
 80a2a4e:	7c00      	ldrb	r0, [r0, #16]
 80a2a50:	f7fe beb0 	b.w	80a17b4 <HAL_I2C_Begin>

080a2a54 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a2a54:	b570      	push	{r4, r5, r6, lr}
 80a2a56:	460c      	mov	r4, r1
 80a2a58:	4606      	mov	r6, r0
 80a2a5a:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80a2a5c:	2514      	movs	r5, #20
 80a2a5e:	462a      	mov	r2, r5
 80a2a60:	2100      	movs	r1, #0
 80a2a62:	a801      	add	r0, sp, #4
 80a2a64:	f002 fdc1 	bl	80a55ea <memset>
 80a2a68:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80a2a6a:	2200      	movs	r2, #0
 80a2a6c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2a70:	6863      	ldr	r3, [r4, #4]
 80a2a72:	a901      	add	r1, sp, #4
 80a2a74:	9303      	str	r3, [sp, #12]
 80a2a76:	68e3      	ldr	r3, [r4, #12]
 80a2a78:	7c30      	ldrb	r0, [r6, #16]
 80a2a7a:	9304      	str	r3, [sp, #16]
 80a2a7c:	7a23      	ldrb	r3, [r4, #8]
 80a2a7e:	f8ad 5004 	strh.w	r5, [sp, #4]
 80a2a82:	9305      	str	r3, [sp, #20]
 80a2a84:	f7fe fee8 	bl	80a1858 <HAL_I2C_Request_Data_Ex>
}
 80a2a88:	b006      	add	sp, #24
 80a2a8a:	bd70      	pop	{r4, r5, r6, pc}

080a2a8c <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 80a2a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a2a8e:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a2a90:	f88d 1000 	strb.w	r1, [sp]
 80a2a94:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a2a98:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a2a9a:	bf18      	it	ne
 80a2a9c:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a2a9e:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 80a2aa0:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a2aa2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2aa6:	f7ff ffd5 	bl	80a2a54 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a2aaa:	b005      	add	sp, #20
 80a2aac:	f85d fb04 	ldr.w	pc, [sp], #4

080a2ab0 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 80a2ab0:	2301      	movs	r3, #1
 80a2ab2:	f7ff bfeb 	b.w	80a2a8c <_ZN7TwoWire11requestFromEhjh>

080a2ab6 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2ab6:	2200      	movs	r2, #0
 80a2ab8:	7c00      	ldrb	r0, [r0, #16]
 80a2aba:	f7fe be83 	b.w	80a17c4 <HAL_I2C_Begin_Transmission>

080a2abe <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a2abe:	b2c9      	uxtb	r1, r1
 80a2ac0:	f7ff bff9 	b.w	80a2ab6 <_ZN7TwoWire17beginTransmissionEh>

080a2ac4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2ac4:	2200      	movs	r2, #0
 80a2ac6:	7c00      	ldrb	r0, [r0, #16]
 80a2ac8:	f7fe be84 	b.w	80a17d4 <HAL_I2C_End_Transmission>

080a2acc <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2acc:	2101      	movs	r1, #1
 80a2ace:	f7ff bff9 	b.w	80a2ac4 <_ZN7TwoWire15endTransmissionEh>

080a2ad2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2ad2:	2100      	movs	r1, #0
 80a2ad4:	7c00      	ldrb	r0, [r0, #16]
 80a2ad6:	f7fe bead 	b.w	80a1834 <HAL_I2C_Is_Enabled>

080a2ada <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2ada:	2200      	movs	r2, #0
 80a2adc:	4611      	mov	r1, r2
 80a2ade:	6840      	ldr	r0, [r0, #4]
 80a2ae0:	f7fe bf58 	b.w	80a1994 <network_ready>

080a2ae4 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2ae6:	4616      	mov	r6, r2
 80a2ae8:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2aea:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2aec:	460f      	mov	r7, r1
 80a2aee:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2af0:	2100      	movs	r1, #0
 80a2af2:	a803      	add	r0, sp, #12
 80a2af4:	f002 fd79 	bl	80a55ea <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2af8:	4630      	mov	r0, r6
 80a2afa:	f002 fdc2 	bl	80a5682 <strlen>
 80a2afe:	2500      	movs	r5, #0
 80a2b00:	9500      	str	r5, [sp, #0]
 80a2b02:	b281      	uxth	r1, r0
 80a2b04:	687b      	ldr	r3, [r7, #4]
 80a2b06:	aa03      	add	r2, sp, #12
 80a2b08:	4630      	mov	r0, r6
 80a2b0a:	f7fe fee7 	bl	80a18dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2b0e:	b120      	cbz	r0, 80a2b1a <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2b10:	4629      	mov	r1, r5
 80a2b12:	4620      	mov	r0, r4
 80a2b14:	f7ff fdd0 	bl	80a26b8 <_ZN9IPAddressC1Em>
 80a2b18:	e003      	b.n	80a2b22 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2b1a:	a903      	add	r1, sp, #12
 80a2b1c:	4620      	mov	r0, r4
 80a2b1e:	f7ff fdb9 	bl	80a2694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2b22:	4620      	mov	r0, r4
 80a2b24:	b009      	add	sp, #36	; 0x24
 80a2b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2b28 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2b28:	2200      	movs	r2, #0
 80a2b2a:	4611      	mov	r1, r2
 80a2b2c:	6840      	ldr	r0, [r0, #4]
 80a2b2e:	f7fe bf51 	b.w	80a19d4 <network_listening>

080a2b32 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2b32:	2200      	movs	r2, #0
 80a2b34:	4611      	mov	r1, r2
 80a2b36:	6840      	ldr	r0, [r0, #4]
 80a2b38:	f7fe bf5c 	b.w	80a19f4 <network_get_listen_timeout>

080a2b3c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2b3c:	2200      	movs	r2, #0
 80a2b3e:	6840      	ldr	r0, [r0, #4]
 80a2b40:	f7fe bf50 	b.w	80a19e4 <network_set_listen_timeout>

080a2b44 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2b44:	2200      	movs	r2, #0
 80a2b46:	f081 0101 	eor.w	r1, r1, #1
 80a2b4a:	6840      	ldr	r0, [r0, #4]
 80a2b4c:	f7fe bf3a 	b.w	80a19c4 <network_listen>

080a2b50 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2b50:	2300      	movs	r3, #0
 80a2b52:	461a      	mov	r2, r3
 80a2b54:	4619      	mov	r1, r3
 80a2b56:	6840      	ldr	r0, [r0, #4]
 80a2b58:	f7fe bf2c 	b.w	80a19b4 <network_off>

080a2b5c <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2b5c:	2200      	movs	r2, #0
 80a2b5e:	4611      	mov	r1, r2
 80a2b60:	6840      	ldr	r0, [r0, #4]
 80a2b62:	f7fe bf07 	b.w	80a1974 <network_connecting>

080a2b66 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2b66:	2200      	movs	r2, #0
 80a2b68:	2102      	movs	r1, #2
 80a2b6a:	6840      	ldr	r0, [r0, #4]
 80a2b6c:	f7fe bf0a 	b.w	80a1984 <network_disconnect>

080a2b70 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2b70:	2300      	movs	r3, #0
 80a2b72:	461a      	mov	r2, r3
 80a2b74:	6840      	ldr	r0, [r0, #4]
 80a2b76:	f7fe bef5 	b.w	80a1964 <network_connect>
	...

080a2b7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2b7c:	4b02      	ldr	r3, [pc, #8]	; (80a2b88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2b7e:	2204      	movs	r2, #4
 80a2b80:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2b82:	4a02      	ldr	r2, [pc, #8]	; (80a2b8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2b84:	601a      	str	r2, [r3, #0]
 80a2b86:	4770      	bx	lr
 80a2b88:	20000588 	.word	0x20000588
 80a2b8c:	080a5dc4 	.word	0x080a5dc4

080a2b90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2b90:	2300      	movs	r3, #0
 80a2b92:	461a      	mov	r2, r3
 80a2b94:	6840      	ldr	r0, [r0, #4]
 80a2b96:	f7fe bee5 	b.w	80a1964 <network_connect>

080a2b9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2b9a:	2200      	movs	r2, #0
 80a2b9c:	2102      	movs	r1, #2
 80a2b9e:	6840      	ldr	r0, [r0, #4]
 80a2ba0:	f7fe bef0 	b.w	80a1984 <network_disconnect>

080a2ba4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2ba4:	2200      	movs	r2, #0
 80a2ba6:	4611      	mov	r1, r2
 80a2ba8:	6840      	ldr	r0, [r0, #4]
 80a2baa:	f7fe bee3 	b.w	80a1974 <network_connecting>

080a2bae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2bae:	2200      	movs	r2, #0
 80a2bb0:	4611      	mov	r1, r2
 80a2bb2:	6840      	ldr	r0, [r0, #4]
 80a2bb4:	f7fe beee 	b.w	80a1994 <network_ready>

080a2bb8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2bb8:	2300      	movs	r3, #0
 80a2bba:	461a      	mov	r2, r3
 80a2bbc:	4619      	mov	r1, r3
 80a2bbe:	6840      	ldr	r0, [r0, #4]
 80a2bc0:	f7fe bef0 	b.w	80a19a4 <network_on>

080a2bc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2bc4:	2300      	movs	r3, #0
 80a2bc6:	461a      	mov	r2, r3
 80a2bc8:	4619      	mov	r1, r3
 80a2bca:	6840      	ldr	r0, [r0, #4]
 80a2bcc:	f7fe bef2 	b.w	80a19b4 <network_off>

080a2bd0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2bd0:	2200      	movs	r2, #0
 80a2bd2:	f081 0101 	eor.w	r1, r1, #1
 80a2bd6:	6840      	ldr	r0, [r0, #4]
 80a2bd8:	f7fe bef4 	b.w	80a19c4 <network_listen>

080a2bdc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2bdc:	2200      	movs	r2, #0
 80a2bde:	6840      	ldr	r0, [r0, #4]
 80a2be0:	f7fe bf00 	b.w	80a19e4 <network_set_listen_timeout>

080a2be4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2be4:	2200      	movs	r2, #0
 80a2be6:	4611      	mov	r1, r2
 80a2be8:	6840      	ldr	r0, [r0, #4]
 80a2bea:	f7fe bf03 	b.w	80a19f4 <network_get_listen_timeout>

080a2bee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2bee:	2200      	movs	r2, #0
 80a2bf0:	4611      	mov	r1, r2
 80a2bf2:	6840      	ldr	r0, [r0, #4]
 80a2bf4:	f7fe beee 	b.w	80a19d4 <network_listening>

080a2bf8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2bf8:	b570      	push	{r4, r5, r6, lr}
 80a2bfa:	4616      	mov	r6, r2
 80a2bfc:	b08e      	sub	sp, #56	; 0x38
 80a2bfe:	4604      	mov	r4, r0
    IPAddress addr;
 80a2c00:	a808      	add	r0, sp, #32
 80a2c02:	f7ff fd39 	bl	80a2678 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2c06:	2211      	movs	r2, #17
 80a2c08:	2100      	movs	r1, #0
 80a2c0a:	a803      	add	r0, sp, #12
 80a2c0c:	f002 fced 	bl	80a55ea <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2c10:	4630      	mov	r0, r6
 80a2c12:	f002 fd36 	bl	80a5682 <strlen>
 80a2c16:	2500      	movs	r5, #0
 80a2c18:	4b0a      	ldr	r3, [pc, #40]	; (80a2c44 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2c1a:	9500      	str	r5, [sp, #0]
 80a2c1c:	b281      	uxth	r1, r0
 80a2c1e:	685b      	ldr	r3, [r3, #4]
 80a2c20:	aa03      	add	r2, sp, #12
 80a2c22:	4630      	mov	r0, r6
 80a2c24:	f7fe fe5a 	bl	80a18dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2c28:	b120      	cbz	r0, 80a2c34 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2c2a:	4629      	mov	r1, r5
 80a2c2c:	4620      	mov	r0, r4
 80a2c2e:	f7ff fd43 	bl	80a26b8 <_ZN9IPAddressC1Em>
 80a2c32:	e003      	b.n	80a2c3c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2c34:	a903      	add	r1, sp, #12
 80a2c36:	4620      	mov	r0, r4
 80a2c38:	f7ff fd2c 	bl	80a2694 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2c3c:	4620      	mov	r0, r4
 80a2c3e:	b00e      	add	sp, #56	; 0x38
 80a2c40:	bd70      	pop	{r4, r5, r6, pc}
 80a2c42:	bf00      	nop
 80a2c44:	20000588 	.word	0x20000588

080a2c48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2c48:	4b02      	ldr	r3, [pc, #8]	; (80a2c54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2c4a:	4a03      	ldr	r2, [pc, #12]	; (80a2c58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2c4c:	601a      	str	r2, [r3, #0]
 80a2c4e:	2200      	movs	r2, #0
 80a2c50:	605a      	str	r2, [r3, #4]
 80a2c52:	4770      	bx	lr
 80a2c54:	20000590 	.word	0x20000590
 80a2c58:	080a5df8 	.word	0x080a5df8

080a2c5c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2c5c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2c5e:	4e1a      	ldr	r6, [pc, #104]	; (80a2cc8 <pinAvailable+0x6c>)
 80a2c60:	4604      	mov	r4, r0
 80a2c62:	6831      	ldr	r1, [r6, #0]
 80a2c64:	f011 0501 	ands.w	r5, r1, #1
 80a2c68:	d10f      	bne.n	80a2c8a <pinAvailable+0x2e>
 80a2c6a:	4630      	mov	r0, r6
 80a2c6c:	f7fd fa1b 	bl	80a00a6 <__cxa_guard_acquire>
 80a2c70:	b158      	cbz	r0, 80a2c8a <pinAvailable+0x2e>
 80a2c72:	4629      	mov	r1, r5
 80a2c74:	4815      	ldr	r0, [pc, #84]	; (80a2ccc <pinAvailable+0x70>)
 80a2c76:	f7fe ff1b 	bl	80a1ab0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2c7a:	4630      	mov	r0, r6
 80a2c7c:	f7fd fa18 	bl	80a00b0 <__cxa_guard_release>
 80a2c80:	4a13      	ldr	r2, [pc, #76]	; (80a2cd0 <pinAvailable+0x74>)
 80a2c82:	4914      	ldr	r1, [pc, #80]	; (80a2cd4 <pinAvailable+0x78>)
 80a2c84:	4811      	ldr	r0, [pc, #68]	; (80a2ccc <pinAvailable+0x70>)
 80a2c86:	f000 f8d5 	bl	80a2e34 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a2c8a:	4810      	ldr	r0, [pc, #64]	; (80a2ccc <pinAvailable+0x70>)
 80a2c8c:	f7fe ffbf 	bl	80a1c0e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2c90:	b128      	cbz	r0, 80a2c9e <pinAvailable+0x42>
 80a2c92:	f1a4 030d 	sub.w	r3, r4, #13
 80a2c96:	2b02      	cmp	r3, #2
 80a2c98:	d801      	bhi.n	80a2c9e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a2c9a:	2000      	movs	r0, #0
 80a2c9c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2c9e:	f000 f8a3 	bl	80a2de8 <_Z19__fetch_global_Wirev>
 80a2ca2:	f7ff ff16 	bl	80a2ad2 <_ZN7TwoWire9isEnabledEv>
 80a2ca6:	b108      	cbz	r0, 80a2cac <pinAvailable+0x50>
 80a2ca8:	2c01      	cmp	r4, #1
 80a2caa:	d9f6      	bls.n	80a2c9a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2cac:	f7ff fe54 	bl	80a2958 <_Z22__fetch_global_Serial1v>
 80a2cb0:	f7ff fe4e 	bl	80a2950 <_ZN11USARTSerial9isEnabledEv>
 80a2cb4:	b118      	cbz	r0, 80a2cbe <pinAvailable+0x62>
 80a2cb6:	f1a4 0312 	sub.w	r3, r4, #18
 80a2cba:	2b01      	cmp	r3, #1
 80a2cbc:	d9ed      	bls.n	80a2c9a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2cbe:	2c17      	cmp	r4, #23
 80a2cc0:	bf8c      	ite	hi
 80a2cc2:	2000      	movhi	r0, #0
 80a2cc4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2cc6:	bd70      	pop	{r4, r5, r6, pc}
 80a2cc8:	200000ec 	.word	0x200000ec
 80a2ccc:	200000f0 	.word	0x200000f0
 80a2cd0:	2000006c 	.word	0x2000006c
 80a2cd4:	080a0759 	.word	0x080a0759

080a2cd8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2cd8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2cda:	b538      	push	{r3, r4, r5, lr}
 80a2cdc:	4604      	mov	r4, r0
 80a2cde:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ce0:	d80a      	bhi.n	80a2cf8 <pinMode+0x20>
 80a2ce2:	29ff      	cmp	r1, #255	; 0xff
 80a2ce4:	d008      	beq.n	80a2cf8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2ce6:	f7ff ffb9 	bl	80a2c5c <pinAvailable>
 80a2cea:	b128      	cbz	r0, 80a2cf8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2cec:	4629      	mov	r1, r5
 80a2cee:	4620      	mov	r0, r4
}
 80a2cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2cf4:	f7fe bc8e 	b.w	80a1614 <HAL_Pin_Mode>
 80a2cf8:	bd38      	pop	{r3, r4, r5, pc}

080a2cfa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2cfa:	b538      	push	{r3, r4, r5, lr}
 80a2cfc:	4604      	mov	r4, r0
 80a2cfe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2d00:	f7fe fc90 	bl	80a1624 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2d04:	28ff      	cmp	r0, #255	; 0xff
 80a2d06:	d010      	beq.n	80a2d2a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2d08:	2806      	cmp	r0, #6
 80a2d0a:	d804      	bhi.n	80a2d16 <digitalWrite+0x1c>
 80a2d0c:	234d      	movs	r3, #77	; 0x4d
 80a2d0e:	fa23 f000 	lsr.w	r0, r3, r0
 80a2d12:	07c3      	lsls	r3, r0, #31
 80a2d14:	d409      	bmi.n	80a2d2a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2d16:	4620      	mov	r0, r4
 80a2d18:	f7ff ffa0 	bl	80a2c5c <pinAvailable>
 80a2d1c:	b128      	cbz	r0, 80a2d2a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2d1e:	4629      	mov	r1, r5
 80a2d20:	4620      	mov	r0, r4
}
 80a2d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2d26:	f7fe bc85 	b.w	80a1634 <HAL_GPIO_Write>
 80a2d2a:	bd38      	pop	{r3, r4, r5, pc}

080a2d2c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2d2c:	b510      	push	{r4, lr}
 80a2d2e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2d30:	f7fe fc78 	bl	80a1624 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2d34:	3804      	subs	r0, #4
 80a2d36:	b2c0      	uxtb	r0, r0
 80a2d38:	2801      	cmp	r0, #1
 80a2d3a:	d908      	bls.n	80a2d4e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2d3c:	4620      	mov	r0, r4
 80a2d3e:	f7ff ff8d 	bl	80a2c5c <pinAvailable>
 80a2d42:	b120      	cbz	r0, 80a2d4e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2d44:	4620      	mov	r0, r4
}
 80a2d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2d4a:	f7fe bc7b 	b.w	80a1644 <HAL_GPIO_Read>
}
 80a2d4e:	2000      	movs	r0, #0
 80a2d50:	bd10      	pop	{r4, pc}

080a2d52 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2d52:	b510      	push	{r4, lr}
 80a2d54:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a2d56:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2d58:	bf9c      	itt	ls
 80a2d5a:	340a      	addls	r4, #10
 80a2d5c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2d5e:	4620      	mov	r0, r4
 80a2d60:	f7ff ff7c 	bl	80a2c5c <pinAvailable>
 80a2d64:	b150      	cbz	r0, 80a2d7c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2d66:	2103      	movs	r1, #3
 80a2d68:	4620      	mov	r0, r4
 80a2d6a:	f7fe fc4b 	bl	80a1604 <HAL_Validate_Pin_Function>
 80a2d6e:	2803      	cmp	r0, #3
 80a2d70:	d104      	bne.n	80a2d7c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2d72:	4620      	mov	r0, r4
}
 80a2d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2d78:	f7fe bc6c 	b.w	80a1654 <HAL_ADC_Read>
}
 80a2d7c:	2000      	movs	r0, #0
 80a2d7e:	bd10      	pop	{r4, pc}

080a2d80 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a2d80:	f7fe bc70 	b.w	80a1664 <HAL_Pulse_In>

080a2d84 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2d84:	b513      	push	{r0, r1, r4, lr}
 80a2d86:	4c08      	ldr	r4, [pc, #32]	; (80a2da8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2d88:	2300      	movs	r3, #0
 80a2d8a:	461a      	mov	r2, r3
 80a2d8c:	4619      	mov	r1, r3
 80a2d8e:	9300      	str	r3, [sp, #0]
 80a2d90:	4620      	mov	r0, r4
 80a2d92:	f7ff fca7 	bl	80a26e4 <_ZN9IPAddressC1Ehhhh>
 80a2d96:	4620      	mov	r0, r4
 80a2d98:	4a04      	ldr	r2, [pc, #16]	; (80a2dac <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2d9a:	4905      	ldr	r1, [pc, #20]	; (80a2db0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2d9c:	b002      	add	sp, #8
 80a2d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2da2:	f000 b847 	b.w	80a2e34 <__aeabi_atexit>
 80a2da6:	bf00      	nop
 80a2da8:	2000059c 	.word	0x2000059c
 80a2dac:	2000006c 	.word	0x2000006c
 80a2db0:	080a2635 	.word	0x080a2635

080a2db4 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a2db4:	b570      	push	{r4, r5, r6, lr}
 80a2db6:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2db8:	2514      	movs	r5, #20
 80a2dba:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2dbc:	4e09      	ldr	r6, [pc, #36]	; (80a2de4 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2dbe:	2100      	movs	r1, #0
 80a2dc0:	f002 fc13 	bl	80a55ea <memset>
 80a2dc4:	8025      	strh	r5, [r4, #0]
 80a2dc6:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2dc8:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2dca:	60a5      	str	r5, [r4, #8]
 80a2dcc:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2dce:	4628      	mov	r0, r5
 80a2dd0:	f000 f840 	bl	80a2e54 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2dd4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2dd6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2dd8:	4628      	mov	r0, r5
 80a2dda:	f000 f83b 	bl	80a2e54 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2dde:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2de0:	4620      	mov	r0, r4
 80a2de2:	bd70      	pop	{r4, r5, r6, pc}
 80a2de4:	080a5e24 	.word	0x080a5e24

080a2de8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2de8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2dea:	4d0e      	ldr	r5, [pc, #56]	; (80a2e24 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2dec:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2dee:	6829      	ldr	r1, [r5, #0]
 80a2df0:	f011 0401 	ands.w	r4, r1, #1
 80a2df4:	d113      	bne.n	80a2e1e <_Z19__fetch_global_Wirev+0x36>
 80a2df6:	4628      	mov	r0, r5
 80a2df8:	f7fd f955 	bl	80a00a6 <__cxa_guard_acquire>
 80a2dfc:	b178      	cbz	r0, 80a2e1e <_Z19__fetch_global_Wirev+0x36>
 80a2dfe:	a801      	add	r0, sp, #4
 80a2e00:	f7ff ffd8 	bl	80a2db4 <_Z17acquireWireBufferv>
 80a2e04:	aa01      	add	r2, sp, #4
 80a2e06:	4621      	mov	r1, r4
 80a2e08:	4807      	ldr	r0, [pc, #28]	; (80a2e28 <_Z19__fetch_global_Wirev+0x40>)
 80a2e0a:	f7ff fe0b 	bl	80a2a24 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a2e0e:	4628      	mov	r0, r5
 80a2e10:	f7fd f94e 	bl	80a00b0 <__cxa_guard_release>
 80a2e14:	4a05      	ldr	r2, [pc, #20]	; (80a2e2c <_Z19__fetch_global_Wirev+0x44>)
 80a2e16:	4906      	ldr	r1, [pc, #24]	; (80a2e30 <_Z19__fetch_global_Wirev+0x48>)
 80a2e18:	4803      	ldr	r0, [pc, #12]	; (80a2e28 <_Z19__fetch_global_Wirev+0x40>)
 80a2e1a:	f000 f80b 	bl	80a2e34 <__aeabi_atexit>
	return wire;
}
 80a2e1e:	4802      	ldr	r0, [pc, #8]	; (80a2e28 <_Z19__fetch_global_Wirev+0x40>)
 80a2e20:	b007      	add	sp, #28
 80a2e22:	bd30      	pop	{r4, r5, pc}
 80a2e24:	200005b4 	.word	0x200005b4
 80a2e28:	200005b8 	.word	0x200005b8
 80a2e2c:	2000006c 	.word	0x2000006c
 80a2e30:	080a29cd 	.word	0x080a29cd

080a2e34 <__aeabi_atexit>:
 80a2e34:	460b      	mov	r3, r1
 80a2e36:	4601      	mov	r1, r0
 80a2e38:	4618      	mov	r0, r3
 80a2e3a:	f002 bbbd 	b.w	80a55b8 <__cxa_atexit>
	...

080a2e40 <_ZSt15get_new_handlerv>:
 80a2e40:	4b02      	ldr	r3, [pc, #8]	; (80a2e4c <_ZSt15get_new_handlerv+0xc>)
 80a2e42:	6818      	ldr	r0, [r3, #0]
 80a2e44:	f3bf 8f5f 	dmb	sy
 80a2e48:	4770      	bx	lr
 80a2e4a:	bf00      	nop
 80a2e4c:	200005cc 	.word	0x200005cc

080a2e50 <_ZdlPvj>:
 80a2e50:	f7fd b927 	b.w	80a00a2 <_ZdlPv>

080a2e54 <_ZnajRKSt9nothrow_t>:
 80a2e54:	f000 b800 	b.w	80a2e58 <_ZnwjRKSt9nothrow_t>

080a2e58 <_ZnwjRKSt9nothrow_t>:
 80a2e58:	b510      	push	{r4, lr}
 80a2e5a:	2800      	cmp	r0, #0
 80a2e5c:	bf14      	ite	ne
 80a2e5e:	4604      	movne	r4, r0
 80a2e60:	2401      	moveq	r4, #1
 80a2e62:	4620      	mov	r0, r4
 80a2e64:	f7fe fde6 	bl	80a1a34 <malloc>
 80a2e68:	b920      	cbnz	r0, 80a2e74 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2e6a:	f7ff ffe9 	bl	80a2e40 <_ZSt15get_new_handlerv>
 80a2e6e:	b108      	cbz	r0, 80a2e74 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2e70:	4780      	blx	r0
 80a2e72:	e7f6      	b.n	80a2e62 <_ZnwjRKSt9nothrow_t+0xa>
 80a2e74:	bd10      	pop	{r4, pc}

080a2e76 <_ZSt25__throw_bad_function_callv>:
 80a2e76:	b508      	push	{r3, lr}
 80a2e78:	f7fe fdfc 	bl	80a1a74 <abort>

080a2e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2e7c:	4b18      	ldr	r3, [pc, #96]	; (80a2ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2e7e:	681a      	ldr	r2, [r3, #0]
 80a2e80:	07d1      	lsls	r1, r2, #31
 80a2e82:	bf5c      	itt	pl
 80a2e84:	2201      	movpl	r2, #1
 80a2e86:	601a      	strpl	r2, [r3, #0]
 80a2e88:	4b16      	ldr	r3, [pc, #88]	; (80a2ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2e8a:	681a      	ldr	r2, [r3, #0]
 80a2e8c:	07d2      	lsls	r2, r2, #31
 80a2e8e:	bf5c      	itt	pl
 80a2e90:	2201      	movpl	r2, #1
 80a2e92:	601a      	strpl	r2, [r3, #0]
 80a2e94:	4b14      	ldr	r3, [pc, #80]	; (80a2ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2e96:	681a      	ldr	r2, [r3, #0]
 80a2e98:	07d0      	lsls	r0, r2, #31
 80a2e9a:	bf5c      	itt	pl
 80a2e9c:	2201      	movpl	r2, #1
 80a2e9e:	601a      	strpl	r2, [r3, #0]
 80a2ea0:	4b12      	ldr	r3, [pc, #72]	; (80a2eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2ea2:	681a      	ldr	r2, [r3, #0]
 80a2ea4:	07d1      	lsls	r1, r2, #31
 80a2ea6:	bf5c      	itt	pl
 80a2ea8:	2201      	movpl	r2, #1
 80a2eaa:	601a      	strpl	r2, [r3, #0]
 80a2eac:	4b10      	ldr	r3, [pc, #64]	; (80a2ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2eae:	681a      	ldr	r2, [r3, #0]
 80a2eb0:	07d2      	lsls	r2, r2, #31
 80a2eb2:	bf5c      	itt	pl
 80a2eb4:	2201      	movpl	r2, #1
 80a2eb6:	601a      	strpl	r2, [r3, #0]
 80a2eb8:	4b0e      	ldr	r3, [pc, #56]	; (80a2ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2eba:	681a      	ldr	r2, [r3, #0]
 80a2ebc:	07d0      	lsls	r0, r2, #31
 80a2ebe:	bf5c      	itt	pl
 80a2ec0:	2201      	movpl	r2, #1
 80a2ec2:	601a      	strpl	r2, [r3, #0]
 80a2ec4:	4b0c      	ldr	r3, [pc, #48]	; (80a2ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2ec6:	681a      	ldr	r2, [r3, #0]
 80a2ec8:	07d1      	lsls	r1, r2, #31
 80a2eca:	bf5c      	itt	pl
 80a2ecc:	2201      	movpl	r2, #1
 80a2ece:	601a      	strpl	r2, [r3, #0]
 80a2ed0:	4b0a      	ldr	r3, [pc, #40]	; (80a2efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2ed2:	681a      	ldr	r2, [r3, #0]
 80a2ed4:	07d2      	lsls	r2, r2, #31
 80a2ed6:	bf5c      	itt	pl
 80a2ed8:	2201      	movpl	r2, #1
 80a2eda:	601a      	strpl	r2, [r3, #0]
 80a2edc:	4770      	bx	lr
 80a2ede:	bf00      	nop
 80a2ee0:	200005ec 	.word	0x200005ec
 80a2ee4:	200005e8 	.word	0x200005e8
 80a2ee8:	200005e4 	.word	0x200005e4
 80a2eec:	200005e0 	.word	0x200005e0
 80a2ef0:	200005dc 	.word	0x200005dc
 80a2ef4:	200005d8 	.word	0x200005d8
 80a2ef8:	200005d4 	.word	0x200005d4
 80a2efc:	200005d0 	.word	0x200005d0

080a2f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2f00:	4b24      	ldr	r3, [pc, #144]	; (80a2f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2f02:	681a      	ldr	r2, [r3, #0]
 80a2f04:	07d0      	lsls	r0, r2, #31
 80a2f06:	bf5c      	itt	pl
 80a2f08:	2201      	movpl	r2, #1
 80a2f0a:	601a      	strpl	r2, [r3, #0]
 80a2f0c:	4b22      	ldr	r3, [pc, #136]	; (80a2f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2f0e:	681a      	ldr	r2, [r3, #0]
 80a2f10:	07d1      	lsls	r1, r2, #31
 80a2f12:	bf5c      	itt	pl
 80a2f14:	2201      	movpl	r2, #1
 80a2f16:	601a      	strpl	r2, [r3, #0]
 80a2f18:	4b20      	ldr	r3, [pc, #128]	; (80a2f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2f1a:	681a      	ldr	r2, [r3, #0]
 80a2f1c:	07d2      	lsls	r2, r2, #31
 80a2f1e:	bf5c      	itt	pl
 80a2f20:	2201      	movpl	r2, #1
 80a2f22:	601a      	strpl	r2, [r3, #0]
 80a2f24:	4b1e      	ldr	r3, [pc, #120]	; (80a2fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2f26:	681a      	ldr	r2, [r3, #0]
 80a2f28:	07d0      	lsls	r0, r2, #31
 80a2f2a:	bf5c      	itt	pl
 80a2f2c:	2201      	movpl	r2, #1
 80a2f2e:	601a      	strpl	r2, [r3, #0]
 80a2f30:	4b1c      	ldr	r3, [pc, #112]	; (80a2fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2f32:	681a      	ldr	r2, [r3, #0]
 80a2f34:	07d1      	lsls	r1, r2, #31
 80a2f36:	bf5c      	itt	pl
 80a2f38:	2201      	movpl	r2, #1
 80a2f3a:	601a      	strpl	r2, [r3, #0]
 80a2f3c:	4b1a      	ldr	r3, [pc, #104]	; (80a2fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2f3e:	681a      	ldr	r2, [r3, #0]
 80a2f40:	07d2      	lsls	r2, r2, #31
 80a2f42:	bf5c      	itt	pl
 80a2f44:	2201      	movpl	r2, #1
 80a2f46:	601a      	strpl	r2, [r3, #0]
 80a2f48:	4b18      	ldr	r3, [pc, #96]	; (80a2fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2f4a:	681a      	ldr	r2, [r3, #0]
 80a2f4c:	07d0      	lsls	r0, r2, #31
 80a2f4e:	bf5c      	itt	pl
 80a2f50:	2201      	movpl	r2, #1
 80a2f52:	601a      	strpl	r2, [r3, #0]
 80a2f54:	4b16      	ldr	r3, [pc, #88]	; (80a2fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2f56:	681a      	ldr	r2, [r3, #0]
 80a2f58:	07d1      	lsls	r1, r2, #31
 80a2f5a:	bf5c      	itt	pl
 80a2f5c:	2201      	movpl	r2, #1
 80a2f5e:	601a      	strpl	r2, [r3, #0]
 80a2f60:	4b14      	ldr	r3, [pc, #80]	; (80a2fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2f62:	681a      	ldr	r2, [r3, #0]
 80a2f64:	07d2      	lsls	r2, r2, #31
 80a2f66:	bf5c      	itt	pl
 80a2f68:	2201      	movpl	r2, #1
 80a2f6a:	601a      	strpl	r2, [r3, #0]
 80a2f6c:	4b12      	ldr	r3, [pc, #72]	; (80a2fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2f6e:	681a      	ldr	r2, [r3, #0]
 80a2f70:	07d0      	lsls	r0, r2, #31
 80a2f72:	bf5c      	itt	pl
 80a2f74:	2201      	movpl	r2, #1
 80a2f76:	601a      	strpl	r2, [r3, #0]
 80a2f78:	4b10      	ldr	r3, [pc, #64]	; (80a2fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2f7a:	681a      	ldr	r2, [r3, #0]
 80a2f7c:	07d1      	lsls	r1, r2, #31
 80a2f7e:	bf5c      	itt	pl
 80a2f80:	2201      	movpl	r2, #1
 80a2f82:	601a      	strpl	r2, [r3, #0]
 80a2f84:	4b0e      	ldr	r3, [pc, #56]	; (80a2fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2f86:	681a      	ldr	r2, [r3, #0]
 80a2f88:	07d2      	lsls	r2, r2, #31
 80a2f8a:	bf5c      	itt	pl
 80a2f8c:	2201      	movpl	r2, #1
 80a2f8e:	601a      	strpl	r2, [r3, #0]
 80a2f90:	4770      	bx	lr
 80a2f92:	bf00      	nop
 80a2f94:	2000061c 	.word	0x2000061c
 80a2f98:	20000618 	.word	0x20000618
 80a2f9c:	20000614 	.word	0x20000614
 80a2fa0:	20000610 	.word	0x20000610
 80a2fa4:	2000060c 	.word	0x2000060c
 80a2fa8:	20000608 	.word	0x20000608
 80a2fac:	20000604 	.word	0x20000604
 80a2fb0:	20000600 	.word	0x20000600
 80a2fb4:	200005fc 	.word	0x200005fc
 80a2fb8:	200005f8 	.word	0x200005f8
 80a2fbc:	200005f4 	.word	0x200005f4
 80a2fc0:	200005f0 	.word	0x200005f0

080a2fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2fc4:	4b24      	ldr	r3, [pc, #144]	; (80a3058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2fc6:	681a      	ldr	r2, [r3, #0]
 80a2fc8:	07d0      	lsls	r0, r2, #31
 80a2fca:	bf5c      	itt	pl
 80a2fcc:	2201      	movpl	r2, #1
 80a2fce:	601a      	strpl	r2, [r3, #0]
 80a2fd0:	4b22      	ldr	r3, [pc, #136]	; (80a305c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2fd2:	681a      	ldr	r2, [r3, #0]
 80a2fd4:	07d1      	lsls	r1, r2, #31
 80a2fd6:	bf5c      	itt	pl
 80a2fd8:	2201      	movpl	r2, #1
 80a2fda:	601a      	strpl	r2, [r3, #0]
 80a2fdc:	4b20      	ldr	r3, [pc, #128]	; (80a3060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2fde:	681a      	ldr	r2, [r3, #0]
 80a2fe0:	07d2      	lsls	r2, r2, #31
 80a2fe2:	bf5c      	itt	pl
 80a2fe4:	2201      	movpl	r2, #1
 80a2fe6:	601a      	strpl	r2, [r3, #0]
 80a2fe8:	4b1e      	ldr	r3, [pc, #120]	; (80a3064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2fea:	681a      	ldr	r2, [r3, #0]
 80a2fec:	07d0      	lsls	r0, r2, #31
 80a2fee:	bf5c      	itt	pl
 80a2ff0:	2201      	movpl	r2, #1
 80a2ff2:	601a      	strpl	r2, [r3, #0]
 80a2ff4:	4b1c      	ldr	r3, [pc, #112]	; (80a3068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2ff6:	681a      	ldr	r2, [r3, #0]
 80a2ff8:	07d1      	lsls	r1, r2, #31
 80a2ffa:	bf5c      	itt	pl
 80a2ffc:	2201      	movpl	r2, #1
 80a2ffe:	601a      	strpl	r2, [r3, #0]
 80a3000:	4b1a      	ldr	r3, [pc, #104]	; (80a306c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3002:	681a      	ldr	r2, [r3, #0]
 80a3004:	07d2      	lsls	r2, r2, #31
 80a3006:	bf5c      	itt	pl
 80a3008:	2201      	movpl	r2, #1
 80a300a:	601a      	strpl	r2, [r3, #0]
 80a300c:	4b18      	ldr	r3, [pc, #96]	; (80a3070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a300e:	681a      	ldr	r2, [r3, #0]
 80a3010:	07d0      	lsls	r0, r2, #31
 80a3012:	bf5c      	itt	pl
 80a3014:	2201      	movpl	r2, #1
 80a3016:	601a      	strpl	r2, [r3, #0]
 80a3018:	4b16      	ldr	r3, [pc, #88]	; (80a3074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a301a:	681a      	ldr	r2, [r3, #0]
 80a301c:	07d1      	lsls	r1, r2, #31
 80a301e:	bf5c      	itt	pl
 80a3020:	2201      	movpl	r2, #1
 80a3022:	601a      	strpl	r2, [r3, #0]
 80a3024:	4b14      	ldr	r3, [pc, #80]	; (80a3078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3026:	681a      	ldr	r2, [r3, #0]
 80a3028:	07d2      	lsls	r2, r2, #31
 80a302a:	bf5c      	itt	pl
 80a302c:	2201      	movpl	r2, #1
 80a302e:	601a      	strpl	r2, [r3, #0]
 80a3030:	4b12      	ldr	r3, [pc, #72]	; (80a307c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3032:	681a      	ldr	r2, [r3, #0]
 80a3034:	07d0      	lsls	r0, r2, #31
 80a3036:	bf5c      	itt	pl
 80a3038:	2201      	movpl	r2, #1
 80a303a:	601a      	strpl	r2, [r3, #0]
 80a303c:	4b10      	ldr	r3, [pc, #64]	; (80a3080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a303e:	681a      	ldr	r2, [r3, #0]
 80a3040:	07d1      	lsls	r1, r2, #31
 80a3042:	bf5c      	itt	pl
 80a3044:	2201      	movpl	r2, #1
 80a3046:	601a      	strpl	r2, [r3, #0]
 80a3048:	4b0e      	ldr	r3, [pc, #56]	; (80a3084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a304a:	681a      	ldr	r2, [r3, #0]
 80a304c:	07d2      	lsls	r2, r2, #31
 80a304e:	bf5c      	itt	pl
 80a3050:	2201      	movpl	r2, #1
 80a3052:	601a      	strpl	r2, [r3, #0]
 80a3054:	4770      	bx	lr
 80a3056:	bf00      	nop
 80a3058:	2000064c 	.word	0x2000064c
 80a305c:	20000648 	.word	0x20000648
 80a3060:	20000644 	.word	0x20000644
 80a3064:	20000640 	.word	0x20000640
 80a3068:	2000063c 	.word	0x2000063c
 80a306c:	20000638 	.word	0x20000638
 80a3070:	20000634 	.word	0x20000634
 80a3074:	20000630 	.word	0x20000630
 80a3078:	2000062c 	.word	0x2000062c
 80a307c:	20000628 	.word	0x20000628
 80a3080:	20000624 	.word	0x20000624
 80a3084:	20000620 	.word	0x20000620

080a3088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3088:	4b18      	ldr	r3, [pc, #96]	; (80a30ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a308a:	681a      	ldr	r2, [r3, #0]
 80a308c:	07d1      	lsls	r1, r2, #31
 80a308e:	bf5c      	itt	pl
 80a3090:	2201      	movpl	r2, #1
 80a3092:	601a      	strpl	r2, [r3, #0]
 80a3094:	4b16      	ldr	r3, [pc, #88]	; (80a30f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3096:	681a      	ldr	r2, [r3, #0]
 80a3098:	07d2      	lsls	r2, r2, #31
 80a309a:	bf5c      	itt	pl
 80a309c:	2201      	movpl	r2, #1
 80a309e:	601a      	strpl	r2, [r3, #0]
 80a30a0:	4b14      	ldr	r3, [pc, #80]	; (80a30f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a30a2:	681a      	ldr	r2, [r3, #0]
 80a30a4:	07d0      	lsls	r0, r2, #31
 80a30a6:	bf5c      	itt	pl
 80a30a8:	2201      	movpl	r2, #1
 80a30aa:	601a      	strpl	r2, [r3, #0]
 80a30ac:	4b12      	ldr	r3, [pc, #72]	; (80a30f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a30ae:	681a      	ldr	r2, [r3, #0]
 80a30b0:	07d1      	lsls	r1, r2, #31
 80a30b2:	bf5c      	itt	pl
 80a30b4:	2201      	movpl	r2, #1
 80a30b6:	601a      	strpl	r2, [r3, #0]
 80a30b8:	4b10      	ldr	r3, [pc, #64]	; (80a30fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a30ba:	681a      	ldr	r2, [r3, #0]
 80a30bc:	07d2      	lsls	r2, r2, #31
 80a30be:	bf5c      	itt	pl
 80a30c0:	2201      	movpl	r2, #1
 80a30c2:	601a      	strpl	r2, [r3, #0]
 80a30c4:	4b0e      	ldr	r3, [pc, #56]	; (80a3100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a30c6:	681a      	ldr	r2, [r3, #0]
 80a30c8:	07d0      	lsls	r0, r2, #31
 80a30ca:	bf5c      	itt	pl
 80a30cc:	2201      	movpl	r2, #1
 80a30ce:	601a      	strpl	r2, [r3, #0]
 80a30d0:	4b0c      	ldr	r3, [pc, #48]	; (80a3104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a30d2:	681a      	ldr	r2, [r3, #0]
 80a30d4:	07d1      	lsls	r1, r2, #31
 80a30d6:	bf5c      	itt	pl
 80a30d8:	2201      	movpl	r2, #1
 80a30da:	601a      	strpl	r2, [r3, #0]
 80a30dc:	4b0a      	ldr	r3, [pc, #40]	; (80a3108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a30de:	681a      	ldr	r2, [r3, #0]
 80a30e0:	07d2      	lsls	r2, r2, #31
 80a30e2:	bf5c      	itt	pl
 80a30e4:	2201      	movpl	r2, #1
 80a30e6:	601a      	strpl	r2, [r3, #0]
 80a30e8:	4770      	bx	lr
 80a30ea:	bf00      	nop
 80a30ec:	2000066c 	.word	0x2000066c
 80a30f0:	20000668 	.word	0x20000668
 80a30f4:	20000664 	.word	0x20000664
 80a30f8:	20000660 	.word	0x20000660
 80a30fc:	2000065c 	.word	0x2000065c
 80a3100:	20000658 	.word	0x20000658
 80a3104:	20000654 	.word	0x20000654
 80a3108:	20000650 	.word	0x20000650

080a310c <pow>:
 80a310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3110:	b08d      	sub	sp, #52	; 0x34
 80a3112:	4606      	mov	r6, r0
 80a3114:	460f      	mov	r7, r1
 80a3116:	4614      	mov	r4, r2
 80a3118:	461d      	mov	r5, r3
 80a311a:	f000 f991 	bl	80a3440 <__ieee754_pow>
 80a311e:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a3430 <pow+0x324>
 80a3122:	e9cd 0100 	strd	r0, r1, [sp]
 80a3126:	f999 8000 	ldrsb.w	r8, [r9]
 80a312a:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a312e:	d046      	beq.n	80a31be <pow+0xb2>
 80a3130:	4622      	mov	r2, r4
 80a3132:	462b      	mov	r3, r5
 80a3134:	4620      	mov	r0, r4
 80a3136:	4629      	mov	r1, r5
 80a3138:	f001 fd16 	bl	80a4b68 <__aeabi_dcmpun>
 80a313c:	4683      	mov	fp, r0
 80a313e:	2800      	cmp	r0, #0
 80a3140:	d13d      	bne.n	80a31be <pow+0xb2>
 80a3142:	4632      	mov	r2, r6
 80a3144:	463b      	mov	r3, r7
 80a3146:	4630      	mov	r0, r6
 80a3148:	4639      	mov	r1, r7
 80a314a:	f001 fd0d 	bl	80a4b68 <__aeabi_dcmpun>
 80a314e:	4682      	mov	sl, r0
 80a3150:	2800      	cmp	r0, #0
 80a3152:	d174      	bne.n	80a323e <pow+0x132>
 80a3154:	4630      	mov	r0, r6
 80a3156:	4639      	mov	r1, r7
 80a3158:	2200      	movs	r2, #0
 80a315a:	2300      	movs	r3, #0
 80a315c:	f001 fcd2 	bl	80a4b04 <__aeabi_dcmpeq>
 80a3160:	2800      	cmp	r0, #0
 80a3162:	d033      	beq.n	80a31cc <pow+0xc0>
 80a3164:	2200      	movs	r2, #0
 80a3166:	2300      	movs	r3, #0
 80a3168:	4620      	mov	r0, r4
 80a316a:	4629      	mov	r1, r5
 80a316c:	f001 fcca 	bl	80a4b04 <__aeabi_dcmpeq>
 80a3170:	4683      	mov	fp, r0
 80a3172:	b1b8      	cbz	r0, 80a31a4 <pow+0x98>
 80a3174:	4aa9      	ldr	r2, [pc, #676]	; (80a341c <pow+0x310>)
 80a3176:	2301      	movs	r3, #1
 80a3178:	2000      	movs	r0, #0
 80a317a:	2100      	movs	r1, #0
 80a317c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a3180:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3184:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a318c:	9203      	str	r2, [sp, #12]
 80a318e:	9302      	str	r3, [sp, #8]
 80a3190:	f1b8 0f00 	cmp.w	r8, #0
 80a3194:	d06c      	beq.n	80a3270 <pow+0x164>
 80a3196:	4ba2      	ldr	r3, [pc, #648]	; (80a3420 <pow+0x314>)
 80a3198:	2200      	movs	r2, #0
 80a319a:	4610      	mov	r0, r2
 80a319c:	4619      	mov	r1, r3
 80a319e:	b00d      	add	sp, #52	; 0x34
 80a31a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a31a4:	4620      	mov	r0, r4
 80a31a6:	4629      	mov	r1, r5
 80a31a8:	f000 ff74 	bl	80a4094 <finite>
 80a31ac:	b138      	cbz	r0, 80a31be <pow+0xb2>
 80a31ae:	2200      	movs	r2, #0
 80a31b0:	2300      	movs	r3, #0
 80a31b2:	4620      	mov	r0, r4
 80a31b4:	4629      	mov	r1, r5
 80a31b6:	f001 fcaf 	bl	80a4b18 <__aeabi_dcmplt>
 80a31ba:	2800      	cmp	r0, #0
 80a31bc:	d16a      	bne.n	80a3294 <pow+0x188>
 80a31be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a31c2:	4610      	mov	r0, r2
 80a31c4:	4619      	mov	r1, r3
 80a31c6:	b00d      	add	sp, #52	; 0x34
 80a31c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a31cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a31d0:	f000 ff60 	bl	80a4094 <finite>
 80a31d4:	4680      	mov	r8, r0
 80a31d6:	2800      	cmp	r0, #0
 80a31d8:	d07d      	beq.n	80a32d6 <pow+0x1ca>
 80a31da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a31de:	f04f 0a00 	mov.w	sl, #0
 80a31e2:	f04f 0b00 	mov.w	fp, #0
 80a31e6:	4652      	mov	r2, sl
 80a31e8:	465b      	mov	r3, fp
 80a31ea:	f001 fc8b 	bl	80a4b04 <__aeabi_dcmpeq>
 80a31ee:	2800      	cmp	r0, #0
 80a31f0:	d0e5      	beq.n	80a31be <pow+0xb2>
 80a31f2:	4630      	mov	r0, r6
 80a31f4:	4639      	mov	r1, r7
 80a31f6:	f000 ff4d 	bl	80a4094 <finite>
 80a31fa:	2800      	cmp	r0, #0
 80a31fc:	d0df      	beq.n	80a31be <pow+0xb2>
 80a31fe:	4620      	mov	r0, r4
 80a3200:	4629      	mov	r1, r5
 80a3202:	f000 ff47 	bl	80a4094 <finite>
 80a3206:	2800      	cmp	r0, #0
 80a3208:	d0d9      	beq.n	80a31be <pow+0xb2>
 80a320a:	f999 3000 	ldrsb.w	r3, [r9]
 80a320e:	4883      	ldr	r0, [pc, #524]	; (80a341c <pow+0x310>)
 80a3210:	2104      	movs	r1, #4
 80a3212:	2200      	movs	r2, #0
 80a3214:	2b02      	cmp	r3, #2
 80a3216:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a321a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a321e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3222:	9003      	str	r0, [sp, #12]
 80a3224:	9102      	str	r1, [sp, #8]
 80a3226:	920a      	str	r2, [sp, #40]	; 0x28
 80a3228:	d004      	beq.n	80a3234 <pow+0x128>
 80a322a:	a802      	add	r0, sp, #8
 80a322c:	f000 ff38 	bl	80a40a0 <matherr>
 80a3230:	2800      	cmp	r0, #0
 80a3232:	d147      	bne.n	80a32c4 <pow+0x1b8>
 80a3234:	f7fe fc2e 	bl	80a1a94 <__errno>
 80a3238:	2322      	movs	r3, #34	; 0x22
 80a323a:	6003      	str	r3, [r0, #0]
 80a323c:	e042      	b.n	80a32c4 <pow+0x1b8>
 80a323e:	2200      	movs	r2, #0
 80a3240:	2300      	movs	r3, #0
 80a3242:	4620      	mov	r0, r4
 80a3244:	4629      	mov	r1, r5
 80a3246:	f001 fc5d 	bl	80a4b04 <__aeabi_dcmpeq>
 80a324a:	2800      	cmp	r0, #0
 80a324c:	d0b7      	beq.n	80a31be <pow+0xb2>
 80a324e:	4b74      	ldr	r3, [pc, #464]	; (80a3420 <pow+0x314>)
 80a3250:	4872      	ldr	r0, [pc, #456]	; (80a341c <pow+0x310>)
 80a3252:	2200      	movs	r2, #0
 80a3254:	2101      	movs	r1, #1
 80a3256:	f1b8 0f02 	cmp.w	r8, #2
 80a325a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a325e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3262:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3266:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a326a:	9003      	str	r0, [sp, #12]
 80a326c:	9102      	str	r1, [sp, #8]
 80a326e:	d0a8      	beq.n	80a31c2 <pow+0xb6>
 80a3270:	a802      	add	r0, sp, #8
 80a3272:	f000 ff15 	bl	80a40a0 <matherr>
 80a3276:	2800      	cmp	r0, #0
 80a3278:	d07e      	beq.n	80a3378 <pow+0x26c>
 80a327a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a327c:	b343      	cbz	r3, 80a32d0 <pow+0x1c4>
 80a327e:	f7fe fc09 	bl	80a1a94 <__errno>
 80a3282:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3286:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a3288:	6001      	str	r1, [r0, #0]
 80a328a:	4610      	mov	r0, r2
 80a328c:	4619      	mov	r1, r3
 80a328e:	b00d      	add	sp, #52	; 0x34
 80a3290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3294:	4961      	ldr	r1, [pc, #388]	; (80a341c <pow+0x310>)
 80a3296:	f999 3000 	ldrsb.w	r3, [r9]
 80a329a:	2201      	movs	r2, #1
 80a329c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a32a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a32a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a32a8:	9103      	str	r1, [sp, #12]
 80a32aa:	9202      	str	r2, [sp, #8]
 80a32ac:	2b00      	cmp	r3, #0
 80a32ae:	d068      	beq.n	80a3382 <pow+0x276>
 80a32b0:	495c      	ldr	r1, [pc, #368]	; (80a3424 <pow+0x318>)
 80a32b2:	2000      	movs	r0, #0
 80a32b4:	2b02      	cmp	r3, #2
 80a32b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a32ba:	d166      	bne.n	80a338a <pow+0x27e>
 80a32bc:	f7fe fbea 	bl	80a1a94 <__errno>
 80a32c0:	2321      	movs	r3, #33	; 0x21
 80a32c2:	6003      	str	r3, [r0, #0]
 80a32c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a32c6:	b11b      	cbz	r3, 80a32d0 <pow+0x1c4>
 80a32c8:	f7fe fbe4 	bl	80a1a94 <__errno>
 80a32cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a32ce:	6003      	str	r3, [r0, #0]
 80a32d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a32d4:	e775      	b.n	80a31c2 <pow+0xb6>
 80a32d6:	4630      	mov	r0, r6
 80a32d8:	4639      	mov	r1, r7
 80a32da:	f000 fedb 	bl	80a4094 <finite>
 80a32de:	2800      	cmp	r0, #0
 80a32e0:	f43f af7b 	beq.w	80a31da <pow+0xce>
 80a32e4:	4620      	mov	r0, r4
 80a32e6:	4629      	mov	r1, r5
 80a32e8:	f000 fed4 	bl	80a4094 <finite>
 80a32ec:	2800      	cmp	r0, #0
 80a32ee:	f43f af74 	beq.w	80a31da <pow+0xce>
 80a32f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a32f6:	4610      	mov	r0, r2
 80a32f8:	4619      	mov	r1, r3
 80a32fa:	f001 fc35 	bl	80a4b68 <__aeabi_dcmpun>
 80a32fe:	2800      	cmp	r0, #0
 80a3300:	d16f      	bne.n	80a33e2 <pow+0x2d6>
 80a3302:	4b46      	ldr	r3, [pc, #280]	; (80a341c <pow+0x310>)
 80a3304:	f999 8000 	ldrsb.w	r8, [r9]
 80a3308:	9303      	str	r3, [sp, #12]
 80a330a:	2303      	movs	r3, #3
 80a330c:	900a      	str	r0, [sp, #40]	; 0x28
 80a330e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3312:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3316:	9302      	str	r3, [sp, #8]
 80a3318:	f1b8 0f00 	cmp.w	r8, #0
 80a331c:	d13b      	bne.n	80a3396 <pow+0x28a>
 80a331e:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a3434 <pow+0x328>
 80a3322:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a3326:	2200      	movs	r2, #0
 80a3328:	2300      	movs	r3, #0
 80a332a:	4630      	mov	r0, r6
 80a332c:	4639      	mov	r1, r7
 80a332e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3332:	f001 fbf1 	bl	80a4b18 <__aeabi_dcmplt>
 80a3336:	2800      	cmp	r0, #0
 80a3338:	f43f af77 	beq.w	80a322a <pow+0x11e>
 80a333c:	2200      	movs	r2, #0
 80a333e:	4b3a      	ldr	r3, [pc, #232]	; (80a3428 <pow+0x31c>)
 80a3340:	4620      	mov	r0, r4
 80a3342:	4629      	mov	r1, r5
 80a3344:	f001 f976 	bl	80a4634 <__aeabi_dmul>
 80a3348:	4604      	mov	r4, r0
 80a334a:	460d      	mov	r5, r1
 80a334c:	f000 feb0 	bl	80a40b0 <rint>
 80a3350:	4602      	mov	r2, r0
 80a3352:	460b      	mov	r3, r1
 80a3354:	4620      	mov	r0, r4
 80a3356:	4629      	mov	r1, r5
 80a3358:	f001 fbd4 	bl	80a4b04 <__aeabi_dcmpeq>
 80a335c:	2800      	cmp	r0, #0
 80a335e:	d13d      	bne.n	80a33dc <pow+0x2d0>
 80a3360:	4b32      	ldr	r3, [pc, #200]	; (80a342c <pow+0x320>)
 80a3362:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3366:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a336a:	f999 8000 	ldrsb.w	r8, [r9]
 80a336e:	f1b8 0f02 	cmp.w	r8, #2
 80a3372:	f47f af5a 	bne.w	80a322a <pow+0x11e>
 80a3376:	e75d      	b.n	80a3234 <pow+0x128>
 80a3378:	f7fe fb8c 	bl	80a1a94 <__errno>
 80a337c:	2321      	movs	r3, #33	; 0x21
 80a337e:	6003      	str	r3, [r0, #0]
 80a3380:	e77b      	b.n	80a327a <pow+0x16e>
 80a3382:	2300      	movs	r3, #0
 80a3384:	2400      	movs	r4, #0
 80a3386:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a338a:	a802      	add	r0, sp, #8
 80a338c:	f000 fe88 	bl	80a40a0 <matherr>
 80a3390:	2800      	cmp	r0, #0
 80a3392:	d197      	bne.n	80a32c4 <pow+0x1b8>
 80a3394:	e792      	b.n	80a32bc <pow+0x1b0>
 80a3396:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a3438 <pow+0x32c>
 80a339a:	f04f 0a00 	mov.w	sl, #0
 80a339e:	2200      	movs	r2, #0
 80a33a0:	2300      	movs	r3, #0
 80a33a2:	4630      	mov	r0, r6
 80a33a4:	4639      	mov	r1, r7
 80a33a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a33aa:	f001 fbb5 	bl	80a4b18 <__aeabi_dcmplt>
 80a33ae:	2800      	cmp	r0, #0
 80a33b0:	d0dd      	beq.n	80a336e <pow+0x262>
 80a33b2:	2200      	movs	r2, #0
 80a33b4:	4b1c      	ldr	r3, [pc, #112]	; (80a3428 <pow+0x31c>)
 80a33b6:	4620      	mov	r0, r4
 80a33b8:	4629      	mov	r1, r5
 80a33ba:	f001 f93b 	bl	80a4634 <__aeabi_dmul>
 80a33be:	4604      	mov	r4, r0
 80a33c0:	460d      	mov	r5, r1
 80a33c2:	f000 fe75 	bl	80a40b0 <rint>
 80a33c6:	4602      	mov	r2, r0
 80a33c8:	460b      	mov	r3, r1
 80a33ca:	4620      	mov	r0, r4
 80a33cc:	4629      	mov	r1, r5
 80a33ce:	f001 fb99 	bl	80a4b04 <__aeabi_dcmpeq>
 80a33d2:	b918      	cbnz	r0, 80a33dc <pow+0x2d0>
 80a33d4:	4b13      	ldr	r3, [pc, #76]	; (80a3424 <pow+0x318>)
 80a33d6:	2200      	movs	r2, #0
 80a33d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a33dc:	f999 8000 	ldrsb.w	r8, [r9]
 80a33e0:	e7c5      	b.n	80a336e <pow+0x262>
 80a33e2:	4a0e      	ldr	r2, [pc, #56]	; (80a341c <pow+0x310>)
 80a33e4:	f999 9000 	ldrsb.w	r9, [r9]
 80a33e8:	2301      	movs	r3, #1
 80a33ea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a33ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a33f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a33f6:	9203      	str	r2, [sp, #12]
 80a33f8:	9302      	str	r3, [sp, #8]
 80a33fa:	f1b9 0f00 	cmp.w	r9, #0
 80a33fe:	d0c0      	beq.n	80a3382 <pow+0x276>
 80a3400:	2200      	movs	r2, #0
 80a3402:	2300      	movs	r3, #0
 80a3404:	4610      	mov	r0, r2
 80a3406:	4619      	mov	r1, r3
 80a3408:	f001 fa3e 	bl	80a4888 <__aeabi_ddiv>
 80a340c:	f1b9 0f02 	cmp.w	r9, #2
 80a3410:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3414:	f43f af52 	beq.w	80a32bc <pow+0x1b0>
 80a3418:	e7b7      	b.n	80a338a <pow+0x27e>
 80a341a:	bf00      	nop
 80a341c:	080a5e28 	.word	0x080a5e28
 80a3420:	3ff00000 	.word	0x3ff00000
 80a3424:	fff00000 	.word	0xfff00000
 80a3428:	3fe00000 	.word	0x3fe00000
 80a342c:	c7efffff 	.word	0xc7efffff
 80a3430:	20000004 	.word	0x20000004
 80a3434:	47efffff 	.word	0x47efffff
 80a3438:	7ff00000 	.word	0x7ff00000
 80a343c:	00000000 	.word	0x00000000

080a3440 <__ieee754_pow>:
 80a3440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3444:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a3448:	ea58 0902 	orrs.w	r9, r8, r2
 80a344c:	b093      	sub	sp, #76	; 0x4c
 80a344e:	d03c      	beq.n	80a34ca <__ieee754_pow+0x8a>
 80a3450:	4c71      	ldr	r4, [pc, #452]	; (80a3618 <__ieee754_pow+0x1d8>)
 80a3452:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a3456:	42a6      	cmp	r6, r4
 80a3458:	4683      	mov	fp, r0
 80a345a:	460d      	mov	r5, r1
 80a345c:	dd0c      	ble.n	80a3478 <__ieee754_pow+0x38>
 80a345e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3462:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3466:	ea56 000b 	orrs.w	r0, r6, fp
 80a346a:	d138      	bne.n	80a34de <__ieee754_pow+0x9e>
 80a346c:	4683      	mov	fp, r0
 80a346e:	496b      	ldr	r1, [pc, #428]	; (80a361c <__ieee754_pow+0x1dc>)
 80a3470:	4658      	mov	r0, fp
 80a3472:	b013      	add	sp, #76	; 0x4c
 80a3474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3478:	469a      	mov	sl, r3
 80a347a:	4696      	mov	lr, r2
 80a347c:	d02b      	beq.n	80a34d6 <__ieee754_pow+0x96>
 80a347e:	45a0      	cmp	r8, r4
 80a3480:	dced      	bgt.n	80a345e <__ieee754_pow+0x1e>
 80a3482:	4c65      	ldr	r4, [pc, #404]	; (80a3618 <__ieee754_pow+0x1d8>)
 80a3484:	45a0      	cmp	r8, r4
 80a3486:	d078      	beq.n	80a357a <__ieee754_pow+0x13a>
 80a3488:	2d00      	cmp	r5, #0
 80a348a:	460f      	mov	r7, r1
 80a348c:	4681      	mov	r9, r0
 80a348e:	e9cd 2300 	strd	r2, r3, [sp]
 80a3492:	db76      	blt.n	80a3582 <__ieee754_pow+0x142>
 80a3494:	2400      	movs	r4, #0
 80a3496:	f1be 0f00 	cmp.w	lr, #0
 80a349a:	d127      	bne.n	80a34ec <__ieee754_pow+0xac>
 80a349c:	4b5e      	ldr	r3, [pc, #376]	; (80a3618 <__ieee754_pow+0x1d8>)
 80a349e:	4598      	cmp	r8, r3
 80a34a0:	f000 808b 	beq.w	80a35ba <__ieee754_pow+0x17a>
 80a34a4:	4b5d      	ldr	r3, [pc, #372]	; (80a361c <__ieee754_pow+0x1dc>)
 80a34a6:	4598      	cmp	r8, r3
 80a34a8:	d052      	beq.n	80a3550 <__ieee754_pow+0x110>
 80a34aa:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a34ae:	f000 83c9 	beq.w	80a3c44 <__ieee754_pow+0x804>
 80a34b2:	4b5b      	ldr	r3, [pc, #364]	; (80a3620 <__ieee754_pow+0x1e0>)
 80a34b4:	459a      	cmp	sl, r3
 80a34b6:	d119      	bne.n	80a34ec <__ieee754_pow+0xac>
 80a34b8:	2d00      	cmp	r5, #0
 80a34ba:	db17      	blt.n	80a34ec <__ieee754_pow+0xac>
 80a34bc:	4648      	mov	r0, r9
 80a34be:	4639      	mov	r1, r7
 80a34c0:	b013      	add	sp, #76	; 0x4c
 80a34c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a34c6:	f000 bd1d 	b.w	80a3f04 <__ieee754_sqrt>
 80a34ca:	46cb      	mov	fp, r9
 80a34cc:	4658      	mov	r0, fp
 80a34ce:	4953      	ldr	r1, [pc, #332]	; (80a361c <__ieee754_pow+0x1dc>)
 80a34d0:	b013      	add	sp, #76	; 0x4c
 80a34d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a34d6:	2800      	cmp	r0, #0
 80a34d8:	d1c1      	bne.n	80a345e <__ieee754_pow+0x1e>
 80a34da:	45b0      	cmp	r8, r6
 80a34dc:	ddd1      	ble.n	80a3482 <__ieee754_pow+0x42>
 80a34de:	4851      	ldr	r0, [pc, #324]	; (80a3624 <__ieee754_pow+0x1e4>)
 80a34e0:	b013      	add	sp, #76	; 0x4c
 80a34e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a34e6:	f000 bddd 	b.w	80a40a4 <nan>
 80a34ea:	2400      	movs	r4, #0
 80a34ec:	4648      	mov	r0, r9
 80a34ee:	4639      	mov	r1, r7
 80a34f0:	f000 fdcc 	bl	80a408c <fabs>
 80a34f4:	f1bb 0f00 	cmp.w	fp, #0
 80a34f8:	d01c      	beq.n	80a3534 <__ieee754_pow+0xf4>
 80a34fa:	0fed      	lsrs	r5, r5, #31
 80a34fc:	3d01      	subs	r5, #1
 80a34fe:	ea54 0305 	orrs.w	r3, r4, r5
 80a3502:	d070      	beq.n	80a35e6 <__ieee754_pow+0x1a6>
 80a3504:	4b48      	ldr	r3, [pc, #288]	; (80a3628 <__ieee754_pow+0x1e8>)
 80a3506:	4598      	cmp	r8, r3
 80a3508:	f340 8094 	ble.w	80a3634 <__ieee754_pow+0x1f4>
 80a350c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a3510:	4598      	cmp	r8, r3
 80a3512:	f340 840d 	ble.w	80a3d30 <__ieee754_pow+0x8f0>
 80a3516:	4b45      	ldr	r3, [pc, #276]	; (80a362c <__ieee754_pow+0x1ec>)
 80a3518:	429e      	cmp	r6, r3
 80a351a:	dd70      	ble.n	80a35fe <__ieee754_pow+0x1be>
 80a351c:	f1ba 0f00 	cmp.w	sl, #0
 80a3520:	dd70      	ble.n	80a3604 <__ieee754_pow+0x1c4>
 80a3522:	a33b      	add	r3, pc, #236	; (adr r3, 80a3610 <__ieee754_pow+0x1d0>)
 80a3524:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3528:	4610      	mov	r0, r2
 80a352a:	4619      	mov	r1, r3
 80a352c:	f001 f882 	bl	80a4634 <__aeabi_dmul>
 80a3530:	4683      	mov	fp, r0
 80a3532:	e79d      	b.n	80a3470 <__ieee754_pow+0x30>
 80a3534:	b126      	cbz	r6, 80a3540 <__ieee754_pow+0x100>
 80a3536:	4b39      	ldr	r3, [pc, #228]	; (80a361c <__ieee754_pow+0x1dc>)
 80a3538:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a353c:	429a      	cmp	r2, r3
 80a353e:	d1dc      	bne.n	80a34fa <__ieee754_pow+0xba>
 80a3540:	f1ba 0f00 	cmp.w	sl, #0
 80a3544:	f2c0 83b7 	blt.w	80a3cb6 <__ieee754_pow+0x876>
 80a3548:	2d00      	cmp	r5, #0
 80a354a:	db08      	blt.n	80a355e <__ieee754_pow+0x11e>
 80a354c:	4683      	mov	fp, r0
 80a354e:	e78f      	b.n	80a3470 <__ieee754_pow+0x30>
 80a3550:	f1ba 0f00 	cmp.w	sl, #0
 80a3554:	f2c0 845e 	blt.w	80a3e14 <__ieee754_pow+0x9d4>
 80a3558:	46cb      	mov	fp, r9
 80a355a:	4639      	mov	r1, r7
 80a355c:	e788      	b.n	80a3470 <__ieee754_pow+0x30>
 80a355e:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a3562:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a3566:	ea56 0304 	orrs.w	r3, r6, r4
 80a356a:	f000 8483 	beq.w	80a3e74 <__ieee754_pow+0xa34>
 80a356e:	2c01      	cmp	r4, #1
 80a3570:	d1ec      	bne.n	80a354c <__ieee754_pow+0x10c>
 80a3572:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3576:	4683      	mov	fp, r0
 80a3578:	e77a      	b.n	80a3470 <__ieee754_pow+0x30>
 80a357a:	f1be 0f00 	cmp.w	lr, #0
 80a357e:	d083      	beq.n	80a3488 <__ieee754_pow+0x48>
 80a3580:	e76d      	b.n	80a345e <__ieee754_pow+0x1e>
 80a3582:	4b2b      	ldr	r3, [pc, #172]	; (80a3630 <__ieee754_pow+0x1f0>)
 80a3584:	4598      	cmp	r8, r3
 80a3586:	dc2c      	bgt.n	80a35e2 <__ieee754_pow+0x1a2>
 80a3588:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a358c:	4598      	cmp	r8, r3
 80a358e:	dd81      	ble.n	80a3494 <__ieee754_pow+0x54>
 80a3590:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a3594:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3598:	2b14      	cmp	r3, #20
 80a359a:	f340 8453 	ble.w	80a3e44 <__ieee754_pow+0xa04>
 80a359e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a35a2:	fa2e f203 	lsr.w	r2, lr, r3
 80a35a6:	fa02 f303 	lsl.w	r3, r2, r3
 80a35aa:	459e      	cmp	lr, r3
 80a35ac:	f47f af72 	bne.w	80a3494 <__ieee754_pow+0x54>
 80a35b0:	f002 0201 	and.w	r2, r2, #1
 80a35b4:	f1c2 0402 	rsb	r4, r2, #2
 80a35b8:	e76d      	b.n	80a3496 <__ieee754_pow+0x56>
 80a35ba:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a35be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a35c2:	ea53 030b 	orrs.w	r3, r3, fp
 80a35c6:	f000 833a 	beq.w	80a3c3e <__ieee754_pow+0x7fe>
 80a35ca:	4b18      	ldr	r3, [pc, #96]	; (80a362c <__ieee754_pow+0x1ec>)
 80a35cc:	429e      	cmp	r6, r3
 80a35ce:	f340 8367 	ble.w	80a3ca0 <__ieee754_pow+0x860>
 80a35d2:	f1ba 0f00 	cmp.w	sl, #0
 80a35d6:	db15      	blt.n	80a3604 <__ieee754_pow+0x1c4>
 80a35d8:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a35dc:	469b      	mov	fp, r3
 80a35de:	4621      	mov	r1, r4
 80a35e0:	e746      	b.n	80a3470 <__ieee754_pow+0x30>
 80a35e2:	2402      	movs	r4, #2
 80a35e4:	e757      	b.n	80a3496 <__ieee754_pow+0x56>
 80a35e6:	464a      	mov	r2, r9
 80a35e8:	4648      	mov	r0, r9
 80a35ea:	463b      	mov	r3, r7
 80a35ec:	4639      	mov	r1, r7
 80a35ee:	f000 fe6d 	bl	80a42cc <__aeabi_dsub>
 80a35f2:	4602      	mov	r2, r0
 80a35f4:	460b      	mov	r3, r1
 80a35f6:	f001 f947 	bl	80a4888 <__aeabi_ddiv>
 80a35fa:	4683      	mov	fp, r0
 80a35fc:	e738      	b.n	80a3470 <__ieee754_pow+0x30>
 80a35fe:	f1ba 0f00 	cmp.w	sl, #0
 80a3602:	db8e      	blt.n	80a3522 <__ieee754_pow+0xe2>
 80a3604:	f04f 0b00 	mov.w	fp, #0
 80a3608:	4659      	mov	r1, fp
 80a360a:	e731      	b.n	80a3470 <__ieee754_pow+0x30>
 80a360c:	f3af 8000 	nop.w
 80a3610:	8800759c 	.word	0x8800759c
 80a3614:	7e37e43c 	.word	0x7e37e43c
 80a3618:	7ff00000 	.word	0x7ff00000
 80a361c:	3ff00000 	.word	0x3ff00000
 80a3620:	3fe00000 	.word	0x3fe00000
 80a3624:	080a5e2c 	.word	0x080a5e2c
 80a3628:	41e00000 	.word	0x41e00000
 80a362c:	3fefffff 	.word	0x3fefffff
 80a3630:	433fffff 	.word	0x433fffff
 80a3634:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a3638:	f04f 0200 	mov.w	r2, #0
 80a363c:	da05      	bge.n	80a364a <__ieee754_pow+0x20a>
 80a363e:	4bd0      	ldr	r3, [pc, #832]	; (80a3980 <__ieee754_pow+0x540>)
 80a3640:	f000 fff8 	bl	80a4634 <__aeabi_dmul>
 80a3644:	460e      	mov	r6, r1
 80a3646:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a364a:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a3990 <__ieee754_pow+0x550>
 80a364e:	1533      	asrs	r3, r6, #20
 80a3650:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a3654:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3658:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a365c:	4576      	cmp	r6, lr
 80a365e:	eb03 0a02 	add.w	sl, r3, r2
 80a3662:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a3666:	f340 83c9 	ble.w	80a3dfc <__ieee754_pow+0x9bc>
 80a366a:	4bc6      	ldr	r3, [pc, #792]	; (80a3984 <__ieee754_pow+0x544>)
 80a366c:	2200      	movs	r2, #0
 80a366e:	429e      	cmp	r6, r3
 80a3670:	f340 8404 	ble.w	80a3e7c <__ieee754_pow+0xa3c>
 80a3674:	2300      	movs	r3, #0
 80a3676:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a367a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a367e:	4bc2      	ldr	r3, [pc, #776]	; (80a3988 <__ieee754_pow+0x548>)
 80a3680:	2200      	movs	r2, #0
 80a3682:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3686:	f10a 0a01 	add.w	sl, sl, #1
 80a368a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a368e:	2600      	movs	r6, #0
 80a3690:	4639      	mov	r1, r7
 80a3692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3696:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a369a:	f000 fe17 	bl	80a42cc <__aeabi_dsub>
 80a369e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a36a2:	4680      	mov	r8, r0
 80a36a4:	4689      	mov	r9, r1
 80a36a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a36aa:	f000 fe11 	bl	80a42d0 <__adddf3>
 80a36ae:	4602      	mov	r2, r0
 80a36b0:	460b      	mov	r3, r1
 80a36b2:	2000      	movs	r0, #0
 80a36b4:	49b4      	ldr	r1, [pc, #720]	; (80a3988 <__ieee754_pow+0x548>)
 80a36b6:	f001 f8e7 	bl	80a4888 <__aeabi_ddiv>
 80a36ba:	460a      	mov	r2, r1
 80a36bc:	4601      	mov	r1, r0
 80a36be:	4613      	mov	r3, r2
 80a36c0:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a36c4:	4602      	mov	r2, r0
 80a36c6:	4649      	mov	r1, r9
 80a36c8:	4640      	mov	r0, r8
 80a36ca:	f000 ffb3 	bl	80a4634 <__aeabi_dmul>
 80a36ce:	468c      	mov	ip, r1
 80a36d0:	4683      	mov	fp, r0
 80a36d2:	107b      	asrs	r3, r7, #1
 80a36d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a36d8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a36dc:	1999      	adds	r1, r3, r6
 80a36de:	2000      	movs	r0, #0
 80a36e0:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a36e4:	4606      	mov	r6, r0
 80a36e6:	460f      	mov	r7, r1
 80a36e8:	f04f 0b00 	mov.w	fp, #0
 80a36ec:	4661      	mov	r1, ip
 80a36ee:	4658      	mov	r0, fp
 80a36f0:	4632      	mov	r2, r6
 80a36f2:	463b      	mov	r3, r7
 80a36f4:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a36f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a36fc:	f000 ff9a 	bl	80a4634 <__aeabi_dmul>
 80a3700:	4602      	mov	r2, r0
 80a3702:	460b      	mov	r3, r1
 80a3704:	4640      	mov	r0, r8
 80a3706:	4649      	mov	r1, r9
 80a3708:	f000 fde0 	bl	80a42cc <__aeabi_dsub>
 80a370c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a3710:	4680      	mov	r8, r0
 80a3712:	4689      	mov	r9, r1
 80a3714:	4630      	mov	r0, r6
 80a3716:	4639      	mov	r1, r7
 80a3718:	f000 fdd8 	bl	80a42cc <__aeabi_dsub>
 80a371c:	4602      	mov	r2, r0
 80a371e:	460b      	mov	r3, r1
 80a3720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a3724:	f000 fdd2 	bl	80a42cc <__aeabi_dsub>
 80a3728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a372c:	f000 ff82 	bl	80a4634 <__aeabi_dmul>
 80a3730:	4602      	mov	r2, r0
 80a3732:	460b      	mov	r3, r1
 80a3734:	4640      	mov	r0, r8
 80a3736:	4649      	mov	r1, r9
 80a3738:	f000 fdc8 	bl	80a42cc <__aeabi_dsub>
 80a373c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a3740:	f000 ff78 	bl	80a4634 <__aeabi_dmul>
 80a3744:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a3748:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a374c:	463a      	mov	r2, r7
 80a374e:	4643      	mov	r3, r8
 80a3750:	4638      	mov	r0, r7
 80a3752:	4641      	mov	r1, r8
 80a3754:	f000 ff6e 	bl	80a4634 <__aeabi_dmul>
 80a3758:	a377      	add	r3, pc, #476	; (adr r3, 80a3938 <__ieee754_pow+0x4f8>)
 80a375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a375e:	4606      	mov	r6, r0
 80a3760:	460f      	mov	r7, r1
 80a3762:	f000 ff67 	bl	80a4634 <__aeabi_dmul>
 80a3766:	a376      	add	r3, pc, #472	; (adr r3, 80a3940 <__ieee754_pow+0x500>)
 80a3768:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a376c:	f000 fdb0 	bl	80a42d0 <__adddf3>
 80a3770:	4632      	mov	r2, r6
 80a3772:	463b      	mov	r3, r7
 80a3774:	f000 ff5e 	bl	80a4634 <__aeabi_dmul>
 80a3778:	a373      	add	r3, pc, #460	; (adr r3, 80a3948 <__ieee754_pow+0x508>)
 80a377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a377e:	f000 fda7 	bl	80a42d0 <__adddf3>
 80a3782:	4632      	mov	r2, r6
 80a3784:	463b      	mov	r3, r7
 80a3786:	f000 ff55 	bl	80a4634 <__aeabi_dmul>
 80a378a:	a371      	add	r3, pc, #452	; (adr r3, 80a3950 <__ieee754_pow+0x510>)
 80a378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3790:	f000 fd9e 	bl	80a42d0 <__adddf3>
 80a3794:	4632      	mov	r2, r6
 80a3796:	463b      	mov	r3, r7
 80a3798:	f000 ff4c 	bl	80a4634 <__aeabi_dmul>
 80a379c:	a36e      	add	r3, pc, #440	; (adr r3, 80a3958 <__ieee754_pow+0x518>)
 80a379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37a2:	f000 fd95 	bl	80a42d0 <__adddf3>
 80a37a6:	4632      	mov	r2, r6
 80a37a8:	463b      	mov	r3, r7
 80a37aa:	f000 ff43 	bl	80a4634 <__aeabi_dmul>
 80a37ae:	a36c      	add	r3, pc, #432	; (adr r3, 80a3960 <__ieee754_pow+0x520>)
 80a37b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37b4:	f000 fd8c 	bl	80a42d0 <__adddf3>
 80a37b8:	4632      	mov	r2, r6
 80a37ba:	4680      	mov	r8, r0
 80a37bc:	4689      	mov	r9, r1
 80a37be:	463b      	mov	r3, r7
 80a37c0:	4630      	mov	r0, r6
 80a37c2:	4639      	mov	r1, r7
 80a37c4:	f000 ff36 	bl	80a4634 <__aeabi_dmul>
 80a37c8:	4602      	mov	r2, r0
 80a37ca:	460b      	mov	r3, r1
 80a37cc:	4640      	mov	r0, r8
 80a37ce:	4649      	mov	r1, r9
 80a37d0:	f000 ff30 	bl	80a4634 <__aeabi_dmul>
 80a37d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a37d8:	4606      	mov	r6, r0
 80a37da:	460f      	mov	r7, r1
 80a37dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a37e0:	f000 fd76 	bl	80a42d0 <__adddf3>
 80a37e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a37e8:	f000 ff24 	bl	80a4634 <__aeabi_dmul>
 80a37ec:	4632      	mov	r2, r6
 80a37ee:	463b      	mov	r3, r7
 80a37f0:	f000 fd6e 	bl	80a42d0 <__adddf3>
 80a37f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a37f8:	4680      	mov	r8, r0
 80a37fa:	4689      	mov	r9, r1
 80a37fc:	4632      	mov	r2, r6
 80a37fe:	463b      	mov	r3, r7
 80a3800:	4630      	mov	r0, r6
 80a3802:	4639      	mov	r1, r7
 80a3804:	f000 ff16 	bl	80a4634 <__aeabi_dmul>
 80a3808:	2200      	movs	r2, #0
 80a380a:	4b60      	ldr	r3, [pc, #384]	; (80a398c <__ieee754_pow+0x54c>)
 80a380c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a3810:	f000 fd5e 	bl	80a42d0 <__adddf3>
 80a3814:	4642      	mov	r2, r8
 80a3816:	464b      	mov	r3, r9
 80a3818:	f000 fd5a 	bl	80a42d0 <__adddf3>
 80a381c:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a3820:	460f      	mov	r7, r1
 80a3822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3826:	465a      	mov	r2, fp
 80a3828:	463b      	mov	r3, r7
 80a382a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a382e:	465e      	mov	r6, fp
 80a3830:	f000 ff00 	bl	80a4634 <__aeabi_dmul>
 80a3834:	2200      	movs	r2, #0
 80a3836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a383a:	4b54      	ldr	r3, [pc, #336]	; (80a398c <__ieee754_pow+0x54c>)
 80a383c:	4630      	mov	r0, r6
 80a383e:	4639      	mov	r1, r7
 80a3840:	f000 fd44 	bl	80a42cc <__aeabi_dsub>
 80a3844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3848:	f000 fd40 	bl	80a42cc <__aeabi_dsub>
 80a384c:	4602      	mov	r2, r0
 80a384e:	460b      	mov	r3, r1
 80a3850:	4640      	mov	r0, r8
 80a3852:	4649      	mov	r1, r9
 80a3854:	f000 fd3a 	bl	80a42cc <__aeabi_dsub>
 80a3858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a385c:	f000 feea 	bl	80a4634 <__aeabi_dmul>
 80a3860:	4632      	mov	r2, r6
 80a3862:	4680      	mov	r8, r0
 80a3864:	4689      	mov	r9, r1
 80a3866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a386a:	463b      	mov	r3, r7
 80a386c:	f000 fee2 	bl	80a4634 <__aeabi_dmul>
 80a3870:	4602      	mov	r2, r0
 80a3872:	460b      	mov	r3, r1
 80a3874:	4640      	mov	r0, r8
 80a3876:	4649      	mov	r1, r9
 80a3878:	f000 fd2a 	bl	80a42d0 <__adddf3>
 80a387c:	4680      	mov	r8, r0
 80a387e:	4689      	mov	r9, r1
 80a3880:	4602      	mov	r2, r0
 80a3882:	460b      	mov	r3, r1
 80a3884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3888:	f000 fd22 	bl	80a42d0 <__adddf3>
 80a388c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a3890:	a335      	add	r3, pc, #212	; (adr r3, 80a3968 <__ieee754_pow+0x528>)
 80a3892:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3896:	4658      	mov	r0, fp
 80a3898:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a389c:	465e      	mov	r6, fp
 80a389e:	460f      	mov	r7, r1
 80a38a0:	f000 fec8 	bl	80a4634 <__aeabi_dmul>
 80a38a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a38a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a38ac:	4630      	mov	r0, r6
 80a38ae:	4639      	mov	r1, r7
 80a38b0:	f000 fd0c 	bl	80a42cc <__aeabi_dsub>
 80a38b4:	4602      	mov	r2, r0
 80a38b6:	460b      	mov	r3, r1
 80a38b8:	4640      	mov	r0, r8
 80a38ba:	4649      	mov	r1, r9
 80a38bc:	f000 fd06 	bl	80a42cc <__aeabi_dsub>
 80a38c0:	a32b      	add	r3, pc, #172	; (adr r3, 80a3970 <__ieee754_pow+0x530>)
 80a38c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a38c6:	f000 feb5 	bl	80a4634 <__aeabi_dmul>
 80a38ca:	a32b      	add	r3, pc, #172	; (adr r3, 80a3978 <__ieee754_pow+0x538>)
 80a38cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a38d0:	4680      	mov	r8, r0
 80a38d2:	4689      	mov	r9, r1
 80a38d4:	4630      	mov	r0, r6
 80a38d6:	4639      	mov	r1, r7
 80a38d8:	f000 feac 	bl	80a4634 <__aeabi_dmul>
 80a38dc:	4602      	mov	r2, r0
 80a38de:	460b      	mov	r3, r1
 80a38e0:	4640      	mov	r0, r8
 80a38e2:	4649      	mov	r1, r9
 80a38e4:	f000 fcf4 	bl	80a42d0 <__adddf3>
 80a38e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a38ec:	f000 fcf0 	bl	80a42d0 <__adddf3>
 80a38f0:	4680      	mov	r8, r0
 80a38f2:	4650      	mov	r0, sl
 80a38f4:	4689      	mov	r9, r1
 80a38f6:	f000 fe37 	bl	80a4568 <__aeabi_i2d>
 80a38fa:	4606      	mov	r6, r0
 80a38fc:	460f      	mov	r7, r1
 80a38fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3902:	4642      	mov	r2, r8
 80a3904:	464b      	mov	r3, r9
 80a3906:	f000 fce3 	bl	80a42d0 <__adddf3>
 80a390a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a390e:	f000 fcdf 	bl	80a42d0 <__adddf3>
 80a3912:	4632      	mov	r2, r6
 80a3914:	463b      	mov	r3, r7
 80a3916:	f000 fcdb 	bl	80a42d0 <__adddf3>
 80a391a:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a391e:	4632      	mov	r2, r6
 80a3920:	4658      	mov	r0, fp
 80a3922:	463b      	mov	r3, r7
 80a3924:	46da      	mov	sl, fp
 80a3926:	468b      	mov	fp, r1
 80a3928:	f000 fcd0 	bl	80a42cc <__aeabi_dsub>
 80a392c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3930:	e030      	b.n	80a3994 <__ieee754_pow+0x554>
 80a3932:	bf00      	nop
 80a3934:	f3af 8000 	nop.w
 80a3938:	4a454eef 	.word	0x4a454eef
 80a393c:	3fca7e28 	.word	0x3fca7e28
 80a3940:	93c9db65 	.word	0x93c9db65
 80a3944:	3fcd864a 	.word	0x3fcd864a
 80a3948:	a91d4101 	.word	0xa91d4101
 80a394c:	3fd17460 	.word	0x3fd17460
 80a3950:	518f264d 	.word	0x518f264d
 80a3954:	3fd55555 	.word	0x3fd55555
 80a3958:	db6fabff 	.word	0xdb6fabff
 80a395c:	3fdb6db6 	.word	0x3fdb6db6
 80a3960:	33333303 	.word	0x33333303
 80a3964:	3fe33333 	.word	0x3fe33333
 80a3968:	e0000000 	.word	0xe0000000
 80a396c:	3feec709 	.word	0x3feec709
 80a3970:	dc3a03fd 	.word	0xdc3a03fd
 80a3974:	3feec709 	.word	0x3feec709
 80a3978:	145b01f5 	.word	0x145b01f5
 80a397c:	be3e2fe0 	.word	0xbe3e2fe0
 80a3980:	43400000 	.word	0x43400000
 80a3984:	000bb679 	.word	0x000bb679
 80a3988:	3ff00000 	.word	0x3ff00000
 80a398c:	40080000 	.word	0x40080000
 80a3990:	0003988e 	.word	0x0003988e
 80a3994:	f000 fc9a 	bl	80a42cc <__aeabi_dsub>
 80a3998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a399c:	f000 fc96 	bl	80a42cc <__aeabi_dsub>
 80a39a0:	4602      	mov	r2, r0
 80a39a2:	460b      	mov	r3, r1
 80a39a4:	4640      	mov	r0, r8
 80a39a6:	4649      	mov	r1, r9
 80a39a8:	f000 fc90 	bl	80a42cc <__aeabi_dsub>
 80a39ac:	4680      	mov	r8, r0
 80a39ae:	4689      	mov	r9, r1
 80a39b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a39b4:	3c01      	subs	r4, #1
 80a39b6:	ea54 0305 	orrs.w	r3, r4, r5
 80a39ba:	bf14      	ite	ne
 80a39bc:	4cd6      	ldrne	r4, [pc, #856]	; (80a3d18 <__ieee754_pow+0x8d8>)
 80a39be:	4cd7      	ldreq	r4, [pc, #860]	; (80a3d1c <__ieee754_pow+0x8dc>)
 80a39c0:	2300      	movs	r3, #0
 80a39c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a39c6:	460b      	mov	r3, r1
 80a39c8:	4614      	mov	r4, r2
 80a39ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a39ce:	2300      	movs	r3, #0
 80a39d0:	9302      	str	r3, [sp, #8]
 80a39d2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a39d6:	4608      	mov	r0, r1
 80a39d8:	462b      	mov	r3, r5
 80a39da:	4611      	mov	r1, r2
 80a39dc:	4622      	mov	r2, r4
 80a39de:	f000 fc75 	bl	80a42cc <__aeabi_dsub>
 80a39e2:	4652      	mov	r2, sl
 80a39e4:	465b      	mov	r3, fp
 80a39e6:	f000 fe25 	bl	80a4634 <__aeabi_dmul>
 80a39ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a39ee:	4606      	mov	r6, r0
 80a39f0:	460f      	mov	r7, r1
 80a39f2:	4640      	mov	r0, r8
 80a39f4:	4649      	mov	r1, r9
 80a39f6:	f000 fe1d 	bl	80a4634 <__aeabi_dmul>
 80a39fa:	4602      	mov	r2, r0
 80a39fc:	460b      	mov	r3, r1
 80a39fe:	4630      	mov	r0, r6
 80a3a00:	4639      	mov	r1, r7
 80a3a02:	f000 fc65 	bl	80a42d0 <__adddf3>
 80a3a06:	4606      	mov	r6, r0
 80a3a08:	460f      	mov	r7, r1
 80a3a0a:	4622      	mov	r2, r4
 80a3a0c:	462b      	mov	r3, r5
 80a3a0e:	4650      	mov	r0, sl
 80a3a10:	4659      	mov	r1, fp
 80a3a12:	e9cd 6700 	strd	r6, r7, [sp]
 80a3a16:	f000 fe0d 	bl	80a4634 <__aeabi_dmul>
 80a3a1a:	460b      	mov	r3, r1
 80a3a1c:	4602      	mov	r2, r0
 80a3a1e:	4680      	mov	r8, r0
 80a3a20:	4689      	mov	r9, r1
 80a3a22:	4630      	mov	r0, r6
 80a3a24:	4639      	mov	r1, r7
 80a3a26:	f000 fc53 	bl	80a42d0 <__adddf3>
 80a3a2a:	4bbd      	ldr	r3, [pc, #756]	; (80a3d20 <__ieee754_pow+0x8e0>)
 80a3a2c:	4606      	mov	r6, r0
 80a3a2e:	4299      	cmp	r1, r3
 80a3a30:	460d      	mov	r5, r1
 80a3a32:	460c      	mov	r4, r1
 80a3a34:	f340 810e 	ble.w	80a3c54 <__ieee754_pow+0x814>
 80a3a38:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a3a3c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a3a40:	4303      	orrs	r3, r0
 80a3a42:	f040 81f0 	bne.w	80a3e26 <__ieee754_pow+0x9e6>
 80a3a46:	a3a0      	add	r3, pc, #640	; (adr r3, 80a3cc8 <__ieee754_pow+0x888>)
 80a3a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3a50:	f000 fc3e 	bl	80a42d0 <__adddf3>
 80a3a54:	4642      	mov	r2, r8
 80a3a56:	4682      	mov	sl, r0
 80a3a58:	468b      	mov	fp, r1
 80a3a5a:	464b      	mov	r3, r9
 80a3a5c:	4630      	mov	r0, r6
 80a3a5e:	4629      	mov	r1, r5
 80a3a60:	f000 fc34 	bl	80a42cc <__aeabi_dsub>
 80a3a64:	4602      	mov	r2, r0
 80a3a66:	460b      	mov	r3, r1
 80a3a68:	4650      	mov	r0, sl
 80a3a6a:	4659      	mov	r1, fp
 80a3a6c:	f001 f872 	bl	80a4b54 <__aeabi_dcmpgt>
 80a3a70:	2800      	cmp	r0, #0
 80a3a72:	f040 81d8 	bne.w	80a3e26 <__ieee754_pow+0x9e6>
 80a3a76:	462f      	mov	r7, r5
 80a3a78:	153b      	asrs	r3, r7, #20
 80a3a7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a3a7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a3a82:	fa42 f303 	asr.w	r3, r2, r3
 80a3a86:	4423      	add	r3, r4
 80a3a88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a3a8c:	4ea5      	ldr	r6, [pc, #660]	; (80a3d24 <__ieee754_pow+0x8e4>)
 80a3a8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a3a92:	4116      	asrs	r6, r2
 80a3a94:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a3a98:	2000      	movs	r0, #0
 80a3a9a:	f1c2 0514 	rsb	r5, r2, #20
 80a3a9e:	ea23 0106 	bic.w	r1, r3, r6
 80a3aa2:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a3aa6:	4602      	mov	r2, r0
 80a3aa8:	460b      	mov	r3, r1
 80a3aaa:	2c00      	cmp	r4, #0
 80a3aac:	fa4b fb05 	asr.w	fp, fp, r5
 80a3ab0:	4640      	mov	r0, r8
 80a3ab2:	4649      	mov	r1, r9
 80a3ab4:	bfb8      	it	lt
 80a3ab6:	f1cb 0b00 	rsblt	fp, fp, #0
 80a3aba:	f000 fc07 	bl	80a42cc <__aeabi_dsub>
 80a3abe:	4602      	mov	r2, r0
 80a3ac0:	460b      	mov	r3, r1
 80a3ac2:	4680      	mov	r8, r0
 80a3ac4:	4689      	mov	r9, r1
 80a3ac6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3aca:	f000 fc01 	bl	80a42d0 <__adddf3>
 80a3ace:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a3ad2:	2400      	movs	r4, #0
 80a3ad4:	a37e      	add	r3, pc, #504	; (adr r3, 80a3cd0 <__ieee754_pow+0x890>)
 80a3ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ada:	4620      	mov	r0, r4
 80a3adc:	460d      	mov	r5, r1
 80a3ade:	f000 fda9 	bl	80a4634 <__aeabi_dmul>
 80a3ae2:	4642      	mov	r2, r8
 80a3ae4:	4606      	mov	r6, r0
 80a3ae6:	460f      	mov	r7, r1
 80a3ae8:	464b      	mov	r3, r9
 80a3aea:	4620      	mov	r0, r4
 80a3aec:	4629      	mov	r1, r5
 80a3aee:	f000 fbed 	bl	80a42cc <__aeabi_dsub>
 80a3af2:	4602      	mov	r2, r0
 80a3af4:	460b      	mov	r3, r1
 80a3af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3afa:	f000 fbe7 	bl	80a42cc <__aeabi_dsub>
 80a3afe:	a376      	add	r3, pc, #472	; (adr r3, 80a3cd8 <__ieee754_pow+0x898>)
 80a3b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b04:	f000 fd96 	bl	80a4634 <__aeabi_dmul>
 80a3b08:	a375      	add	r3, pc, #468	; (adr r3, 80a3ce0 <__ieee754_pow+0x8a0>)
 80a3b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b0e:	4680      	mov	r8, r0
 80a3b10:	4689      	mov	r9, r1
 80a3b12:	4620      	mov	r0, r4
 80a3b14:	4629      	mov	r1, r5
 80a3b16:	f000 fd8d 	bl	80a4634 <__aeabi_dmul>
 80a3b1a:	4602      	mov	r2, r0
 80a3b1c:	460b      	mov	r3, r1
 80a3b1e:	4640      	mov	r0, r8
 80a3b20:	4649      	mov	r1, r9
 80a3b22:	f000 fbd5 	bl	80a42d0 <__adddf3>
 80a3b26:	4680      	mov	r8, r0
 80a3b28:	4689      	mov	r9, r1
 80a3b2a:	4602      	mov	r2, r0
 80a3b2c:	460b      	mov	r3, r1
 80a3b2e:	4630      	mov	r0, r6
 80a3b30:	4639      	mov	r1, r7
 80a3b32:	f000 fbcd 	bl	80a42d0 <__adddf3>
 80a3b36:	4632      	mov	r2, r6
 80a3b38:	463b      	mov	r3, r7
 80a3b3a:	4604      	mov	r4, r0
 80a3b3c:	460d      	mov	r5, r1
 80a3b3e:	f000 fbc5 	bl	80a42cc <__aeabi_dsub>
 80a3b42:	4602      	mov	r2, r0
 80a3b44:	460b      	mov	r3, r1
 80a3b46:	4640      	mov	r0, r8
 80a3b48:	4649      	mov	r1, r9
 80a3b4a:	f000 fbbf 	bl	80a42cc <__aeabi_dsub>
 80a3b4e:	4622      	mov	r2, r4
 80a3b50:	4680      	mov	r8, r0
 80a3b52:	4689      	mov	r9, r1
 80a3b54:	462b      	mov	r3, r5
 80a3b56:	4620      	mov	r0, r4
 80a3b58:	4629      	mov	r1, r5
 80a3b5a:	f000 fd6b 	bl	80a4634 <__aeabi_dmul>
 80a3b5e:	a362      	add	r3, pc, #392	; (adr r3, 80a3ce8 <__ieee754_pow+0x8a8>)
 80a3b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b64:	4606      	mov	r6, r0
 80a3b66:	460f      	mov	r7, r1
 80a3b68:	f000 fd64 	bl	80a4634 <__aeabi_dmul>
 80a3b6c:	a360      	add	r3, pc, #384	; (adr r3, 80a3cf0 <__ieee754_pow+0x8b0>)
 80a3b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b72:	f000 fbab 	bl	80a42cc <__aeabi_dsub>
 80a3b76:	4632      	mov	r2, r6
 80a3b78:	463b      	mov	r3, r7
 80a3b7a:	f000 fd5b 	bl	80a4634 <__aeabi_dmul>
 80a3b7e:	a35e      	add	r3, pc, #376	; (adr r3, 80a3cf8 <__ieee754_pow+0x8b8>)
 80a3b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b84:	f000 fba4 	bl	80a42d0 <__adddf3>
 80a3b88:	4632      	mov	r2, r6
 80a3b8a:	463b      	mov	r3, r7
 80a3b8c:	f000 fd52 	bl	80a4634 <__aeabi_dmul>
 80a3b90:	a35b      	add	r3, pc, #364	; (adr r3, 80a3d00 <__ieee754_pow+0x8c0>)
 80a3b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b96:	f000 fb99 	bl	80a42cc <__aeabi_dsub>
 80a3b9a:	4632      	mov	r2, r6
 80a3b9c:	463b      	mov	r3, r7
 80a3b9e:	f000 fd49 	bl	80a4634 <__aeabi_dmul>
 80a3ba2:	a359      	add	r3, pc, #356	; (adr r3, 80a3d08 <__ieee754_pow+0x8c8>)
 80a3ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3ba8:	f000 fb92 	bl	80a42d0 <__adddf3>
 80a3bac:	4632      	mov	r2, r6
 80a3bae:	463b      	mov	r3, r7
 80a3bb0:	f000 fd40 	bl	80a4634 <__aeabi_dmul>
 80a3bb4:	4602      	mov	r2, r0
 80a3bb6:	460b      	mov	r3, r1
 80a3bb8:	4620      	mov	r0, r4
 80a3bba:	4629      	mov	r1, r5
 80a3bbc:	f000 fb86 	bl	80a42cc <__aeabi_dsub>
 80a3bc0:	4606      	mov	r6, r0
 80a3bc2:	460f      	mov	r7, r1
 80a3bc4:	4602      	mov	r2, r0
 80a3bc6:	460b      	mov	r3, r1
 80a3bc8:	4620      	mov	r0, r4
 80a3bca:	4629      	mov	r1, r5
 80a3bcc:	f000 fd32 	bl	80a4634 <__aeabi_dmul>
 80a3bd0:	2200      	movs	r2, #0
 80a3bd2:	e9cd 0100 	strd	r0, r1, [sp]
 80a3bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3bda:	4630      	mov	r0, r6
 80a3bdc:	4639      	mov	r1, r7
 80a3bde:	f000 fb75 	bl	80a42cc <__aeabi_dsub>
 80a3be2:	4602      	mov	r2, r0
 80a3be4:	460b      	mov	r3, r1
 80a3be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3bea:	f000 fe4d 	bl	80a4888 <__aeabi_ddiv>
 80a3bee:	4642      	mov	r2, r8
 80a3bf0:	4606      	mov	r6, r0
 80a3bf2:	460f      	mov	r7, r1
 80a3bf4:	464b      	mov	r3, r9
 80a3bf6:	4620      	mov	r0, r4
 80a3bf8:	4629      	mov	r1, r5
 80a3bfa:	f000 fd1b 	bl	80a4634 <__aeabi_dmul>
 80a3bfe:	4642      	mov	r2, r8
 80a3c00:	464b      	mov	r3, r9
 80a3c02:	f000 fb65 	bl	80a42d0 <__adddf3>
 80a3c06:	4602      	mov	r2, r0
 80a3c08:	460b      	mov	r3, r1
 80a3c0a:	4630      	mov	r0, r6
 80a3c0c:	4639      	mov	r1, r7
 80a3c0e:	f000 fb5d 	bl	80a42cc <__aeabi_dsub>
 80a3c12:	4622      	mov	r2, r4
 80a3c14:	462b      	mov	r3, r5
 80a3c16:	f000 fb59 	bl	80a42cc <__aeabi_dsub>
 80a3c1a:	4602      	mov	r2, r0
 80a3c1c:	460b      	mov	r3, r1
 80a3c1e:	2000      	movs	r0, #0
 80a3c20:	493d      	ldr	r1, [pc, #244]	; (80a3d18 <__ieee754_pow+0x8d8>)
 80a3c22:	f000 fb53 	bl	80a42cc <__aeabi_dsub>
 80a3c26:	448a      	add	sl, r1
 80a3c28:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a3c2c:	f2c0 8137 	blt.w	80a3e9e <__ieee754_pow+0xa5e>
 80a3c30:	4651      	mov	r1, sl
 80a3c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3c36:	f000 fcfd 	bl	80a4634 <__aeabi_dmul>
 80a3c3a:	4683      	mov	fp, r0
 80a3c3c:	e418      	b.n	80a3470 <__ieee754_pow+0x30>
 80a3c3e:	46f3      	mov	fp, lr
 80a3c40:	4935      	ldr	r1, [pc, #212]	; (80a3d18 <__ieee754_pow+0x8d8>)
 80a3c42:	e415      	b.n	80a3470 <__ieee754_pow+0x30>
 80a3c44:	464a      	mov	r2, r9
 80a3c46:	4648      	mov	r0, r9
 80a3c48:	463b      	mov	r3, r7
 80a3c4a:	4639      	mov	r1, r7
 80a3c4c:	f000 fcf2 	bl	80a4634 <__aeabi_dmul>
 80a3c50:	4683      	mov	fp, r0
 80a3c52:	e40d      	b.n	80a3470 <__ieee754_pow+0x30>
 80a3c54:	4b34      	ldr	r3, [pc, #208]	; (80a3d28 <__ieee754_pow+0x8e8>)
 80a3c56:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a3c5a:	429f      	cmp	r7, r3
 80a3c5c:	f340 8101 	ble.w	80a3e62 <__ieee754_pow+0xa22>
 80a3c60:	4b32      	ldr	r3, [pc, #200]	; (80a3d2c <__ieee754_pow+0x8ec>)
 80a3c62:	440b      	add	r3, r1
 80a3c64:	4303      	orrs	r3, r0
 80a3c66:	d10c      	bne.n	80a3c82 <__ieee754_pow+0x842>
 80a3c68:	4642      	mov	r2, r8
 80a3c6a:	464b      	mov	r3, r9
 80a3c6c:	f000 fb2e 	bl	80a42cc <__aeabi_dsub>
 80a3c70:	4602      	mov	r2, r0
 80a3c72:	460b      	mov	r3, r1
 80a3c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3c78:	f000 ff58 	bl	80a4b2c <__aeabi_dcmple>
 80a3c7c:	2800      	cmp	r0, #0
 80a3c7e:	f43f aefb 	beq.w	80a3a78 <__ieee754_pow+0x638>
 80a3c82:	a323      	add	r3, pc, #140	; (adr r3, 80a3d10 <__ieee754_pow+0x8d0>)
 80a3c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3c8c:	f000 fcd2 	bl	80a4634 <__aeabi_dmul>
 80a3c90:	a31f      	add	r3, pc, #124	; (adr r3, 80a3d10 <__ieee754_pow+0x8d0>)
 80a3c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3c96:	f000 fccd 	bl	80a4634 <__aeabi_dmul>
 80a3c9a:	4683      	mov	fp, r0
 80a3c9c:	f7ff bbe8 	b.w	80a3470 <__ieee754_pow+0x30>
 80a3ca0:	f1ba 0f00 	cmp.w	sl, #0
 80a3ca4:	f6bf acae 	bge.w	80a3604 <__ieee754_pow+0x1c4>
 80a3ca8:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a3cac:	469b      	mov	fp, r3
 80a3cae:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a3cb2:	f7ff bbdd 	b.w	80a3470 <__ieee754_pow+0x30>
 80a3cb6:	4602      	mov	r2, r0
 80a3cb8:	460b      	mov	r3, r1
 80a3cba:	2000      	movs	r0, #0
 80a3cbc:	4916      	ldr	r1, [pc, #88]	; (80a3d18 <__ieee754_pow+0x8d8>)
 80a3cbe:	f000 fde3 	bl	80a4888 <__aeabi_ddiv>
 80a3cc2:	e441      	b.n	80a3548 <__ieee754_pow+0x108>
 80a3cc4:	f3af 8000 	nop.w
 80a3cc8:	652b82fe 	.word	0x652b82fe
 80a3ccc:	3c971547 	.word	0x3c971547
 80a3cd0:	00000000 	.word	0x00000000
 80a3cd4:	3fe62e43 	.word	0x3fe62e43
 80a3cd8:	fefa39ef 	.word	0xfefa39ef
 80a3cdc:	3fe62e42 	.word	0x3fe62e42
 80a3ce0:	0ca86c39 	.word	0x0ca86c39
 80a3ce4:	be205c61 	.word	0xbe205c61
 80a3ce8:	72bea4d0 	.word	0x72bea4d0
 80a3cec:	3e663769 	.word	0x3e663769
 80a3cf0:	c5d26bf1 	.word	0xc5d26bf1
 80a3cf4:	3ebbbd41 	.word	0x3ebbbd41
 80a3cf8:	af25de2c 	.word	0xaf25de2c
 80a3cfc:	3f11566a 	.word	0x3f11566a
 80a3d00:	16bebd93 	.word	0x16bebd93
 80a3d04:	3f66c16c 	.word	0x3f66c16c
 80a3d08:	5555553e 	.word	0x5555553e
 80a3d0c:	3fc55555 	.word	0x3fc55555
 80a3d10:	c2f8f359 	.word	0xc2f8f359
 80a3d14:	01a56e1f 	.word	0x01a56e1f
 80a3d18:	3ff00000 	.word	0x3ff00000
 80a3d1c:	bff00000 	.word	0xbff00000
 80a3d20:	408fffff 	.word	0x408fffff
 80a3d24:	000fffff 	.word	0x000fffff
 80a3d28:	4090cbff 	.word	0x4090cbff
 80a3d2c:	3f6f3400 	.word	0x3f6f3400
 80a3d30:	4b6f      	ldr	r3, [pc, #444]	; (80a3ef0 <__ieee754_pow+0xab0>)
 80a3d32:	429e      	cmp	r6, r3
 80a3d34:	f77f ac63 	ble.w	80a35fe <__ieee754_pow+0x1be>
 80a3d38:	4b6e      	ldr	r3, [pc, #440]	; (80a3ef4 <__ieee754_pow+0xab4>)
 80a3d3a:	429e      	cmp	r6, r3
 80a3d3c:	f73f abee 	bgt.w	80a351c <__ieee754_pow+0xdc>
 80a3d40:	2200      	movs	r2, #0
 80a3d42:	4b6c      	ldr	r3, [pc, #432]	; (80a3ef4 <__ieee754_pow+0xab4>)
 80a3d44:	f000 fac2 	bl	80a42cc <__aeabi_dsub>
 80a3d48:	a35b      	add	r3, pc, #364	; (adr r3, 80a3eb8 <__ieee754_pow+0xa78>)
 80a3d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d4e:	4606      	mov	r6, r0
 80a3d50:	460f      	mov	r7, r1
 80a3d52:	f000 fc6f 	bl	80a4634 <__aeabi_dmul>
 80a3d56:	a35a      	add	r3, pc, #360	; (adr r3, 80a3ec0 <__ieee754_pow+0xa80>)
 80a3d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3d5c:	4680      	mov	r8, r0
 80a3d5e:	4689      	mov	r9, r1
 80a3d60:	4630      	mov	r0, r6
 80a3d62:	4639      	mov	r1, r7
 80a3d64:	f000 fc66 	bl	80a4634 <__aeabi_dmul>
 80a3d68:	2200      	movs	r2, #0
 80a3d6a:	4682      	mov	sl, r0
 80a3d6c:	468b      	mov	fp, r1
 80a3d6e:	4b62      	ldr	r3, [pc, #392]	; (80a3ef8 <__ieee754_pow+0xab8>)
 80a3d70:	4630      	mov	r0, r6
 80a3d72:	4639      	mov	r1, r7
 80a3d74:	f000 fc5e 	bl	80a4634 <__aeabi_dmul>
 80a3d78:	4602      	mov	r2, r0
 80a3d7a:	460b      	mov	r3, r1
 80a3d7c:	a152      	add	r1, pc, #328	; (adr r1, 80a3ec8 <__ieee754_pow+0xa88>)
 80a3d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a3d82:	f000 faa3 	bl	80a42cc <__aeabi_dsub>
 80a3d86:	4632      	mov	r2, r6
 80a3d88:	463b      	mov	r3, r7
 80a3d8a:	f000 fc53 	bl	80a4634 <__aeabi_dmul>
 80a3d8e:	4602      	mov	r2, r0
 80a3d90:	460b      	mov	r3, r1
 80a3d92:	2000      	movs	r0, #0
 80a3d94:	4959      	ldr	r1, [pc, #356]	; (80a3efc <__ieee754_pow+0xabc>)
 80a3d96:	f000 fa99 	bl	80a42cc <__aeabi_dsub>
 80a3d9a:	4632      	mov	r2, r6
 80a3d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a3da0:	463b      	mov	r3, r7
 80a3da2:	4630      	mov	r0, r6
 80a3da4:	4639      	mov	r1, r7
 80a3da6:	f000 fc45 	bl	80a4634 <__aeabi_dmul>
 80a3daa:	4602      	mov	r2, r0
 80a3dac:	460b      	mov	r3, r1
 80a3dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3db2:	f000 fc3f 	bl	80a4634 <__aeabi_dmul>
 80a3db6:	a346      	add	r3, pc, #280	; (adr r3, 80a3ed0 <__ieee754_pow+0xa90>)
 80a3db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3dbc:	f000 fc3a 	bl	80a4634 <__aeabi_dmul>
 80a3dc0:	4602      	mov	r2, r0
 80a3dc2:	460b      	mov	r3, r1
 80a3dc4:	4650      	mov	r0, sl
 80a3dc6:	4659      	mov	r1, fp
 80a3dc8:	f000 fa80 	bl	80a42cc <__aeabi_dsub>
 80a3dcc:	4602      	mov	r2, r0
 80a3dce:	460b      	mov	r3, r1
 80a3dd0:	4606      	mov	r6, r0
 80a3dd2:	460f      	mov	r7, r1
 80a3dd4:	4640      	mov	r0, r8
 80a3dd6:	4649      	mov	r1, r9
 80a3dd8:	f000 fa7a 	bl	80a42d0 <__adddf3>
 80a3ddc:	4642      	mov	r2, r8
 80a3dde:	464b      	mov	r3, r9
 80a3de0:	2000      	movs	r0, #0
 80a3de2:	4682      	mov	sl, r0
 80a3de4:	468b      	mov	fp, r1
 80a3de6:	f000 fa71 	bl	80a42cc <__aeabi_dsub>
 80a3dea:	4602      	mov	r2, r0
 80a3dec:	460b      	mov	r3, r1
 80a3dee:	4630      	mov	r0, r6
 80a3df0:	4639      	mov	r1, r7
 80a3df2:	f000 fa6b 	bl	80a42cc <__aeabi_dsub>
 80a3df6:	4680      	mov	r8, r0
 80a3df8:	4689      	mov	r9, r1
 80a3dfa:	e5d9      	b.n	80a39b0 <__ieee754_pow+0x570>
 80a3dfc:	2200      	movs	r2, #0
 80a3dfe:	2300      	movs	r3, #0
 80a3e00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3e04:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3e08:	4b3a      	ldr	r3, [pc, #232]	; (80a3ef4 <__ieee754_pow+0xab4>)
 80a3e0a:	2200      	movs	r2, #0
 80a3e0c:	2600      	movs	r6, #0
 80a3e0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3e12:	e43d      	b.n	80a3690 <__ieee754_pow+0x250>
 80a3e14:	464a      	mov	r2, r9
 80a3e16:	463b      	mov	r3, r7
 80a3e18:	2000      	movs	r0, #0
 80a3e1a:	4936      	ldr	r1, [pc, #216]	; (80a3ef4 <__ieee754_pow+0xab4>)
 80a3e1c:	f000 fd34 	bl	80a4888 <__aeabi_ddiv>
 80a3e20:	4683      	mov	fp, r0
 80a3e22:	f7ff bb25 	b.w	80a3470 <__ieee754_pow+0x30>
 80a3e26:	a32c      	add	r3, pc, #176	; (adr r3, 80a3ed8 <__ieee754_pow+0xa98>)
 80a3e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a3e30:	f000 fc00 	bl	80a4634 <__aeabi_dmul>
 80a3e34:	a328      	add	r3, pc, #160	; (adr r3, 80a3ed8 <__ieee754_pow+0xa98>)
 80a3e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e3a:	f000 fbfb 	bl	80a4634 <__aeabi_dmul>
 80a3e3e:	4683      	mov	fp, r0
 80a3e40:	f7ff bb16 	b.w	80a3470 <__ieee754_pow+0x30>
 80a3e44:	f1be 0f00 	cmp.w	lr, #0
 80a3e48:	f47f ab4f 	bne.w	80a34ea <__ieee754_pow+0xaa>
 80a3e4c:	f1c3 0314 	rsb	r3, r3, #20
 80a3e50:	fa48 f203 	asr.w	r2, r8, r3
 80a3e54:	fa02 f303 	lsl.w	r3, r2, r3
 80a3e58:	4598      	cmp	r8, r3
 80a3e5a:	d024      	beq.n	80a3ea6 <__ieee754_pow+0xa66>
 80a3e5c:	4674      	mov	r4, lr
 80a3e5e:	f7ff bb21 	b.w	80a34a4 <__ieee754_pow+0x64>
 80a3e62:	4b26      	ldr	r3, [pc, #152]	; (80a3efc <__ieee754_pow+0xabc>)
 80a3e64:	429f      	cmp	r7, r3
 80a3e66:	f73f ae07 	bgt.w	80a3a78 <__ieee754_pow+0x638>
 80a3e6a:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a3e6e:	469a      	mov	sl, r3
 80a3e70:	469b      	mov	fp, r3
 80a3e72:	e62e      	b.n	80a3ad2 <__ieee754_pow+0x692>
 80a3e74:	4602      	mov	r2, r0
 80a3e76:	460b      	mov	r3, r1
 80a3e78:	f7ff bbb9 	b.w	80a35ee <__ieee754_pow+0x1ae>
 80a3e7c:	4b20      	ldr	r3, [pc, #128]	; (80a3f00 <__ieee754_pow+0xac0>)
 80a3e7e:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a3e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3e86:	a316      	add	r3, pc, #88	; (adr r3, 80a3ee0 <__ieee754_pow+0xaa0>)
 80a3e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3e90:	a315      	add	r3, pc, #84	; (adr r3, 80a3ee8 <__ieee754_pow+0xaa8>)
 80a3e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3e96:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a3e9a:	f7ff bbf9 	b.w	80a3690 <__ieee754_pow+0x250>
 80a3e9e:	465a      	mov	r2, fp
 80a3ea0:	f000 f996 	bl	80a41d0 <scalbn>
 80a3ea4:	e6c5      	b.n	80a3c32 <__ieee754_pow+0x7f2>
 80a3ea6:	f002 0201 	and.w	r2, r2, #1
 80a3eaa:	f1c2 0402 	rsb	r4, r2, #2
 80a3eae:	f7ff baf9 	b.w	80a34a4 <__ieee754_pow+0x64>
 80a3eb2:	bf00      	nop
 80a3eb4:	f3af 8000 	nop.w
 80a3eb8:	60000000 	.word	0x60000000
 80a3ebc:	3ff71547 	.word	0x3ff71547
 80a3ec0:	f85ddf44 	.word	0xf85ddf44
 80a3ec4:	3e54ae0b 	.word	0x3e54ae0b
 80a3ec8:	55555555 	.word	0x55555555
 80a3ecc:	3fd55555 	.word	0x3fd55555
 80a3ed0:	652b82fe 	.word	0x652b82fe
 80a3ed4:	3ff71547 	.word	0x3ff71547
 80a3ed8:	8800759c 	.word	0x8800759c
 80a3edc:	7e37e43c 	.word	0x7e37e43c
 80a3ee0:	40000000 	.word	0x40000000
 80a3ee4:	3fe2b803 	.word	0x3fe2b803
 80a3ee8:	43cfd006 	.word	0x43cfd006
 80a3eec:	3e4cfdeb 	.word	0x3e4cfdeb
 80a3ef0:	3feffffe 	.word	0x3feffffe
 80a3ef4:	3ff00000 	.word	0x3ff00000
 80a3ef8:	3fd00000 	.word	0x3fd00000
 80a3efc:	3fe00000 	.word	0x3fe00000
 80a3f00:	3ff80000 	.word	0x3ff80000

080a3f04 <__ieee754_sqrt>:
 80a3f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3f08:	4e5f      	ldr	r6, [pc, #380]	; (80a4088 <__ieee754_sqrt+0x184>)
 80a3f0a:	460c      	mov	r4, r1
 80a3f0c:	46b6      	mov	lr, r6
 80a3f0e:	400e      	ands	r6, r1
 80a3f10:	4576      	cmp	r6, lr
 80a3f12:	4605      	mov	r5, r0
 80a3f14:	f000 8098 	beq.w	80a4048 <__ieee754_sqrt+0x144>
 80a3f18:	2900      	cmp	r1, #0
 80a3f1a:	460b      	mov	r3, r1
 80a3f1c:	4602      	mov	r2, r0
 80a3f1e:	dd74      	ble.n	80a400a <__ieee754_sqrt+0x106>
 80a3f20:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a3f24:	d07f      	beq.n	80a4026 <__ieee754_sqrt+0x122>
 80a3f26:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a3f2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a3f2e:	f01e 0f01 	tst.w	lr, #1
 80a3f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3f36:	d163      	bne.n	80a4000 <__ieee754_sqrt+0xfc>
 80a3f38:	2700      	movs	r7, #0
 80a3f3a:	463e      	mov	r6, r7
 80a3f3c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a3f40:	440b      	add	r3, r1
 80a3f42:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a3f46:	0052      	lsls	r2, r2, #1
 80a3f48:	2016      	movs	r0, #22
 80a3f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a3f4e:	1874      	adds	r4, r6, r1
 80a3f50:	429c      	cmp	r4, r3
 80a3f52:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a3f56:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a3f5a:	dc02      	bgt.n	80a3f62 <__ieee754_sqrt+0x5e>
 80a3f5c:	1b1b      	subs	r3, r3, r4
 80a3f5e:	1866      	adds	r6, r4, r1
 80a3f60:	440f      	add	r7, r1
 80a3f62:	3801      	subs	r0, #1
 80a3f64:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a3f68:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a3f6c:	d1ef      	bne.n	80a3f4e <__ieee754_sqrt+0x4a>
 80a3f6e:	4684      	mov	ip, r0
 80a3f70:	2420      	movs	r4, #32
 80a3f72:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a3f76:	e009      	b.n	80a3f8c <__ieee754_sqrt+0x88>
 80a3f78:	d020      	beq.n	80a3fbc <__ieee754_sqrt+0xb8>
 80a3f7a:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a3f7e:	3c01      	subs	r4, #1
 80a3f80:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a3f84:	442b      	add	r3, r5
 80a3f86:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a3f8a:	d020      	beq.n	80a3fce <__ieee754_sqrt+0xca>
 80a3f8c:	429e      	cmp	r6, r3
 80a3f8e:	eb01 050c 	add.w	r5, r1, ip
 80a3f92:	daf1      	bge.n	80a3f78 <__ieee754_sqrt+0x74>
 80a3f94:	2d00      	cmp	r5, #0
 80a3f96:	eb05 0c01 	add.w	ip, r5, r1
 80a3f9a:	db09      	blt.n	80a3fb0 <__ieee754_sqrt+0xac>
 80a3f9c:	46b0      	mov	r8, r6
 80a3f9e:	4295      	cmp	r5, r2
 80a3fa0:	eba3 0306 	sub.w	r3, r3, r6
 80a3fa4:	d900      	bls.n	80a3fa8 <__ieee754_sqrt+0xa4>
 80a3fa6:	3b01      	subs	r3, #1
 80a3fa8:	4646      	mov	r6, r8
 80a3faa:	1b52      	subs	r2, r2, r5
 80a3fac:	4408      	add	r0, r1
 80a3fae:	e7e4      	b.n	80a3f7a <__ieee754_sqrt+0x76>
 80a3fb0:	f1bc 0f00 	cmp.w	ip, #0
 80a3fb4:	dbf2      	blt.n	80a3f9c <__ieee754_sqrt+0x98>
 80a3fb6:	f106 0801 	add.w	r8, r6, #1
 80a3fba:	e7f0      	b.n	80a3f9e <__ieee754_sqrt+0x9a>
 80a3fbc:	4295      	cmp	r5, r2
 80a3fbe:	d817      	bhi.n	80a3ff0 <__ieee754_sqrt+0xec>
 80a3fc0:	2d00      	cmp	r5, #0
 80a3fc2:	eb05 0c01 	add.w	ip, r5, r1
 80a3fc6:	db49      	blt.n	80a405c <__ieee754_sqrt+0x158>
 80a3fc8:	4698      	mov	r8, r3
 80a3fca:	2300      	movs	r3, #0
 80a3fcc:	e7ec      	b.n	80a3fa8 <__ieee754_sqrt+0xa4>
 80a3fce:	4313      	orrs	r3, r2
 80a3fd0:	d110      	bne.n	80a3ff4 <__ieee754_sqrt+0xf0>
 80a3fd2:	0840      	lsrs	r0, r0, #1
 80a3fd4:	107b      	asrs	r3, r7, #1
 80a3fd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a3fda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a3fde:	07fa      	lsls	r2, r7, #31
 80a3fe0:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a3fe4:	4639      	mov	r1, r7
 80a3fe6:	bf48      	it	mi
 80a3fe8:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a3fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3ff0:	4633      	mov	r3, r6
 80a3ff2:	e7c2      	b.n	80a3f7a <__ieee754_sqrt+0x76>
 80a3ff4:	1c41      	adds	r1, r0, #1
 80a3ff6:	d035      	beq.n	80a4064 <__ieee754_sqrt+0x160>
 80a3ff8:	f000 0301 	and.w	r3, r0, #1
 80a3ffc:	4418      	add	r0, r3
 80a3ffe:	e7e8      	b.n	80a3fd2 <__ieee754_sqrt+0xce>
 80a4000:	005b      	lsls	r3, r3, #1
 80a4002:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a4006:	0052      	lsls	r2, r2, #1
 80a4008:	e796      	b.n	80a3f38 <__ieee754_sqrt+0x34>
 80a400a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a400e:	4306      	orrs	r6, r0
 80a4010:	d0ec      	beq.n	80a3fec <__ieee754_sqrt+0xe8>
 80a4012:	bb79      	cbnz	r1, 80a4074 <__ieee754_sqrt+0x170>
 80a4014:	468e      	mov	lr, r1
 80a4016:	0ad3      	lsrs	r3, r2, #11
 80a4018:	f1ae 0e15 	sub.w	lr, lr, #21
 80a401c:	0552      	lsls	r2, r2, #21
 80a401e:	2b00      	cmp	r3, #0
 80a4020:	d0f9      	beq.n	80a4016 <__ieee754_sqrt+0x112>
 80a4022:	02dd      	lsls	r5, r3, #11
 80a4024:	d421      	bmi.n	80a406a <__ieee754_sqrt+0x166>
 80a4026:	2100      	movs	r1, #0
 80a4028:	e000      	b.n	80a402c <__ieee754_sqrt+0x128>
 80a402a:	4601      	mov	r1, r0
 80a402c:	005b      	lsls	r3, r3, #1
 80a402e:	02dc      	lsls	r4, r3, #11
 80a4030:	f101 0001 	add.w	r0, r1, #1
 80a4034:	d5f9      	bpl.n	80a402a <__ieee754_sqrt+0x126>
 80a4036:	f1c0 0420 	rsb	r4, r0, #32
 80a403a:	fa22 f404 	lsr.w	r4, r2, r4
 80a403e:	4323      	orrs	r3, r4
 80a4040:	ebc1 0e0e 	rsb	lr, r1, lr
 80a4044:	4082      	lsls	r2, r0
 80a4046:	e76e      	b.n	80a3f26 <__ieee754_sqrt+0x22>
 80a4048:	4602      	mov	r2, r0
 80a404a:	460b      	mov	r3, r1
 80a404c:	f000 faf2 	bl	80a4634 <__aeabi_dmul>
 80a4050:	462a      	mov	r2, r5
 80a4052:	4623      	mov	r3, r4
 80a4054:	f000 f93c 	bl	80a42d0 <__adddf3>
 80a4058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a405c:	f1bc 0f00 	cmp.w	ip, #0
 80a4060:	daa9      	bge.n	80a3fb6 <__ieee754_sqrt+0xb2>
 80a4062:	e7b1      	b.n	80a3fc8 <__ieee754_sqrt+0xc4>
 80a4064:	3701      	adds	r7, #1
 80a4066:	4620      	mov	r0, r4
 80a4068:	e7b4      	b.n	80a3fd4 <__ieee754_sqrt+0xd0>
 80a406a:	2420      	movs	r4, #32
 80a406c:	f04f 31ff 	mov.w	r1, #4294967295
 80a4070:	2000      	movs	r0, #0
 80a4072:	e7e2      	b.n	80a403a <__ieee754_sqrt+0x136>
 80a4074:	4602      	mov	r2, r0
 80a4076:	460b      	mov	r3, r1
 80a4078:	f000 f928 	bl	80a42cc <__aeabi_dsub>
 80a407c:	4602      	mov	r2, r0
 80a407e:	460b      	mov	r3, r1
 80a4080:	f000 fc02 	bl	80a4888 <__aeabi_ddiv>
 80a4084:	e7b2      	b.n	80a3fec <__ieee754_sqrt+0xe8>
 80a4086:	bf00      	nop
 80a4088:	7ff00000 	.word	0x7ff00000

080a408c <fabs>:
 80a408c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4090:	4770      	bx	lr
 80a4092:	bf00      	nop

080a4094 <finite>:
 80a4094:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a4098:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a409c:	0fc0      	lsrs	r0, r0, #31
 80a409e:	4770      	bx	lr

080a40a0 <matherr>:
 80a40a0:	2000      	movs	r0, #0
 80a40a2:	4770      	bx	lr

080a40a4 <nan>:
 80a40a4:	2000      	movs	r0, #0
 80a40a6:	4901      	ldr	r1, [pc, #4]	; (80a40ac <nan+0x8>)
 80a40a8:	4770      	bx	lr
 80a40aa:	bf00      	nop
 80a40ac:	7ff80000 	.word	0x7ff80000

080a40b0 <rint>:
 80a40b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a40b2:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a40b6:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a40ba:	2e13      	cmp	r6, #19
 80a40bc:	b083      	sub	sp, #12
 80a40be:	4602      	mov	r2, r0
 80a40c0:	460b      	mov	r3, r1
 80a40c2:	460c      	mov	r4, r1
 80a40c4:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a40c8:	4607      	mov	r7, r0
 80a40ca:	dc2e      	bgt.n	80a412a <rint+0x7a>
 80a40cc:	2e00      	cmp	r6, #0
 80a40ce:	db49      	blt.n	80a4164 <rint+0xb4>
 80a40d0:	493d      	ldr	r1, [pc, #244]	; (80a41c8 <rint+0x118>)
 80a40d2:	4131      	asrs	r1, r6
 80a40d4:	ea03 0001 	and.w	r0, r3, r1
 80a40d8:	4310      	orrs	r0, r2
 80a40da:	d02b      	beq.n	80a4134 <rint+0x84>
 80a40dc:	0849      	lsrs	r1, r1, #1
 80a40de:	400b      	ands	r3, r1
 80a40e0:	ea53 0702 	orrs.w	r7, r3, r2
 80a40e4:	d00c      	beq.n	80a4100 <rint+0x50>
 80a40e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a40ea:	2e13      	cmp	r6, #19
 80a40ec:	ea24 0101 	bic.w	r1, r4, r1
 80a40f0:	fa43 f406 	asr.w	r4, r3, r6
 80a40f4:	ea44 0401 	orr.w	r4, r4, r1
 80a40f8:	bf0c      	ite	eq
 80a40fa:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a40fe:	2700      	movne	r7, #0
 80a4100:	4b32      	ldr	r3, [pc, #200]	; (80a41cc <rint+0x11c>)
 80a4102:	4621      	mov	r1, r4
 80a4104:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a4108:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a410c:	4638      	mov	r0, r7
 80a410e:	4622      	mov	r2, r4
 80a4110:	462b      	mov	r3, r5
 80a4112:	f000 f8dd 	bl	80a42d0 <__adddf3>
 80a4116:	e9cd 0100 	strd	r0, r1, [sp]
 80a411a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a411e:	4622      	mov	r2, r4
 80a4120:	462b      	mov	r3, r5
 80a4122:	f000 f8d3 	bl	80a42cc <__aeabi_dsub>
 80a4126:	b003      	add	sp, #12
 80a4128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a412a:	2e33      	cmp	r6, #51	; 0x33
 80a412c:	dd06      	ble.n	80a413c <rint+0x8c>
 80a412e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a4132:	d045      	beq.n	80a41c0 <rint+0x110>
 80a4134:	4610      	mov	r0, r2
 80a4136:	4619      	mov	r1, r3
 80a4138:	b003      	add	sp, #12
 80a413a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a413c:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a4140:	f04f 31ff 	mov.w	r1, #4294967295
 80a4144:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4148:	4208      	tst	r0, r1
 80a414a:	d0f3      	beq.n	80a4134 <rint+0x84>
 80a414c:	0849      	lsrs	r1, r1, #1
 80a414e:	4208      	tst	r0, r1
 80a4150:	d0d6      	beq.n	80a4100 <rint+0x50>
 80a4152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4156:	ea20 0101 	bic.w	r1, r0, r1
 80a415a:	fa43 fe0e 	asr.w	lr, r3, lr
 80a415e:	ea4e 0701 	orr.w	r7, lr, r1
 80a4162:	e7cd      	b.n	80a4100 <rint+0x50>
 80a4164:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4168:	4301      	orrs	r1, r0
 80a416a:	4619      	mov	r1, r3
 80a416c:	d0e4      	beq.n	80a4138 <rint+0x88>
 80a416e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4172:	ea43 0c00 	orr.w	ip, r3, r0
 80a4176:	f1cc 0300 	rsb	r3, ip, #0
 80a417a:	ea43 0c0c 	orr.w	ip, r3, ip
 80a417e:	4b13      	ldr	r3, [pc, #76]	; (80a41cc <rint+0x11c>)
 80a4180:	0c64      	lsrs	r4, r4, #17
 80a4182:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a4186:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a418a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a418e:	0464      	lsls	r4, r4, #17
 80a4190:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a4194:	ea4c 0104 	orr.w	r1, ip, r4
 80a4198:	4632      	mov	r2, r6
 80a419a:	463b      	mov	r3, r7
 80a419c:	f000 f898 	bl	80a42d0 <__adddf3>
 80a41a0:	e9cd 0100 	strd	r0, r1, [sp]
 80a41a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a41a8:	4632      	mov	r2, r6
 80a41aa:	463b      	mov	r3, r7
 80a41ac:	f000 f88e 	bl	80a42cc <__aeabi_dsub>
 80a41b0:	4602      	mov	r2, r0
 80a41b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a41b6:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a41ba:	4610      	mov	r0, r2
 80a41bc:	4619      	mov	r1, r3
 80a41be:	e7bb      	b.n	80a4138 <rint+0x88>
 80a41c0:	f000 f886 	bl	80a42d0 <__adddf3>
 80a41c4:	e7b8      	b.n	80a4138 <rint+0x88>
 80a41c6:	bf00      	nop
 80a41c8:	000fffff 	.word	0x000fffff
 80a41cc:	080a5e30 	.word	0x080a5e30

080a41d0 <scalbn>:
 80a41d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a41d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a41d6:	4604      	mov	r4, r0
 80a41d8:	460d      	mov	r5, r1
 80a41da:	460b      	mov	r3, r1
 80a41dc:	4617      	mov	r7, r2
 80a41de:	bb06      	cbnz	r6, 80a4222 <scalbn+0x52>
 80a41e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a41e4:	4303      	orrs	r3, r0
 80a41e6:	d025      	beq.n	80a4234 <scalbn+0x64>
 80a41e8:	2200      	movs	r2, #0
 80a41ea:	4b2f      	ldr	r3, [pc, #188]	; (80a42a8 <scalbn+0xd8>)
 80a41ec:	f000 fa22 	bl	80a4634 <__aeabi_dmul>
 80a41f0:	4a2e      	ldr	r2, [pc, #184]	; (80a42ac <scalbn+0xdc>)
 80a41f2:	4604      	mov	r4, r0
 80a41f4:	4297      	cmp	r7, r2
 80a41f6:	460d      	mov	r5, r1
 80a41f8:	460b      	mov	r3, r1
 80a41fa:	db2a      	blt.n	80a4252 <scalbn+0x82>
 80a41fc:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a4200:	3e36      	subs	r6, #54	; 0x36
 80a4202:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a4206:	443e      	add	r6, r7
 80a4208:	4296      	cmp	r6, r2
 80a420a:	dc28      	bgt.n	80a425e <scalbn+0x8e>
 80a420c:	2e00      	cmp	r6, #0
 80a420e:	dd12      	ble.n	80a4236 <scalbn+0x66>
 80a4210:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a4214:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4218:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a421c:	4620      	mov	r0, r4
 80a421e:	4629      	mov	r1, r5
 80a4220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4222:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a4226:	4296      	cmp	r6, r2
 80a4228:	d1eb      	bne.n	80a4202 <scalbn+0x32>
 80a422a:	4602      	mov	r2, r0
 80a422c:	460b      	mov	r3, r1
 80a422e:	f000 f84f 	bl	80a42d0 <__adddf3>
 80a4232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4236:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a423a:	da1d      	bge.n	80a4278 <scalbn+0xa8>
 80a423c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a4240:	429f      	cmp	r7, r3
 80a4242:	dc0c      	bgt.n	80a425e <scalbn+0x8e>
 80a4244:	a114      	add	r1, pc, #80	; (adr r1, 80a4298 <scalbn+0xc8>)
 80a4246:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a424a:	4622      	mov	r2, r4
 80a424c:	462b      	mov	r3, r5
 80a424e:	f000 f831 	bl	80a42b4 <copysign>
 80a4252:	a311      	add	r3, pc, #68	; (adr r3, 80a4298 <scalbn+0xc8>)
 80a4254:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4258:	f000 f9ec 	bl	80a4634 <__aeabi_dmul>
 80a425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a425e:	4622      	mov	r2, r4
 80a4260:	a10f      	add	r1, pc, #60	; (adr r1, 80a42a0 <scalbn+0xd0>)
 80a4262:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4266:	462b      	mov	r3, r5
 80a4268:	f000 f824 	bl	80a42b4 <copysign>
 80a426c:	a30c      	add	r3, pc, #48	; (adr r3, 80a42a0 <scalbn+0xd0>)
 80a426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4272:	f000 f9df 	bl	80a4634 <__aeabi_dmul>
 80a4276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4278:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a427c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a4280:	3636      	adds	r6, #54	; 0x36
 80a4282:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a4286:	4620      	mov	r0, r4
 80a4288:	4629      	mov	r1, r5
 80a428a:	2200      	movs	r2, #0
 80a428c:	4b08      	ldr	r3, [pc, #32]	; (80a42b0 <scalbn+0xe0>)
 80a428e:	f000 f9d1 	bl	80a4634 <__aeabi_dmul>
 80a4292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4294:	f3af 8000 	nop.w
 80a4298:	c2f8f359 	.word	0xc2f8f359
 80a429c:	01a56e1f 	.word	0x01a56e1f
 80a42a0:	8800759c 	.word	0x8800759c
 80a42a4:	7e37e43c 	.word	0x7e37e43c
 80a42a8:	43500000 	.word	0x43500000
 80a42ac:	ffff3cb0 	.word	0xffff3cb0
 80a42b0:	3c900000 	.word	0x3c900000

080a42b4 <copysign>:
 80a42b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a42b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a42bc:	ea42 0103 	orr.w	r1, r2, r3
 80a42c0:	4770      	bx	lr
 80a42c2:	bf00      	nop

080a42c4 <__aeabi_drsub>:
 80a42c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a42c8:	e002      	b.n	80a42d0 <__adddf3>
 80a42ca:	bf00      	nop

080a42cc <__aeabi_dsub>:
 80a42cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a42d0 <__adddf3>:
 80a42d0:	b530      	push	{r4, r5, lr}
 80a42d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a42d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a42da:	ea94 0f05 	teq	r4, r5
 80a42de:	bf08      	it	eq
 80a42e0:	ea90 0f02 	teqeq	r0, r2
 80a42e4:	bf1f      	itttt	ne
 80a42e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a42ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a42ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a42f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a42f6:	f000 80e2 	beq.w	80a44be <__adddf3+0x1ee>
 80a42fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a42fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4302:	bfb8      	it	lt
 80a4304:	426d      	neglt	r5, r5
 80a4306:	dd0c      	ble.n	80a4322 <__adddf3+0x52>
 80a4308:	442c      	add	r4, r5
 80a430a:	ea80 0202 	eor.w	r2, r0, r2
 80a430e:	ea81 0303 	eor.w	r3, r1, r3
 80a4312:	ea82 0000 	eor.w	r0, r2, r0
 80a4316:	ea83 0101 	eor.w	r1, r3, r1
 80a431a:	ea80 0202 	eor.w	r2, r0, r2
 80a431e:	ea81 0303 	eor.w	r3, r1, r3
 80a4322:	2d36      	cmp	r5, #54	; 0x36
 80a4324:	bf88      	it	hi
 80a4326:	bd30      	pophi	{r4, r5, pc}
 80a4328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a432c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4338:	d002      	beq.n	80a4340 <__adddf3+0x70>
 80a433a:	4240      	negs	r0, r0
 80a433c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a434c:	d002      	beq.n	80a4354 <__adddf3+0x84>
 80a434e:	4252      	negs	r2, r2
 80a4350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4354:	ea94 0f05 	teq	r4, r5
 80a4358:	f000 80a7 	beq.w	80a44aa <__adddf3+0x1da>
 80a435c:	f1a4 0401 	sub.w	r4, r4, #1
 80a4360:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4364:	db0d      	blt.n	80a4382 <__adddf3+0xb2>
 80a4366:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a436a:	fa22 f205 	lsr.w	r2, r2, r5
 80a436e:	1880      	adds	r0, r0, r2
 80a4370:	f141 0100 	adc.w	r1, r1, #0
 80a4374:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4378:	1880      	adds	r0, r0, r2
 80a437a:	fa43 f305 	asr.w	r3, r3, r5
 80a437e:	4159      	adcs	r1, r3
 80a4380:	e00e      	b.n	80a43a0 <__adddf3+0xd0>
 80a4382:	f1a5 0520 	sub.w	r5, r5, #32
 80a4386:	f10e 0e20 	add.w	lr, lr, #32
 80a438a:	2a01      	cmp	r2, #1
 80a438c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4390:	bf28      	it	cs
 80a4392:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4396:	fa43 f305 	asr.w	r3, r3, r5
 80a439a:	18c0      	adds	r0, r0, r3
 80a439c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a43a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a43a4:	d507      	bpl.n	80a43b6 <__adddf3+0xe6>
 80a43a6:	f04f 0e00 	mov.w	lr, #0
 80a43aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a43ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a43b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a43b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a43ba:	d31b      	bcc.n	80a43f4 <__adddf3+0x124>
 80a43bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a43c0:	d30c      	bcc.n	80a43dc <__adddf3+0x10c>
 80a43c2:	0849      	lsrs	r1, r1, #1
 80a43c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a43c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a43cc:	f104 0401 	add.w	r4, r4, #1
 80a43d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a43d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a43d8:	f080 809a 	bcs.w	80a4510 <__adddf3+0x240>
 80a43dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a43e0:	bf08      	it	eq
 80a43e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a43e6:	f150 0000 	adcs.w	r0, r0, #0
 80a43ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a43ee:	ea41 0105 	orr.w	r1, r1, r5
 80a43f2:	bd30      	pop	{r4, r5, pc}
 80a43f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a43f8:	4140      	adcs	r0, r0
 80a43fa:	eb41 0101 	adc.w	r1, r1, r1
 80a43fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4402:	f1a4 0401 	sub.w	r4, r4, #1
 80a4406:	d1e9      	bne.n	80a43dc <__adddf3+0x10c>
 80a4408:	f091 0f00 	teq	r1, #0
 80a440c:	bf04      	itt	eq
 80a440e:	4601      	moveq	r1, r0
 80a4410:	2000      	moveq	r0, #0
 80a4412:	fab1 f381 	clz	r3, r1
 80a4416:	bf08      	it	eq
 80a4418:	3320      	addeq	r3, #32
 80a441a:	f1a3 030b 	sub.w	r3, r3, #11
 80a441e:	f1b3 0220 	subs.w	r2, r3, #32
 80a4422:	da0c      	bge.n	80a443e <__adddf3+0x16e>
 80a4424:	320c      	adds	r2, #12
 80a4426:	dd08      	ble.n	80a443a <__adddf3+0x16a>
 80a4428:	f102 0c14 	add.w	ip, r2, #20
 80a442c:	f1c2 020c 	rsb	r2, r2, #12
 80a4430:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4434:	fa21 f102 	lsr.w	r1, r1, r2
 80a4438:	e00c      	b.n	80a4454 <__adddf3+0x184>
 80a443a:	f102 0214 	add.w	r2, r2, #20
 80a443e:	bfd8      	it	le
 80a4440:	f1c2 0c20 	rsble	ip, r2, #32
 80a4444:	fa01 f102 	lsl.w	r1, r1, r2
 80a4448:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a444c:	bfdc      	itt	le
 80a444e:	ea41 010c 	orrle.w	r1, r1, ip
 80a4452:	4090      	lslle	r0, r2
 80a4454:	1ae4      	subs	r4, r4, r3
 80a4456:	bfa2      	ittt	ge
 80a4458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a445c:	4329      	orrge	r1, r5
 80a445e:	bd30      	popge	{r4, r5, pc}
 80a4460:	ea6f 0404 	mvn.w	r4, r4
 80a4464:	3c1f      	subs	r4, #31
 80a4466:	da1c      	bge.n	80a44a2 <__adddf3+0x1d2>
 80a4468:	340c      	adds	r4, #12
 80a446a:	dc0e      	bgt.n	80a448a <__adddf3+0x1ba>
 80a446c:	f104 0414 	add.w	r4, r4, #20
 80a4470:	f1c4 0220 	rsb	r2, r4, #32
 80a4474:	fa20 f004 	lsr.w	r0, r0, r4
 80a4478:	fa01 f302 	lsl.w	r3, r1, r2
 80a447c:	ea40 0003 	orr.w	r0, r0, r3
 80a4480:	fa21 f304 	lsr.w	r3, r1, r4
 80a4484:	ea45 0103 	orr.w	r1, r5, r3
 80a4488:	bd30      	pop	{r4, r5, pc}
 80a448a:	f1c4 040c 	rsb	r4, r4, #12
 80a448e:	f1c4 0220 	rsb	r2, r4, #32
 80a4492:	fa20 f002 	lsr.w	r0, r0, r2
 80a4496:	fa01 f304 	lsl.w	r3, r1, r4
 80a449a:	ea40 0003 	orr.w	r0, r0, r3
 80a449e:	4629      	mov	r1, r5
 80a44a0:	bd30      	pop	{r4, r5, pc}
 80a44a2:	fa21 f004 	lsr.w	r0, r1, r4
 80a44a6:	4629      	mov	r1, r5
 80a44a8:	bd30      	pop	{r4, r5, pc}
 80a44aa:	f094 0f00 	teq	r4, #0
 80a44ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a44b2:	bf06      	itte	eq
 80a44b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a44b8:	3401      	addeq	r4, #1
 80a44ba:	3d01      	subne	r5, #1
 80a44bc:	e74e      	b.n	80a435c <__adddf3+0x8c>
 80a44be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a44c2:	bf18      	it	ne
 80a44c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a44c8:	d029      	beq.n	80a451e <__adddf3+0x24e>
 80a44ca:	ea94 0f05 	teq	r4, r5
 80a44ce:	bf08      	it	eq
 80a44d0:	ea90 0f02 	teqeq	r0, r2
 80a44d4:	d005      	beq.n	80a44e2 <__adddf3+0x212>
 80a44d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a44da:	bf04      	itt	eq
 80a44dc:	4619      	moveq	r1, r3
 80a44de:	4610      	moveq	r0, r2
 80a44e0:	bd30      	pop	{r4, r5, pc}
 80a44e2:	ea91 0f03 	teq	r1, r3
 80a44e6:	bf1e      	ittt	ne
 80a44e8:	2100      	movne	r1, #0
 80a44ea:	2000      	movne	r0, #0
 80a44ec:	bd30      	popne	{r4, r5, pc}
 80a44ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a44f2:	d105      	bne.n	80a4500 <__adddf3+0x230>
 80a44f4:	0040      	lsls	r0, r0, #1
 80a44f6:	4149      	adcs	r1, r1
 80a44f8:	bf28      	it	cs
 80a44fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a44fe:	bd30      	pop	{r4, r5, pc}
 80a4500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4504:	bf3c      	itt	cc
 80a4506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a450a:	bd30      	popcc	{r4, r5, pc}
 80a450c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4518:	f04f 0000 	mov.w	r0, #0
 80a451c:	bd30      	pop	{r4, r5, pc}
 80a451e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4522:	bf1a      	itte	ne
 80a4524:	4619      	movne	r1, r3
 80a4526:	4610      	movne	r0, r2
 80a4528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a452c:	bf1c      	itt	ne
 80a452e:	460b      	movne	r3, r1
 80a4530:	4602      	movne	r2, r0
 80a4532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4536:	bf06      	itte	eq
 80a4538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a453c:	ea91 0f03 	teqeq	r1, r3
 80a4540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4544:	bd30      	pop	{r4, r5, pc}
 80a4546:	bf00      	nop

080a4548 <__aeabi_ui2d>:
 80a4548:	f090 0f00 	teq	r0, #0
 80a454c:	bf04      	itt	eq
 80a454e:	2100      	moveq	r1, #0
 80a4550:	4770      	bxeq	lr
 80a4552:	b530      	push	{r4, r5, lr}
 80a4554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a455c:	f04f 0500 	mov.w	r5, #0
 80a4560:	f04f 0100 	mov.w	r1, #0
 80a4564:	e750      	b.n	80a4408 <__adddf3+0x138>
 80a4566:	bf00      	nop

080a4568 <__aeabi_i2d>:
 80a4568:	f090 0f00 	teq	r0, #0
 80a456c:	bf04      	itt	eq
 80a456e:	2100      	moveq	r1, #0
 80a4570:	4770      	bxeq	lr
 80a4572:	b530      	push	{r4, r5, lr}
 80a4574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a457c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4580:	bf48      	it	mi
 80a4582:	4240      	negmi	r0, r0
 80a4584:	f04f 0100 	mov.w	r1, #0
 80a4588:	e73e      	b.n	80a4408 <__adddf3+0x138>
 80a458a:	bf00      	nop

080a458c <__aeabi_f2d>:
 80a458c:	0042      	lsls	r2, r0, #1
 80a458e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4592:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a459a:	bf1f      	itttt	ne
 80a459c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a45a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a45a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a45a8:	4770      	bxne	lr
 80a45aa:	f092 0f00 	teq	r2, #0
 80a45ae:	bf14      	ite	ne
 80a45b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a45b4:	4770      	bxeq	lr
 80a45b6:	b530      	push	{r4, r5, lr}
 80a45b8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a45bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a45c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a45c4:	e720      	b.n	80a4408 <__adddf3+0x138>
 80a45c6:	bf00      	nop

080a45c8 <__aeabi_ul2d>:
 80a45c8:	ea50 0201 	orrs.w	r2, r0, r1
 80a45cc:	bf08      	it	eq
 80a45ce:	4770      	bxeq	lr
 80a45d0:	b530      	push	{r4, r5, lr}
 80a45d2:	f04f 0500 	mov.w	r5, #0
 80a45d6:	e00a      	b.n	80a45ee <__aeabi_l2d+0x16>

080a45d8 <__aeabi_l2d>:
 80a45d8:	ea50 0201 	orrs.w	r2, r0, r1
 80a45dc:	bf08      	it	eq
 80a45de:	4770      	bxeq	lr
 80a45e0:	b530      	push	{r4, r5, lr}
 80a45e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a45e6:	d502      	bpl.n	80a45ee <__aeabi_l2d+0x16>
 80a45e8:	4240      	negs	r0, r0
 80a45ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a45ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a45f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a45f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a45fa:	f43f aedc 	beq.w	80a43b6 <__adddf3+0xe6>
 80a45fe:	f04f 0203 	mov.w	r2, #3
 80a4602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4606:	bf18      	it	ne
 80a4608:	3203      	addne	r2, #3
 80a460a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a460e:	bf18      	it	ne
 80a4610:	3203      	addne	r2, #3
 80a4612:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4616:	f1c2 0320 	rsb	r3, r2, #32
 80a461a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a461e:	fa20 f002 	lsr.w	r0, r0, r2
 80a4622:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4626:	ea40 000e 	orr.w	r0, r0, lr
 80a462a:	fa21 f102 	lsr.w	r1, r1, r2
 80a462e:	4414      	add	r4, r2
 80a4630:	e6c1      	b.n	80a43b6 <__adddf3+0xe6>
 80a4632:	bf00      	nop

080a4634 <__aeabi_dmul>:
 80a4634:	b570      	push	{r4, r5, r6, lr}
 80a4636:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a463a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a463e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4642:	bf1d      	ittte	ne
 80a4644:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4648:	ea94 0f0c 	teqne	r4, ip
 80a464c:	ea95 0f0c 	teqne	r5, ip
 80a4650:	f000 f8de 	bleq	80a4810 <__aeabi_dmul+0x1dc>
 80a4654:	442c      	add	r4, r5
 80a4656:	ea81 0603 	eor.w	r6, r1, r3
 80a465a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a465e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4662:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4666:	bf18      	it	ne
 80a4668:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a466c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4674:	d038      	beq.n	80a46e8 <__aeabi_dmul+0xb4>
 80a4676:	fba0 ce02 	umull	ip, lr, r0, r2
 80a467a:	f04f 0500 	mov.w	r5, #0
 80a467e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4682:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4686:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a468a:	f04f 0600 	mov.w	r6, #0
 80a468e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4692:	f09c 0f00 	teq	ip, #0
 80a4696:	bf18      	it	ne
 80a4698:	f04e 0e01 	orrne.w	lr, lr, #1
 80a469c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a46a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a46a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a46a8:	d204      	bcs.n	80a46b4 <__aeabi_dmul+0x80>
 80a46aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a46ae:	416d      	adcs	r5, r5
 80a46b0:	eb46 0606 	adc.w	r6, r6, r6
 80a46b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a46b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a46bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a46c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a46c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a46c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a46cc:	bf88      	it	hi
 80a46ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a46d2:	d81e      	bhi.n	80a4712 <__aeabi_dmul+0xde>
 80a46d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a46d8:	bf08      	it	eq
 80a46da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a46de:	f150 0000 	adcs.w	r0, r0, #0
 80a46e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a46e6:	bd70      	pop	{r4, r5, r6, pc}
 80a46e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a46ec:	ea46 0101 	orr.w	r1, r6, r1
 80a46f0:	ea40 0002 	orr.w	r0, r0, r2
 80a46f4:	ea81 0103 	eor.w	r1, r1, r3
 80a46f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a46fc:	bfc2      	ittt	gt
 80a46fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4702:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4706:	bd70      	popgt	{r4, r5, r6, pc}
 80a4708:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a470c:	f04f 0e00 	mov.w	lr, #0
 80a4710:	3c01      	subs	r4, #1
 80a4712:	f300 80ab 	bgt.w	80a486c <__aeabi_dmul+0x238>
 80a4716:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a471a:	bfde      	ittt	le
 80a471c:	2000      	movle	r0, #0
 80a471e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4722:	bd70      	pople	{r4, r5, r6, pc}
 80a4724:	f1c4 0400 	rsb	r4, r4, #0
 80a4728:	3c20      	subs	r4, #32
 80a472a:	da35      	bge.n	80a4798 <__aeabi_dmul+0x164>
 80a472c:	340c      	adds	r4, #12
 80a472e:	dc1b      	bgt.n	80a4768 <__aeabi_dmul+0x134>
 80a4730:	f104 0414 	add.w	r4, r4, #20
 80a4734:	f1c4 0520 	rsb	r5, r4, #32
 80a4738:	fa00 f305 	lsl.w	r3, r0, r5
 80a473c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4740:	fa01 f205 	lsl.w	r2, r1, r5
 80a4744:	ea40 0002 	orr.w	r0, r0, r2
 80a4748:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a474c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4754:	fa21 f604 	lsr.w	r6, r1, r4
 80a4758:	eb42 0106 	adc.w	r1, r2, r6
 80a475c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4760:	bf08      	it	eq
 80a4762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4766:	bd70      	pop	{r4, r5, r6, pc}
 80a4768:	f1c4 040c 	rsb	r4, r4, #12
 80a476c:	f1c4 0520 	rsb	r5, r4, #32
 80a4770:	fa00 f304 	lsl.w	r3, r0, r4
 80a4774:	fa20 f005 	lsr.w	r0, r0, r5
 80a4778:	fa01 f204 	lsl.w	r2, r1, r4
 80a477c:	ea40 0002 	orr.w	r0, r0, r2
 80a4780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4788:	f141 0100 	adc.w	r1, r1, #0
 80a478c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4790:	bf08      	it	eq
 80a4792:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4796:	bd70      	pop	{r4, r5, r6, pc}
 80a4798:	f1c4 0520 	rsb	r5, r4, #32
 80a479c:	fa00 f205 	lsl.w	r2, r0, r5
 80a47a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a47a4:	fa20 f304 	lsr.w	r3, r0, r4
 80a47a8:	fa01 f205 	lsl.w	r2, r1, r5
 80a47ac:	ea43 0302 	orr.w	r3, r3, r2
 80a47b0:	fa21 f004 	lsr.w	r0, r1, r4
 80a47b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a47b8:	fa21 f204 	lsr.w	r2, r1, r4
 80a47bc:	ea20 0002 	bic.w	r0, r0, r2
 80a47c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a47c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a47c8:	bf08      	it	eq
 80a47ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a47ce:	bd70      	pop	{r4, r5, r6, pc}
 80a47d0:	f094 0f00 	teq	r4, #0
 80a47d4:	d10f      	bne.n	80a47f6 <__aeabi_dmul+0x1c2>
 80a47d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a47da:	0040      	lsls	r0, r0, #1
 80a47dc:	eb41 0101 	adc.w	r1, r1, r1
 80a47e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a47e4:	bf08      	it	eq
 80a47e6:	3c01      	subeq	r4, #1
 80a47e8:	d0f7      	beq.n	80a47da <__aeabi_dmul+0x1a6>
 80a47ea:	ea41 0106 	orr.w	r1, r1, r6
 80a47ee:	f095 0f00 	teq	r5, #0
 80a47f2:	bf18      	it	ne
 80a47f4:	4770      	bxne	lr
 80a47f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a47fa:	0052      	lsls	r2, r2, #1
 80a47fc:	eb43 0303 	adc.w	r3, r3, r3
 80a4800:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4804:	bf08      	it	eq
 80a4806:	3d01      	subeq	r5, #1
 80a4808:	d0f7      	beq.n	80a47fa <__aeabi_dmul+0x1c6>
 80a480a:	ea43 0306 	orr.w	r3, r3, r6
 80a480e:	4770      	bx	lr
 80a4810:	ea94 0f0c 	teq	r4, ip
 80a4814:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4818:	bf18      	it	ne
 80a481a:	ea95 0f0c 	teqne	r5, ip
 80a481e:	d00c      	beq.n	80a483a <__aeabi_dmul+0x206>
 80a4820:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4824:	bf18      	it	ne
 80a4826:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a482a:	d1d1      	bne.n	80a47d0 <__aeabi_dmul+0x19c>
 80a482c:	ea81 0103 	eor.w	r1, r1, r3
 80a4830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4834:	f04f 0000 	mov.w	r0, #0
 80a4838:	bd70      	pop	{r4, r5, r6, pc}
 80a483a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a483e:	bf06      	itte	eq
 80a4840:	4610      	moveq	r0, r2
 80a4842:	4619      	moveq	r1, r3
 80a4844:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4848:	d019      	beq.n	80a487e <__aeabi_dmul+0x24a>
 80a484a:	ea94 0f0c 	teq	r4, ip
 80a484e:	d102      	bne.n	80a4856 <__aeabi_dmul+0x222>
 80a4850:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4854:	d113      	bne.n	80a487e <__aeabi_dmul+0x24a>
 80a4856:	ea95 0f0c 	teq	r5, ip
 80a485a:	d105      	bne.n	80a4868 <__aeabi_dmul+0x234>
 80a485c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4860:	bf1c      	itt	ne
 80a4862:	4610      	movne	r0, r2
 80a4864:	4619      	movne	r1, r3
 80a4866:	d10a      	bne.n	80a487e <__aeabi_dmul+0x24a>
 80a4868:	ea81 0103 	eor.w	r1, r1, r3
 80a486c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4870:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4874:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4878:	f04f 0000 	mov.w	r0, #0
 80a487c:	bd70      	pop	{r4, r5, r6, pc}
 80a487e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4882:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4886:	bd70      	pop	{r4, r5, r6, pc}

080a4888 <__aeabi_ddiv>:
 80a4888:	b570      	push	{r4, r5, r6, lr}
 80a488a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a488e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4892:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4896:	bf1d      	ittte	ne
 80a4898:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a489c:	ea94 0f0c 	teqne	r4, ip
 80a48a0:	ea95 0f0c 	teqne	r5, ip
 80a48a4:	f000 f8a7 	bleq	80a49f6 <__aeabi_ddiv+0x16e>
 80a48a8:	eba4 0405 	sub.w	r4, r4, r5
 80a48ac:	ea81 0e03 	eor.w	lr, r1, r3
 80a48b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a48b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a48b8:	f000 8088 	beq.w	80a49cc <__aeabi_ddiv+0x144>
 80a48bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a48c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a48c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a48c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a48cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a48d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a48d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a48d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a48dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a48e0:	429d      	cmp	r5, r3
 80a48e2:	bf08      	it	eq
 80a48e4:	4296      	cmpeq	r6, r2
 80a48e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a48ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a48ee:	d202      	bcs.n	80a48f6 <__aeabi_ddiv+0x6e>
 80a48f0:	085b      	lsrs	r3, r3, #1
 80a48f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a48f6:	1ab6      	subs	r6, r6, r2
 80a48f8:	eb65 0503 	sbc.w	r5, r5, r3
 80a48fc:	085b      	lsrs	r3, r3, #1
 80a48fe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4902:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4906:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a490a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a490e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4912:	bf22      	ittt	cs
 80a4914:	1ab6      	subcs	r6, r6, r2
 80a4916:	4675      	movcs	r5, lr
 80a4918:	ea40 000c 	orrcs.w	r0, r0, ip
 80a491c:	085b      	lsrs	r3, r3, #1
 80a491e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4922:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4926:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a492a:	bf22      	ittt	cs
 80a492c:	1ab6      	subcs	r6, r6, r2
 80a492e:	4675      	movcs	r5, lr
 80a4930:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4934:	085b      	lsrs	r3, r3, #1
 80a4936:	ea4f 0232 	mov.w	r2, r2, rrx
 80a493a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a493e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4942:	bf22      	ittt	cs
 80a4944:	1ab6      	subcs	r6, r6, r2
 80a4946:	4675      	movcs	r5, lr
 80a4948:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a494c:	085b      	lsrs	r3, r3, #1
 80a494e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4952:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4956:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a495a:	bf22      	ittt	cs
 80a495c:	1ab6      	subcs	r6, r6, r2
 80a495e:	4675      	movcs	r5, lr
 80a4960:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4964:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4968:	d018      	beq.n	80a499c <__aeabi_ddiv+0x114>
 80a496a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a496e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4972:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4976:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a497a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a497e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4982:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4986:	d1c0      	bne.n	80a490a <__aeabi_ddiv+0x82>
 80a4988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a498c:	d10b      	bne.n	80a49a6 <__aeabi_ddiv+0x11e>
 80a498e:	ea41 0100 	orr.w	r1, r1, r0
 80a4992:	f04f 0000 	mov.w	r0, #0
 80a4996:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a499a:	e7b6      	b.n	80a490a <__aeabi_ddiv+0x82>
 80a499c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a49a0:	bf04      	itt	eq
 80a49a2:	4301      	orreq	r1, r0
 80a49a4:	2000      	moveq	r0, #0
 80a49a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a49aa:	bf88      	it	hi
 80a49ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a49b0:	f63f aeaf 	bhi.w	80a4712 <__aeabi_dmul+0xde>
 80a49b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a49b8:	bf04      	itt	eq
 80a49ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a49be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a49c2:	f150 0000 	adcs.w	r0, r0, #0
 80a49c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a49ca:	bd70      	pop	{r4, r5, r6, pc}
 80a49cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a49d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a49d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a49d8:	bfc2      	ittt	gt
 80a49da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a49de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a49e2:	bd70      	popgt	{r4, r5, r6, pc}
 80a49e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a49e8:	f04f 0e00 	mov.w	lr, #0
 80a49ec:	3c01      	subs	r4, #1
 80a49ee:	e690      	b.n	80a4712 <__aeabi_dmul+0xde>
 80a49f0:	ea45 0e06 	orr.w	lr, r5, r6
 80a49f4:	e68d      	b.n	80a4712 <__aeabi_dmul+0xde>
 80a49f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a49fa:	ea94 0f0c 	teq	r4, ip
 80a49fe:	bf08      	it	eq
 80a4a00:	ea95 0f0c 	teqeq	r5, ip
 80a4a04:	f43f af3b 	beq.w	80a487e <__aeabi_dmul+0x24a>
 80a4a08:	ea94 0f0c 	teq	r4, ip
 80a4a0c:	d10a      	bne.n	80a4a24 <__aeabi_ddiv+0x19c>
 80a4a0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4a12:	f47f af34 	bne.w	80a487e <__aeabi_dmul+0x24a>
 80a4a16:	ea95 0f0c 	teq	r5, ip
 80a4a1a:	f47f af25 	bne.w	80a4868 <__aeabi_dmul+0x234>
 80a4a1e:	4610      	mov	r0, r2
 80a4a20:	4619      	mov	r1, r3
 80a4a22:	e72c      	b.n	80a487e <__aeabi_dmul+0x24a>
 80a4a24:	ea95 0f0c 	teq	r5, ip
 80a4a28:	d106      	bne.n	80a4a38 <__aeabi_ddiv+0x1b0>
 80a4a2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4a2e:	f43f aefd 	beq.w	80a482c <__aeabi_dmul+0x1f8>
 80a4a32:	4610      	mov	r0, r2
 80a4a34:	4619      	mov	r1, r3
 80a4a36:	e722      	b.n	80a487e <__aeabi_dmul+0x24a>
 80a4a38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4a3c:	bf18      	it	ne
 80a4a3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4a42:	f47f aec5 	bne.w	80a47d0 <__aeabi_dmul+0x19c>
 80a4a46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4a4a:	f47f af0d 	bne.w	80a4868 <__aeabi_dmul+0x234>
 80a4a4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4a52:	f47f aeeb 	bne.w	80a482c <__aeabi_dmul+0x1f8>
 80a4a56:	e712      	b.n	80a487e <__aeabi_dmul+0x24a>

080a4a58 <__gedf2>:
 80a4a58:	f04f 3cff 	mov.w	ip, #4294967295
 80a4a5c:	e006      	b.n	80a4a6c <__cmpdf2+0x4>
 80a4a5e:	bf00      	nop

080a4a60 <__ledf2>:
 80a4a60:	f04f 0c01 	mov.w	ip, #1
 80a4a64:	e002      	b.n	80a4a6c <__cmpdf2+0x4>
 80a4a66:	bf00      	nop

080a4a68 <__cmpdf2>:
 80a4a68:	f04f 0c01 	mov.w	ip, #1
 80a4a6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4a7c:	bf18      	it	ne
 80a4a7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4a82:	d01b      	beq.n	80a4abc <__cmpdf2+0x54>
 80a4a84:	b001      	add	sp, #4
 80a4a86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4a8a:	bf0c      	ite	eq
 80a4a8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4a90:	ea91 0f03 	teqne	r1, r3
 80a4a94:	bf02      	ittt	eq
 80a4a96:	ea90 0f02 	teqeq	r0, r2
 80a4a9a:	2000      	moveq	r0, #0
 80a4a9c:	4770      	bxeq	lr
 80a4a9e:	f110 0f00 	cmn.w	r0, #0
 80a4aa2:	ea91 0f03 	teq	r1, r3
 80a4aa6:	bf58      	it	pl
 80a4aa8:	4299      	cmppl	r1, r3
 80a4aaa:	bf08      	it	eq
 80a4aac:	4290      	cmpeq	r0, r2
 80a4aae:	bf2c      	ite	cs
 80a4ab0:	17d8      	asrcs	r0, r3, #31
 80a4ab2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4ab6:	f040 0001 	orr.w	r0, r0, #1
 80a4aba:	4770      	bx	lr
 80a4abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4ac4:	d102      	bne.n	80a4acc <__cmpdf2+0x64>
 80a4ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4aca:	d107      	bne.n	80a4adc <__cmpdf2+0x74>
 80a4acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4ad4:	d1d6      	bne.n	80a4a84 <__cmpdf2+0x1c>
 80a4ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4ada:	d0d3      	beq.n	80a4a84 <__cmpdf2+0x1c>
 80a4adc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4ae0:	4770      	bx	lr
 80a4ae2:	bf00      	nop

080a4ae4 <__aeabi_cdrcmple>:
 80a4ae4:	4684      	mov	ip, r0
 80a4ae6:	4610      	mov	r0, r2
 80a4ae8:	4662      	mov	r2, ip
 80a4aea:	468c      	mov	ip, r1
 80a4aec:	4619      	mov	r1, r3
 80a4aee:	4663      	mov	r3, ip
 80a4af0:	e000      	b.n	80a4af4 <__aeabi_cdcmpeq>
 80a4af2:	bf00      	nop

080a4af4 <__aeabi_cdcmpeq>:
 80a4af4:	b501      	push	{r0, lr}
 80a4af6:	f7ff ffb7 	bl	80a4a68 <__cmpdf2>
 80a4afa:	2800      	cmp	r0, #0
 80a4afc:	bf48      	it	mi
 80a4afe:	f110 0f00 	cmnmi.w	r0, #0
 80a4b02:	bd01      	pop	{r0, pc}

080a4b04 <__aeabi_dcmpeq>:
 80a4b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4b08:	f7ff fff4 	bl	80a4af4 <__aeabi_cdcmpeq>
 80a4b0c:	bf0c      	ite	eq
 80a4b0e:	2001      	moveq	r0, #1
 80a4b10:	2000      	movne	r0, #0
 80a4b12:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4b16:	bf00      	nop

080a4b18 <__aeabi_dcmplt>:
 80a4b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4b1c:	f7ff ffea 	bl	80a4af4 <__aeabi_cdcmpeq>
 80a4b20:	bf34      	ite	cc
 80a4b22:	2001      	movcc	r0, #1
 80a4b24:	2000      	movcs	r0, #0
 80a4b26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4b2a:	bf00      	nop

080a4b2c <__aeabi_dcmple>:
 80a4b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4b30:	f7ff ffe0 	bl	80a4af4 <__aeabi_cdcmpeq>
 80a4b34:	bf94      	ite	ls
 80a4b36:	2001      	movls	r0, #1
 80a4b38:	2000      	movhi	r0, #0
 80a4b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4b3e:	bf00      	nop

080a4b40 <__aeabi_dcmpge>:
 80a4b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4b44:	f7ff ffce 	bl	80a4ae4 <__aeabi_cdrcmple>
 80a4b48:	bf94      	ite	ls
 80a4b4a:	2001      	movls	r0, #1
 80a4b4c:	2000      	movhi	r0, #0
 80a4b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4b52:	bf00      	nop

080a4b54 <__aeabi_dcmpgt>:
 80a4b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4b58:	f7ff ffc4 	bl	80a4ae4 <__aeabi_cdrcmple>
 80a4b5c:	bf34      	ite	cc
 80a4b5e:	2001      	movcc	r0, #1
 80a4b60:	2000      	movcs	r0, #0
 80a4b62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4b66:	bf00      	nop

080a4b68 <__aeabi_dcmpun>:
 80a4b68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4b70:	d102      	bne.n	80a4b78 <__aeabi_dcmpun+0x10>
 80a4b72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4b76:	d10a      	bne.n	80a4b8e <__aeabi_dcmpun+0x26>
 80a4b78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4b7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4b80:	d102      	bne.n	80a4b88 <__aeabi_dcmpun+0x20>
 80a4b82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4b86:	d102      	bne.n	80a4b8e <__aeabi_dcmpun+0x26>
 80a4b88:	f04f 0000 	mov.w	r0, #0
 80a4b8c:	4770      	bx	lr
 80a4b8e:	f04f 0001 	mov.w	r0, #1
 80a4b92:	4770      	bx	lr

080a4b94 <__aeabi_d2f>:
 80a4b94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4b98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4b9c:	bf24      	itt	cs
 80a4b9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4ba2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4ba6:	d90d      	bls.n	80a4bc4 <__aeabi_d2f+0x30>
 80a4ba8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4bac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4bb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4bb4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4bb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4bbc:	bf08      	it	eq
 80a4bbe:	f020 0001 	biceq.w	r0, r0, #1
 80a4bc2:	4770      	bx	lr
 80a4bc4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4bc8:	d121      	bne.n	80a4c0e <__aeabi_d2f+0x7a>
 80a4bca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a4bce:	bfbc      	itt	lt
 80a4bd0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4bd4:	4770      	bxlt	lr
 80a4bd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4bda:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a4bde:	f1c2 0218 	rsb	r2, r2, #24
 80a4be2:	f1c2 0c20 	rsb	ip, r2, #32
 80a4be6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a4bea:	fa20 f002 	lsr.w	r0, r0, r2
 80a4bee:	bf18      	it	ne
 80a4bf0:	f040 0001 	orrne.w	r0, r0, #1
 80a4bf4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4bf8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a4bfc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a4c00:	ea40 000c 	orr.w	r0, r0, ip
 80a4c04:	fa23 f302 	lsr.w	r3, r3, r2
 80a4c08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a4c0c:	e7cc      	b.n	80a4ba8 <__aeabi_d2f+0x14>
 80a4c0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a4c12:	d107      	bne.n	80a4c24 <__aeabi_d2f+0x90>
 80a4c14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a4c18:	bf1e      	ittt	ne
 80a4c1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a4c1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a4c22:	4770      	bxne	lr
 80a4c24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a4c28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4c30:	4770      	bx	lr
 80a4c32:	bf00      	nop

080a4c34 <__aeabi_frsub>:
 80a4c34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4c38:	e002      	b.n	80a4c40 <__addsf3>
 80a4c3a:	bf00      	nop

080a4c3c <__aeabi_fsub>:
 80a4c3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4c40 <__addsf3>:
 80a4c40:	0042      	lsls	r2, r0, #1
 80a4c42:	bf1f      	itttt	ne
 80a4c44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4c48:	ea92 0f03 	teqne	r2, r3
 80a4c4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4c50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4c54:	d06a      	beq.n	80a4d2c <__addsf3+0xec>
 80a4c56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4c5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4c5e:	bfc1      	itttt	gt
 80a4c60:	18d2      	addgt	r2, r2, r3
 80a4c62:	4041      	eorgt	r1, r0
 80a4c64:	4048      	eorgt	r0, r1
 80a4c66:	4041      	eorgt	r1, r0
 80a4c68:	bfb8      	it	lt
 80a4c6a:	425b      	neglt	r3, r3
 80a4c6c:	2b19      	cmp	r3, #25
 80a4c6e:	bf88      	it	hi
 80a4c70:	4770      	bxhi	lr
 80a4c72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4c76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4c7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4c7e:	bf18      	it	ne
 80a4c80:	4240      	negne	r0, r0
 80a4c82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4c86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4c8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4c8e:	bf18      	it	ne
 80a4c90:	4249      	negne	r1, r1
 80a4c92:	ea92 0f03 	teq	r2, r3
 80a4c96:	d03f      	beq.n	80a4d18 <__addsf3+0xd8>
 80a4c98:	f1a2 0201 	sub.w	r2, r2, #1
 80a4c9c:	fa41 fc03 	asr.w	ip, r1, r3
 80a4ca0:	eb10 000c 	adds.w	r0, r0, ip
 80a4ca4:	f1c3 0320 	rsb	r3, r3, #32
 80a4ca8:	fa01 f103 	lsl.w	r1, r1, r3
 80a4cac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4cb0:	d502      	bpl.n	80a4cb8 <__addsf3+0x78>
 80a4cb2:	4249      	negs	r1, r1
 80a4cb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4cb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4cbc:	d313      	bcc.n	80a4ce6 <__addsf3+0xa6>
 80a4cbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4cc2:	d306      	bcc.n	80a4cd2 <__addsf3+0x92>
 80a4cc4:	0840      	lsrs	r0, r0, #1
 80a4cc6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4cca:	f102 0201 	add.w	r2, r2, #1
 80a4cce:	2afe      	cmp	r2, #254	; 0xfe
 80a4cd0:	d251      	bcs.n	80a4d76 <__addsf3+0x136>
 80a4cd2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4cd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4cda:	bf08      	it	eq
 80a4cdc:	f020 0001 	biceq.w	r0, r0, #1
 80a4ce0:	ea40 0003 	orr.w	r0, r0, r3
 80a4ce4:	4770      	bx	lr
 80a4ce6:	0049      	lsls	r1, r1, #1
 80a4ce8:	eb40 0000 	adc.w	r0, r0, r0
 80a4cec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a4cf0:	f1a2 0201 	sub.w	r2, r2, #1
 80a4cf4:	d1ed      	bne.n	80a4cd2 <__addsf3+0x92>
 80a4cf6:	fab0 fc80 	clz	ip, r0
 80a4cfa:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4cfe:	ebb2 020c 	subs.w	r2, r2, ip
 80a4d02:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4d06:	bfaa      	itet	ge
 80a4d08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4d0c:	4252      	neglt	r2, r2
 80a4d0e:	4318      	orrge	r0, r3
 80a4d10:	bfbc      	itt	lt
 80a4d12:	40d0      	lsrlt	r0, r2
 80a4d14:	4318      	orrlt	r0, r3
 80a4d16:	4770      	bx	lr
 80a4d18:	f092 0f00 	teq	r2, #0
 80a4d1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4d20:	bf06      	itte	eq
 80a4d22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4d26:	3201      	addeq	r2, #1
 80a4d28:	3b01      	subne	r3, #1
 80a4d2a:	e7b5      	b.n	80a4c98 <__addsf3+0x58>
 80a4d2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4d30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4d34:	bf18      	it	ne
 80a4d36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4d3a:	d021      	beq.n	80a4d80 <__addsf3+0x140>
 80a4d3c:	ea92 0f03 	teq	r2, r3
 80a4d40:	d004      	beq.n	80a4d4c <__addsf3+0x10c>
 80a4d42:	f092 0f00 	teq	r2, #0
 80a4d46:	bf08      	it	eq
 80a4d48:	4608      	moveq	r0, r1
 80a4d4a:	4770      	bx	lr
 80a4d4c:	ea90 0f01 	teq	r0, r1
 80a4d50:	bf1c      	itt	ne
 80a4d52:	2000      	movne	r0, #0
 80a4d54:	4770      	bxne	lr
 80a4d56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4d5a:	d104      	bne.n	80a4d66 <__addsf3+0x126>
 80a4d5c:	0040      	lsls	r0, r0, #1
 80a4d5e:	bf28      	it	cs
 80a4d60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4d64:	4770      	bx	lr
 80a4d66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4d6a:	bf3c      	itt	cc
 80a4d6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4d70:	4770      	bxcc	lr
 80a4d72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4d76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4d7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4d7e:	4770      	bx	lr
 80a4d80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4d84:	bf16      	itet	ne
 80a4d86:	4608      	movne	r0, r1
 80a4d88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4d8c:	4601      	movne	r1, r0
 80a4d8e:	0242      	lsls	r2, r0, #9
 80a4d90:	bf06      	itte	eq
 80a4d92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4d96:	ea90 0f01 	teqeq	r0, r1
 80a4d9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4d9e:	4770      	bx	lr

080a4da0 <__aeabi_ui2f>:
 80a4da0:	f04f 0300 	mov.w	r3, #0
 80a4da4:	e004      	b.n	80a4db0 <__aeabi_i2f+0x8>
 80a4da6:	bf00      	nop

080a4da8 <__aeabi_i2f>:
 80a4da8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4dac:	bf48      	it	mi
 80a4dae:	4240      	negmi	r0, r0
 80a4db0:	ea5f 0c00 	movs.w	ip, r0
 80a4db4:	bf08      	it	eq
 80a4db6:	4770      	bxeq	lr
 80a4db8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4dbc:	4601      	mov	r1, r0
 80a4dbe:	f04f 0000 	mov.w	r0, #0
 80a4dc2:	e01c      	b.n	80a4dfe <__aeabi_l2f+0x2a>

080a4dc4 <__aeabi_ul2f>:
 80a4dc4:	ea50 0201 	orrs.w	r2, r0, r1
 80a4dc8:	bf08      	it	eq
 80a4dca:	4770      	bxeq	lr
 80a4dcc:	f04f 0300 	mov.w	r3, #0
 80a4dd0:	e00a      	b.n	80a4de8 <__aeabi_l2f+0x14>
 80a4dd2:	bf00      	nop

080a4dd4 <__aeabi_l2f>:
 80a4dd4:	ea50 0201 	orrs.w	r2, r0, r1
 80a4dd8:	bf08      	it	eq
 80a4dda:	4770      	bxeq	lr
 80a4ddc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4de0:	d502      	bpl.n	80a4de8 <__aeabi_l2f+0x14>
 80a4de2:	4240      	negs	r0, r0
 80a4de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4de8:	ea5f 0c01 	movs.w	ip, r1
 80a4dec:	bf02      	ittt	eq
 80a4dee:	4684      	moveq	ip, r0
 80a4df0:	4601      	moveq	r1, r0
 80a4df2:	2000      	moveq	r0, #0
 80a4df4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4df8:	bf08      	it	eq
 80a4dfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4dfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4e02:	fabc f28c 	clz	r2, ip
 80a4e06:	3a08      	subs	r2, #8
 80a4e08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4e0c:	db10      	blt.n	80a4e30 <__aeabi_l2f+0x5c>
 80a4e0e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4e12:	4463      	add	r3, ip
 80a4e14:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4e18:	f1c2 0220 	rsb	r2, r2, #32
 80a4e1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4e20:	fa20 f202 	lsr.w	r2, r0, r2
 80a4e24:	eb43 0002 	adc.w	r0, r3, r2
 80a4e28:	bf08      	it	eq
 80a4e2a:	f020 0001 	biceq.w	r0, r0, #1
 80a4e2e:	4770      	bx	lr
 80a4e30:	f102 0220 	add.w	r2, r2, #32
 80a4e34:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4e38:	f1c2 0220 	rsb	r2, r2, #32
 80a4e3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4e40:	fa21 f202 	lsr.w	r2, r1, r2
 80a4e44:	eb43 0002 	adc.w	r0, r3, r2
 80a4e48:	bf08      	it	eq
 80a4e4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4e4e:	4770      	bx	lr

080a4e50 <__aeabi_fmul>:
 80a4e50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4e54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4e58:	bf1e      	ittt	ne
 80a4e5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4e5e:	ea92 0f0c 	teqne	r2, ip
 80a4e62:	ea93 0f0c 	teqne	r3, ip
 80a4e66:	d06f      	beq.n	80a4f48 <__aeabi_fmul+0xf8>
 80a4e68:	441a      	add	r2, r3
 80a4e6a:	ea80 0c01 	eor.w	ip, r0, r1
 80a4e6e:	0240      	lsls	r0, r0, #9
 80a4e70:	bf18      	it	ne
 80a4e72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4e76:	d01e      	beq.n	80a4eb6 <__aeabi_fmul+0x66>
 80a4e78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4e7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4e80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4e84:	fba0 3101 	umull	r3, r1, r0, r1
 80a4e88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4e8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4e90:	bf3e      	ittt	cc
 80a4e92:	0049      	lslcc	r1, r1, #1
 80a4e94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4e98:	005b      	lslcc	r3, r3, #1
 80a4e9a:	ea40 0001 	orr.w	r0, r0, r1
 80a4e9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4ea2:	2afd      	cmp	r2, #253	; 0xfd
 80a4ea4:	d81d      	bhi.n	80a4ee2 <__aeabi_fmul+0x92>
 80a4ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4eaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4eae:	bf08      	it	eq
 80a4eb0:	f020 0001 	biceq.w	r0, r0, #1
 80a4eb4:	4770      	bx	lr
 80a4eb6:	f090 0f00 	teq	r0, #0
 80a4eba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4ebe:	bf08      	it	eq
 80a4ec0:	0249      	lsleq	r1, r1, #9
 80a4ec2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4ec6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4eca:	3a7f      	subs	r2, #127	; 0x7f
 80a4ecc:	bfc2      	ittt	gt
 80a4ece:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4ed2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4ed6:	4770      	bxgt	lr
 80a4ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4edc:	f04f 0300 	mov.w	r3, #0
 80a4ee0:	3a01      	subs	r2, #1
 80a4ee2:	dc5d      	bgt.n	80a4fa0 <__aeabi_fmul+0x150>
 80a4ee4:	f112 0f19 	cmn.w	r2, #25
 80a4ee8:	bfdc      	itt	le
 80a4eea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4eee:	4770      	bxle	lr
 80a4ef0:	f1c2 0200 	rsb	r2, r2, #0
 80a4ef4:	0041      	lsls	r1, r0, #1
 80a4ef6:	fa21 f102 	lsr.w	r1, r1, r2
 80a4efa:	f1c2 0220 	rsb	r2, r2, #32
 80a4efe:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4f02:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4f06:	f140 0000 	adc.w	r0, r0, #0
 80a4f0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4f0e:	bf08      	it	eq
 80a4f10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4f14:	4770      	bx	lr
 80a4f16:	f092 0f00 	teq	r2, #0
 80a4f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4f1e:	bf02      	ittt	eq
 80a4f20:	0040      	lsleq	r0, r0, #1
 80a4f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4f26:	3a01      	subeq	r2, #1
 80a4f28:	d0f9      	beq.n	80a4f1e <__aeabi_fmul+0xce>
 80a4f2a:	ea40 000c 	orr.w	r0, r0, ip
 80a4f2e:	f093 0f00 	teq	r3, #0
 80a4f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4f36:	bf02      	ittt	eq
 80a4f38:	0049      	lsleq	r1, r1, #1
 80a4f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4f3e:	3b01      	subeq	r3, #1
 80a4f40:	d0f9      	beq.n	80a4f36 <__aeabi_fmul+0xe6>
 80a4f42:	ea41 010c 	orr.w	r1, r1, ip
 80a4f46:	e78f      	b.n	80a4e68 <__aeabi_fmul+0x18>
 80a4f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4f4c:	ea92 0f0c 	teq	r2, ip
 80a4f50:	bf18      	it	ne
 80a4f52:	ea93 0f0c 	teqne	r3, ip
 80a4f56:	d00a      	beq.n	80a4f6e <__aeabi_fmul+0x11e>
 80a4f58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4f5c:	bf18      	it	ne
 80a4f5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4f62:	d1d8      	bne.n	80a4f16 <__aeabi_fmul+0xc6>
 80a4f64:	ea80 0001 	eor.w	r0, r0, r1
 80a4f68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4f6c:	4770      	bx	lr
 80a4f6e:	f090 0f00 	teq	r0, #0
 80a4f72:	bf17      	itett	ne
 80a4f74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4f78:	4608      	moveq	r0, r1
 80a4f7a:	f091 0f00 	teqne	r1, #0
 80a4f7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4f82:	d014      	beq.n	80a4fae <__aeabi_fmul+0x15e>
 80a4f84:	ea92 0f0c 	teq	r2, ip
 80a4f88:	d101      	bne.n	80a4f8e <__aeabi_fmul+0x13e>
 80a4f8a:	0242      	lsls	r2, r0, #9
 80a4f8c:	d10f      	bne.n	80a4fae <__aeabi_fmul+0x15e>
 80a4f8e:	ea93 0f0c 	teq	r3, ip
 80a4f92:	d103      	bne.n	80a4f9c <__aeabi_fmul+0x14c>
 80a4f94:	024b      	lsls	r3, r1, #9
 80a4f96:	bf18      	it	ne
 80a4f98:	4608      	movne	r0, r1
 80a4f9a:	d108      	bne.n	80a4fae <__aeabi_fmul+0x15e>
 80a4f9c:	ea80 0001 	eor.w	r0, r0, r1
 80a4fa0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4fa4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4fa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4fac:	4770      	bx	lr
 80a4fae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4fb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4fb6:	4770      	bx	lr

080a4fb8 <__aeabi_fdiv>:
 80a4fb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4fbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4fc0:	bf1e      	ittt	ne
 80a4fc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4fc6:	ea92 0f0c 	teqne	r2, ip
 80a4fca:	ea93 0f0c 	teqne	r3, ip
 80a4fce:	d069      	beq.n	80a50a4 <__aeabi_fdiv+0xec>
 80a4fd0:	eba2 0203 	sub.w	r2, r2, r3
 80a4fd4:	ea80 0c01 	eor.w	ip, r0, r1
 80a4fd8:	0249      	lsls	r1, r1, #9
 80a4fda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4fde:	d037      	beq.n	80a5050 <__aeabi_fdiv+0x98>
 80a4fe0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4fe4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4fe8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4fec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4ff0:	428b      	cmp	r3, r1
 80a4ff2:	bf38      	it	cc
 80a4ff4:	005b      	lslcc	r3, r3, #1
 80a4ff6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4ffa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4ffe:	428b      	cmp	r3, r1
 80a5000:	bf24      	itt	cs
 80a5002:	1a5b      	subcs	r3, r3, r1
 80a5004:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5008:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a500c:	bf24      	itt	cs
 80a500e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5012:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5016:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a501a:	bf24      	itt	cs
 80a501c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5020:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5024:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5028:	bf24      	itt	cs
 80a502a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a502e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5032:	011b      	lsls	r3, r3, #4
 80a5034:	bf18      	it	ne
 80a5036:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a503a:	d1e0      	bne.n	80a4ffe <__aeabi_fdiv+0x46>
 80a503c:	2afd      	cmp	r2, #253	; 0xfd
 80a503e:	f63f af50 	bhi.w	80a4ee2 <__aeabi_fmul+0x92>
 80a5042:	428b      	cmp	r3, r1
 80a5044:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5048:	bf08      	it	eq
 80a504a:	f020 0001 	biceq.w	r0, r0, #1
 80a504e:	4770      	bx	lr
 80a5050:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5054:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5058:	327f      	adds	r2, #127	; 0x7f
 80a505a:	bfc2      	ittt	gt
 80a505c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5060:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5064:	4770      	bxgt	lr
 80a5066:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a506a:	f04f 0300 	mov.w	r3, #0
 80a506e:	3a01      	subs	r2, #1
 80a5070:	e737      	b.n	80a4ee2 <__aeabi_fmul+0x92>
 80a5072:	f092 0f00 	teq	r2, #0
 80a5076:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a507a:	bf02      	ittt	eq
 80a507c:	0040      	lsleq	r0, r0, #1
 80a507e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5082:	3a01      	subeq	r2, #1
 80a5084:	d0f9      	beq.n	80a507a <__aeabi_fdiv+0xc2>
 80a5086:	ea40 000c 	orr.w	r0, r0, ip
 80a508a:	f093 0f00 	teq	r3, #0
 80a508e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5092:	bf02      	ittt	eq
 80a5094:	0049      	lsleq	r1, r1, #1
 80a5096:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a509a:	3b01      	subeq	r3, #1
 80a509c:	d0f9      	beq.n	80a5092 <__aeabi_fdiv+0xda>
 80a509e:	ea41 010c 	orr.w	r1, r1, ip
 80a50a2:	e795      	b.n	80a4fd0 <__aeabi_fdiv+0x18>
 80a50a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a50a8:	ea92 0f0c 	teq	r2, ip
 80a50ac:	d108      	bne.n	80a50c0 <__aeabi_fdiv+0x108>
 80a50ae:	0242      	lsls	r2, r0, #9
 80a50b0:	f47f af7d 	bne.w	80a4fae <__aeabi_fmul+0x15e>
 80a50b4:	ea93 0f0c 	teq	r3, ip
 80a50b8:	f47f af70 	bne.w	80a4f9c <__aeabi_fmul+0x14c>
 80a50bc:	4608      	mov	r0, r1
 80a50be:	e776      	b.n	80a4fae <__aeabi_fmul+0x15e>
 80a50c0:	ea93 0f0c 	teq	r3, ip
 80a50c4:	d104      	bne.n	80a50d0 <__aeabi_fdiv+0x118>
 80a50c6:	024b      	lsls	r3, r1, #9
 80a50c8:	f43f af4c 	beq.w	80a4f64 <__aeabi_fmul+0x114>
 80a50cc:	4608      	mov	r0, r1
 80a50ce:	e76e      	b.n	80a4fae <__aeabi_fmul+0x15e>
 80a50d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a50d4:	bf18      	it	ne
 80a50d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a50da:	d1ca      	bne.n	80a5072 <__aeabi_fdiv+0xba>
 80a50dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a50e0:	f47f af5c 	bne.w	80a4f9c <__aeabi_fmul+0x14c>
 80a50e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a50e8:	f47f af3c 	bne.w	80a4f64 <__aeabi_fmul+0x114>
 80a50ec:	e75f      	b.n	80a4fae <__aeabi_fmul+0x15e>
 80a50ee:	bf00      	nop

080a50f0 <__gesf2>:
 80a50f0:	f04f 3cff 	mov.w	ip, #4294967295
 80a50f4:	e006      	b.n	80a5104 <__cmpsf2+0x4>
 80a50f6:	bf00      	nop

080a50f8 <__lesf2>:
 80a50f8:	f04f 0c01 	mov.w	ip, #1
 80a50fc:	e002      	b.n	80a5104 <__cmpsf2+0x4>
 80a50fe:	bf00      	nop

080a5100 <__cmpsf2>:
 80a5100:	f04f 0c01 	mov.w	ip, #1
 80a5104:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5108:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a510c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5114:	bf18      	it	ne
 80a5116:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a511a:	d011      	beq.n	80a5140 <__cmpsf2+0x40>
 80a511c:	b001      	add	sp, #4
 80a511e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5122:	bf18      	it	ne
 80a5124:	ea90 0f01 	teqne	r0, r1
 80a5128:	bf58      	it	pl
 80a512a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a512e:	bf88      	it	hi
 80a5130:	17c8      	asrhi	r0, r1, #31
 80a5132:	bf38      	it	cc
 80a5134:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a5138:	bf18      	it	ne
 80a513a:	f040 0001 	orrne.w	r0, r0, #1
 80a513e:	4770      	bx	lr
 80a5140:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5144:	d102      	bne.n	80a514c <__cmpsf2+0x4c>
 80a5146:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a514a:	d105      	bne.n	80a5158 <__cmpsf2+0x58>
 80a514c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5150:	d1e4      	bne.n	80a511c <__cmpsf2+0x1c>
 80a5152:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5156:	d0e1      	beq.n	80a511c <__cmpsf2+0x1c>
 80a5158:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a515c:	4770      	bx	lr
 80a515e:	bf00      	nop

080a5160 <__aeabi_cfrcmple>:
 80a5160:	4684      	mov	ip, r0
 80a5162:	4608      	mov	r0, r1
 80a5164:	4661      	mov	r1, ip
 80a5166:	e7ff      	b.n	80a5168 <__aeabi_cfcmpeq>

080a5168 <__aeabi_cfcmpeq>:
 80a5168:	b50f      	push	{r0, r1, r2, r3, lr}
 80a516a:	f7ff ffc9 	bl	80a5100 <__cmpsf2>
 80a516e:	2800      	cmp	r0, #0
 80a5170:	bf48      	it	mi
 80a5172:	f110 0f00 	cmnmi.w	r0, #0
 80a5176:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5178 <__aeabi_fcmpeq>:
 80a5178:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a517c:	f7ff fff4 	bl	80a5168 <__aeabi_cfcmpeq>
 80a5180:	bf0c      	ite	eq
 80a5182:	2001      	moveq	r0, #1
 80a5184:	2000      	movne	r0, #0
 80a5186:	f85d fb08 	ldr.w	pc, [sp], #8
 80a518a:	bf00      	nop

080a518c <__aeabi_fcmplt>:
 80a518c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5190:	f7ff ffea 	bl	80a5168 <__aeabi_cfcmpeq>
 80a5194:	bf34      	ite	cc
 80a5196:	2001      	movcc	r0, #1
 80a5198:	2000      	movcs	r0, #0
 80a519a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a519e:	bf00      	nop

080a51a0 <__aeabi_fcmple>:
 80a51a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a51a4:	f7ff ffe0 	bl	80a5168 <__aeabi_cfcmpeq>
 80a51a8:	bf94      	ite	ls
 80a51aa:	2001      	movls	r0, #1
 80a51ac:	2000      	movhi	r0, #0
 80a51ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a51b2:	bf00      	nop

080a51b4 <__aeabi_fcmpge>:
 80a51b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a51b8:	f7ff ffd2 	bl	80a5160 <__aeabi_cfrcmple>
 80a51bc:	bf94      	ite	ls
 80a51be:	2001      	movls	r0, #1
 80a51c0:	2000      	movhi	r0, #0
 80a51c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a51c6:	bf00      	nop

080a51c8 <__aeabi_fcmpgt>:
 80a51c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a51cc:	f7ff ffc8 	bl	80a5160 <__aeabi_cfrcmple>
 80a51d0:	bf34      	ite	cc
 80a51d2:	2001      	movcc	r0, #1
 80a51d4:	2000      	movcs	r0, #0
 80a51d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a51da:	bf00      	nop

080a51dc <__aeabi_f2iz>:
 80a51dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a51e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a51e4:	d30f      	bcc.n	80a5206 <__aeabi_f2iz+0x2a>
 80a51e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a51ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a51ee:	d90d      	bls.n	80a520c <__aeabi_f2iz+0x30>
 80a51f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a51f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a51f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a51fc:	fa23 f002 	lsr.w	r0, r3, r2
 80a5200:	bf18      	it	ne
 80a5202:	4240      	negne	r0, r0
 80a5204:	4770      	bx	lr
 80a5206:	f04f 0000 	mov.w	r0, #0
 80a520a:	4770      	bx	lr
 80a520c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a5210:	d101      	bne.n	80a5216 <__aeabi_f2iz+0x3a>
 80a5212:	0242      	lsls	r2, r0, #9
 80a5214:	d105      	bne.n	80a5222 <__aeabi_f2iz+0x46>
 80a5216:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a521a:	bf08      	it	eq
 80a521c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5220:	4770      	bx	lr
 80a5222:	f04f 0000 	mov.w	r0, #0
 80a5226:	4770      	bx	lr

080a5228 <__aeabi_ldivmod>:
 80a5228:	b97b      	cbnz	r3, 80a524a <__aeabi_ldivmod+0x22>
 80a522a:	b972      	cbnz	r2, 80a524a <__aeabi_ldivmod+0x22>
 80a522c:	2900      	cmp	r1, #0
 80a522e:	bfbe      	ittt	lt
 80a5230:	2000      	movlt	r0, #0
 80a5232:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a5236:	e006      	blt.n	80a5246 <__aeabi_ldivmod+0x1e>
 80a5238:	bf08      	it	eq
 80a523a:	2800      	cmpeq	r0, #0
 80a523c:	bf1c      	itt	ne
 80a523e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a5242:	f04f 30ff 	movne.w	r0, #4294967295
 80a5246:	f000 b9b5 	b.w	80a55b4 <__aeabi_idiv0>
 80a524a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a524e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a5252:	2900      	cmp	r1, #0
 80a5254:	db09      	blt.n	80a526a <__aeabi_ldivmod+0x42>
 80a5256:	2b00      	cmp	r3, #0
 80a5258:	db1a      	blt.n	80a5290 <__aeabi_ldivmod+0x68>
 80a525a:	f000 f835 	bl	80a52c8 <__udivmoddi4>
 80a525e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a5262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5266:	b004      	add	sp, #16
 80a5268:	4770      	bx	lr
 80a526a:	4240      	negs	r0, r0
 80a526c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5270:	2b00      	cmp	r3, #0
 80a5272:	db1b      	blt.n	80a52ac <__aeabi_ldivmod+0x84>
 80a5274:	f000 f828 	bl	80a52c8 <__udivmoddi4>
 80a5278:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a527c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5280:	b004      	add	sp, #16
 80a5282:	4240      	negs	r0, r0
 80a5284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5288:	4252      	negs	r2, r2
 80a528a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a528e:	4770      	bx	lr
 80a5290:	4252      	negs	r2, r2
 80a5292:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5296:	f000 f817 	bl	80a52c8 <__udivmoddi4>
 80a529a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a529e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a52a2:	b004      	add	sp, #16
 80a52a4:	4240      	negs	r0, r0
 80a52a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a52aa:	4770      	bx	lr
 80a52ac:	4252      	negs	r2, r2
 80a52ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a52b2:	f000 f809 	bl	80a52c8 <__udivmoddi4>
 80a52b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a52ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a52be:	b004      	add	sp, #16
 80a52c0:	4252      	negs	r2, r2
 80a52c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a52c6:	4770      	bx	lr

080a52c8 <__udivmoddi4>:
 80a52c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a52cc:	468c      	mov	ip, r1
 80a52ce:	460c      	mov	r4, r1
 80a52d0:	4605      	mov	r5, r0
 80a52d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a52d4:	2b00      	cmp	r3, #0
 80a52d6:	d14f      	bne.n	80a5378 <__udivmoddi4+0xb0>
 80a52d8:	428a      	cmp	r2, r1
 80a52da:	4617      	mov	r7, r2
 80a52dc:	d96b      	bls.n	80a53b6 <__udivmoddi4+0xee>
 80a52de:	fab2 fe82 	clz	lr, r2
 80a52e2:	f1be 0f00 	cmp.w	lr, #0
 80a52e6:	d00b      	beq.n	80a5300 <__udivmoddi4+0x38>
 80a52e8:	f1ce 0520 	rsb	r5, lr, #32
 80a52ec:	fa20 f505 	lsr.w	r5, r0, r5
 80a52f0:	fa01 f30e 	lsl.w	r3, r1, lr
 80a52f4:	ea45 0c03 	orr.w	ip, r5, r3
 80a52f8:	fa02 f70e 	lsl.w	r7, r2, lr
 80a52fc:	fa00 f50e 	lsl.w	r5, r0, lr
 80a5300:	0c39      	lsrs	r1, r7, #16
 80a5302:	fbbc f0f1 	udiv	r0, ip, r1
 80a5306:	b2ba      	uxth	r2, r7
 80a5308:	fb01 c310 	mls	r3, r1, r0, ip
 80a530c:	fb00 f802 	mul.w	r8, r0, r2
 80a5310:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a5314:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a5318:	45a0      	cmp	r8, r4
 80a531a:	d909      	bls.n	80a5330 <__udivmoddi4+0x68>
 80a531c:	19e4      	adds	r4, r4, r7
 80a531e:	f100 33ff 	add.w	r3, r0, #4294967295
 80a5322:	f080 8128 	bcs.w	80a5576 <__udivmoddi4+0x2ae>
 80a5326:	45a0      	cmp	r8, r4
 80a5328:	f240 8125 	bls.w	80a5576 <__udivmoddi4+0x2ae>
 80a532c:	3802      	subs	r0, #2
 80a532e:	443c      	add	r4, r7
 80a5330:	ebc8 0404 	rsb	r4, r8, r4
 80a5334:	fbb4 f3f1 	udiv	r3, r4, r1
 80a5338:	fb01 4c13 	mls	ip, r1, r3, r4
 80a533c:	fb03 f202 	mul.w	r2, r3, r2
 80a5340:	b2ac      	uxth	r4, r5
 80a5342:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a5346:	428a      	cmp	r2, r1
 80a5348:	d909      	bls.n	80a535e <__udivmoddi4+0x96>
 80a534a:	19c9      	adds	r1, r1, r7
 80a534c:	f103 34ff 	add.w	r4, r3, #4294967295
 80a5350:	f080 810f 	bcs.w	80a5572 <__udivmoddi4+0x2aa>
 80a5354:	428a      	cmp	r2, r1
 80a5356:	f240 810c 	bls.w	80a5572 <__udivmoddi4+0x2aa>
 80a535a:	3b02      	subs	r3, #2
 80a535c:	4439      	add	r1, r7
 80a535e:	1a8a      	subs	r2, r1, r2
 80a5360:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a5364:	2100      	movs	r1, #0
 80a5366:	2e00      	cmp	r6, #0
 80a5368:	d063      	beq.n	80a5432 <__udivmoddi4+0x16a>
 80a536a:	fa22 f20e 	lsr.w	r2, r2, lr
 80a536e:	2300      	movs	r3, #0
 80a5370:	e886 000c 	stmia.w	r6, {r2, r3}
 80a5374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5378:	428b      	cmp	r3, r1
 80a537a:	d907      	bls.n	80a538c <__udivmoddi4+0xc4>
 80a537c:	2e00      	cmp	r6, #0
 80a537e:	d056      	beq.n	80a542e <__udivmoddi4+0x166>
 80a5380:	2100      	movs	r1, #0
 80a5382:	e886 0011 	stmia.w	r6, {r0, r4}
 80a5386:	4608      	mov	r0, r1
 80a5388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a538c:	fab3 f183 	clz	r1, r3
 80a5390:	2900      	cmp	r1, #0
 80a5392:	f040 8093 	bne.w	80a54bc <__udivmoddi4+0x1f4>
 80a5396:	42a3      	cmp	r3, r4
 80a5398:	d302      	bcc.n	80a53a0 <__udivmoddi4+0xd8>
 80a539a:	4282      	cmp	r2, r0
 80a539c:	f200 80fe 	bhi.w	80a559c <__udivmoddi4+0x2d4>
 80a53a0:	1a85      	subs	r5, r0, r2
 80a53a2:	eb64 0303 	sbc.w	r3, r4, r3
 80a53a6:	469c      	mov	ip, r3
 80a53a8:	2001      	movs	r0, #1
 80a53aa:	2e00      	cmp	r6, #0
 80a53ac:	d041      	beq.n	80a5432 <__udivmoddi4+0x16a>
 80a53ae:	e886 1020 	stmia.w	r6, {r5, ip}
 80a53b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a53b6:	b912      	cbnz	r2, 80a53be <__udivmoddi4+0xf6>
 80a53b8:	2701      	movs	r7, #1
 80a53ba:	fbb7 f7f2 	udiv	r7, r7, r2
 80a53be:	fab7 fe87 	clz	lr, r7
 80a53c2:	f1be 0f00 	cmp.w	lr, #0
 80a53c6:	d136      	bne.n	80a5436 <__udivmoddi4+0x16e>
 80a53c8:	1be4      	subs	r4, r4, r7
 80a53ca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a53ce:	fa1f f987 	uxth.w	r9, r7
 80a53d2:	2101      	movs	r1, #1
 80a53d4:	fbb4 f3f8 	udiv	r3, r4, r8
 80a53d8:	fb08 4413 	mls	r4, r8, r3, r4
 80a53dc:	fb09 f203 	mul.w	r2, r9, r3
 80a53e0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a53e4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a53e8:	42a2      	cmp	r2, r4
 80a53ea:	d907      	bls.n	80a53fc <__udivmoddi4+0x134>
 80a53ec:	19e4      	adds	r4, r4, r7
 80a53ee:	f103 30ff 	add.w	r0, r3, #4294967295
 80a53f2:	d202      	bcs.n	80a53fa <__udivmoddi4+0x132>
 80a53f4:	42a2      	cmp	r2, r4
 80a53f6:	f200 80d3 	bhi.w	80a55a0 <__udivmoddi4+0x2d8>
 80a53fa:	4603      	mov	r3, r0
 80a53fc:	1aa4      	subs	r4, r4, r2
 80a53fe:	fbb4 f0f8 	udiv	r0, r4, r8
 80a5402:	fb08 4810 	mls	r8, r8, r0, r4
 80a5406:	fb09 f900 	mul.w	r9, r9, r0
 80a540a:	b2ac      	uxth	r4, r5
 80a540c:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a5410:	4591      	cmp	r9, r2
 80a5412:	d907      	bls.n	80a5424 <__udivmoddi4+0x15c>
 80a5414:	19d2      	adds	r2, r2, r7
 80a5416:	f100 34ff 	add.w	r4, r0, #4294967295
 80a541a:	d202      	bcs.n	80a5422 <__udivmoddi4+0x15a>
 80a541c:	4591      	cmp	r9, r2
 80a541e:	f200 80ba 	bhi.w	80a5596 <__udivmoddi4+0x2ce>
 80a5422:	4620      	mov	r0, r4
 80a5424:	ebc9 0202 	rsb	r2, r9, r2
 80a5428:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a542c:	e79b      	b.n	80a5366 <__udivmoddi4+0x9e>
 80a542e:	4631      	mov	r1, r6
 80a5430:	4630      	mov	r0, r6
 80a5432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5436:	fa07 f70e 	lsl.w	r7, r7, lr
 80a543a:	f1ce 0c20 	rsb	ip, lr, #32
 80a543e:	fa24 f30c 	lsr.w	r3, r4, ip
 80a5442:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a5446:	fbb3 faf8 	udiv	sl, r3, r8
 80a544a:	fa1f f987 	uxth.w	r9, r7
 80a544e:	fb08 351a 	mls	r5, r8, sl, r3
 80a5452:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5456:	fa04 f40e 	lsl.w	r4, r4, lr
 80a545a:	fb0a fb09 	mul.w	fp, sl, r9
 80a545e:	ea4c 0c04 	orr.w	ip, ip, r4
 80a5462:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a5466:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a546a:	459b      	cmp	fp, r3
 80a546c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a5470:	d90a      	bls.n	80a5488 <__udivmoddi4+0x1c0>
 80a5472:	19db      	adds	r3, r3, r7
 80a5474:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a5478:	f080 808b 	bcs.w	80a5592 <__udivmoddi4+0x2ca>
 80a547c:	459b      	cmp	fp, r3
 80a547e:	f240 8088 	bls.w	80a5592 <__udivmoddi4+0x2ca>
 80a5482:	f1aa 0a02 	sub.w	sl, sl, #2
 80a5486:	443b      	add	r3, r7
 80a5488:	ebcb 0303 	rsb	r3, fp, r3
 80a548c:	fbb3 f0f8 	udiv	r0, r3, r8
 80a5490:	fb08 3310 	mls	r3, r8, r0, r3
 80a5494:	fb00 f409 	mul.w	r4, r0, r9
 80a5498:	fa1f fc8c 	uxth.w	ip, ip
 80a549c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a54a0:	429c      	cmp	r4, r3
 80a54a2:	d907      	bls.n	80a54b4 <__udivmoddi4+0x1ec>
 80a54a4:	19db      	adds	r3, r3, r7
 80a54a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80a54aa:	d26e      	bcs.n	80a558a <__udivmoddi4+0x2c2>
 80a54ac:	429c      	cmp	r4, r3
 80a54ae:	d96c      	bls.n	80a558a <__udivmoddi4+0x2c2>
 80a54b0:	3802      	subs	r0, #2
 80a54b2:	443b      	add	r3, r7
 80a54b4:	1b1c      	subs	r4, r3, r4
 80a54b6:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a54ba:	e78b      	b.n	80a53d4 <__udivmoddi4+0x10c>
 80a54bc:	f1c1 0e20 	rsb	lr, r1, #32
 80a54c0:	408b      	lsls	r3, r1
 80a54c2:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a54c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80a54ca:	fa24 f70e 	lsr.w	r7, r4, lr
 80a54ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a54d2:	fbb7 faf9 	udiv	sl, r7, r9
 80a54d6:	fa1f f38c 	uxth.w	r3, ip
 80a54da:	fb09 771a 	mls	r7, r9, sl, r7
 80a54de:	fa20 f80e 	lsr.w	r8, r0, lr
 80a54e2:	408c      	lsls	r4, r1
 80a54e4:	fb0a f503 	mul.w	r5, sl, r3
 80a54e8:	ea48 0404 	orr.w	r4, r8, r4
 80a54ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a54f0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a54f4:	42bd      	cmp	r5, r7
 80a54f6:	fa02 f201 	lsl.w	r2, r2, r1
 80a54fa:	fa00 fb01 	lsl.w	fp, r0, r1
 80a54fe:	d909      	bls.n	80a5514 <__udivmoddi4+0x24c>
 80a5500:	eb17 070c 	adds.w	r7, r7, ip
 80a5504:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a5508:	d241      	bcs.n	80a558e <__udivmoddi4+0x2c6>
 80a550a:	42bd      	cmp	r5, r7
 80a550c:	d93f      	bls.n	80a558e <__udivmoddi4+0x2c6>
 80a550e:	f1aa 0a02 	sub.w	sl, sl, #2
 80a5512:	4467      	add	r7, ip
 80a5514:	1b7f      	subs	r7, r7, r5
 80a5516:	fbb7 f5f9 	udiv	r5, r7, r9
 80a551a:	fb09 7715 	mls	r7, r9, r5, r7
 80a551e:	fb05 f303 	mul.w	r3, r5, r3
 80a5522:	b2a4      	uxth	r4, r4
 80a5524:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a5528:	42bb      	cmp	r3, r7
 80a552a:	d908      	bls.n	80a553e <__udivmoddi4+0x276>
 80a552c:	eb17 070c 	adds.w	r7, r7, ip
 80a5530:	f105 30ff 	add.w	r0, r5, #4294967295
 80a5534:	d227      	bcs.n	80a5586 <__udivmoddi4+0x2be>
 80a5536:	42bb      	cmp	r3, r7
 80a5538:	d925      	bls.n	80a5586 <__udivmoddi4+0x2be>
 80a553a:	3d02      	subs	r5, #2
 80a553c:	4467      	add	r7, ip
 80a553e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a5542:	fba0 8902 	umull	r8, r9, r0, r2
 80a5546:	1aff      	subs	r7, r7, r3
 80a5548:	454f      	cmp	r7, r9
 80a554a:	4645      	mov	r5, r8
 80a554c:	464c      	mov	r4, r9
 80a554e:	d314      	bcc.n	80a557a <__udivmoddi4+0x2b2>
 80a5550:	d029      	beq.n	80a55a6 <__udivmoddi4+0x2de>
 80a5552:	b366      	cbz	r6, 80a55ae <__udivmoddi4+0x2e6>
 80a5554:	ebbb 0305 	subs.w	r3, fp, r5
 80a5558:	eb67 0704 	sbc.w	r7, r7, r4
 80a555c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a5560:	40cb      	lsrs	r3, r1
 80a5562:	40cf      	lsrs	r7, r1
 80a5564:	ea4e 0303 	orr.w	r3, lr, r3
 80a5568:	e886 0088 	stmia.w	r6, {r3, r7}
 80a556c:	2100      	movs	r1, #0
 80a556e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5572:	4623      	mov	r3, r4
 80a5574:	e6f3      	b.n	80a535e <__udivmoddi4+0x96>
 80a5576:	4618      	mov	r0, r3
 80a5578:	e6da      	b.n	80a5330 <__udivmoddi4+0x68>
 80a557a:	ebb8 0502 	subs.w	r5, r8, r2
 80a557e:	eb69 040c 	sbc.w	r4, r9, ip
 80a5582:	3801      	subs	r0, #1
 80a5584:	e7e5      	b.n	80a5552 <__udivmoddi4+0x28a>
 80a5586:	4605      	mov	r5, r0
 80a5588:	e7d9      	b.n	80a553e <__udivmoddi4+0x276>
 80a558a:	4610      	mov	r0, r2
 80a558c:	e792      	b.n	80a54b4 <__udivmoddi4+0x1ec>
 80a558e:	4682      	mov	sl, r0
 80a5590:	e7c0      	b.n	80a5514 <__udivmoddi4+0x24c>
 80a5592:	4692      	mov	sl, r2
 80a5594:	e778      	b.n	80a5488 <__udivmoddi4+0x1c0>
 80a5596:	3802      	subs	r0, #2
 80a5598:	443a      	add	r2, r7
 80a559a:	e743      	b.n	80a5424 <__udivmoddi4+0x15c>
 80a559c:	4608      	mov	r0, r1
 80a559e:	e704      	b.n	80a53aa <__udivmoddi4+0xe2>
 80a55a0:	3b02      	subs	r3, #2
 80a55a2:	443c      	add	r4, r7
 80a55a4:	e72a      	b.n	80a53fc <__udivmoddi4+0x134>
 80a55a6:	45c3      	cmp	fp, r8
 80a55a8:	d3e7      	bcc.n	80a557a <__udivmoddi4+0x2b2>
 80a55aa:	463c      	mov	r4, r7
 80a55ac:	e7d1      	b.n	80a5552 <__udivmoddi4+0x28a>
 80a55ae:	4631      	mov	r1, r6
 80a55b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a55b4 <__aeabi_idiv0>:
 80a55b4:	4770      	bx	lr
 80a55b6:	bf00      	nop

080a55b8 <__cxa_atexit>:
 80a55b8:	b510      	push	{r4, lr}
 80a55ba:	4c05      	ldr	r4, [pc, #20]	; (80a55d0 <__cxa_atexit+0x18>)
 80a55bc:	4613      	mov	r3, r2
 80a55be:	b12c      	cbz	r4, 80a55cc <__cxa_atexit+0x14>
 80a55c0:	460a      	mov	r2, r1
 80a55c2:	4601      	mov	r1, r0
 80a55c4:	2002      	movs	r0, #2
 80a55c6:	f3af 8000 	nop.w
 80a55ca:	bd10      	pop	{r4, pc}
 80a55cc:	4620      	mov	r0, r4
 80a55ce:	bd10      	pop	{r4, pc}
 80a55d0:	00000000 	.word	0x00000000

080a55d4 <memcpy>:
 80a55d4:	b510      	push	{r4, lr}
 80a55d6:	1e43      	subs	r3, r0, #1
 80a55d8:	440a      	add	r2, r1
 80a55da:	4291      	cmp	r1, r2
 80a55dc:	d004      	beq.n	80a55e8 <memcpy+0x14>
 80a55de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a55e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a55e6:	e7f8      	b.n	80a55da <memcpy+0x6>
 80a55e8:	bd10      	pop	{r4, pc}

080a55ea <memset>:
 80a55ea:	4603      	mov	r3, r0
 80a55ec:	4402      	add	r2, r0
 80a55ee:	4293      	cmp	r3, r2
 80a55f0:	d002      	beq.n	80a55f8 <memset+0xe>
 80a55f2:	f803 1b01 	strb.w	r1, [r3], #1
 80a55f6:	e7fa      	b.n	80a55ee <memset+0x4>
 80a55f8:	4770      	bx	lr
	...

080a55fc <srand>:
 80a55fc:	b538      	push	{r3, r4, r5, lr}
 80a55fe:	4b12      	ldr	r3, [pc, #72]	; (80a5648 <srand+0x4c>)
 80a5600:	4605      	mov	r5, r0
 80a5602:	681c      	ldr	r4, [r3, #0]
 80a5604:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5606:	b9d3      	cbnz	r3, 80a563e <srand+0x42>
 80a5608:	2018      	movs	r0, #24
 80a560a:	f7fc fa13 	bl	80a1a34 <malloc>
 80a560e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5612:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5614:	8003      	strh	r3, [r0, #0]
 80a5616:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a561a:	8043      	strh	r3, [r0, #2]
 80a561c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5620:	8083      	strh	r3, [r0, #4]
 80a5622:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5626:	80c3      	strh	r3, [r0, #6]
 80a5628:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a562c:	8103      	strh	r3, [r0, #8]
 80a562e:	2305      	movs	r3, #5
 80a5630:	8143      	strh	r3, [r0, #10]
 80a5632:	230b      	movs	r3, #11
 80a5634:	8183      	strh	r3, [r0, #12]
 80a5636:	2201      	movs	r2, #1
 80a5638:	2300      	movs	r3, #0
 80a563a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a563e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5640:	2200      	movs	r2, #0
 80a5642:	611d      	str	r5, [r3, #16]
 80a5644:	615a      	str	r2, [r3, #20]
 80a5646:	bd38      	pop	{r3, r4, r5, pc}
 80a5648:	20000068 	.word	0x20000068

080a564c <strdup>:
 80a564c:	4b02      	ldr	r3, [pc, #8]	; (80a5658 <strdup+0xc>)
 80a564e:	4601      	mov	r1, r0
 80a5650:	6818      	ldr	r0, [r3, #0]
 80a5652:	f000 b803 	b.w	80a565c <_strdup_r>
 80a5656:	bf00      	nop
 80a5658:	20000068 	.word	0x20000068

080a565c <_strdup_r>:
 80a565c:	b570      	push	{r4, r5, r6, lr}
 80a565e:	4606      	mov	r6, r0
 80a5660:	4608      	mov	r0, r1
 80a5662:	460c      	mov	r4, r1
 80a5664:	f000 f80d 	bl	80a5682 <strlen>
 80a5668:	1c45      	adds	r5, r0, #1
 80a566a:	4629      	mov	r1, r5
 80a566c:	4630      	mov	r0, r6
 80a566e:	f7fc fa09 	bl	80a1a84 <_malloc_r>
 80a5672:	4606      	mov	r6, r0
 80a5674:	b118      	cbz	r0, 80a567e <_strdup_r+0x22>
 80a5676:	462a      	mov	r2, r5
 80a5678:	4621      	mov	r1, r4
 80a567a:	f7ff ffab 	bl	80a55d4 <memcpy>
 80a567e:	4630      	mov	r0, r6
 80a5680:	bd70      	pop	{r4, r5, r6, pc}

080a5682 <strlen>:
 80a5682:	4603      	mov	r3, r0
 80a5684:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5688:	2a00      	cmp	r2, #0
 80a568a:	d1fb      	bne.n	80a5684 <strlen+0x2>
 80a568c:	1a18      	subs	r0, r3, r0
 80a568e:	3801      	subs	r0, #1
 80a5690:	4770      	bx	lr

080a5692 <link_code_end>:
	...

080a5694 <dynalib_user>:
 80a5694:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a56a4:	0000 0000                                   ....

080a56a8 <_ZTV16JsonWriterStaticILj256EE>:
	...
 80a56b0:	00b9 080a 00cd 080a 6941 2072 7551 6c61     ........Air Qual
 80a56c0:	7469 2079 6553 736e 726f 7220 6165 7964     ity Sensor ready
 80a56d0:	002e 6941 2072 7551 6c61 7469 2079 6553     ..Air Quality Se
 80a56e0:	736e 726f 4520 5252 524f 0021 6150 7472     nsor ERROR!.Part
 80a56f0:	6369 656c 4100 7269 5120 6175 696c 7974     icle.Air Quality
 80a5700:	4d00 6e6f 7469 726f 4200 454d 3832 2030     .Monitor.BME280 
 80a5710:	6553 736e 726f 7220 6165 7964 002e 4d42     Sensor ready..BM
 80a5720:	3245 3038 5320 6e65 6f73 2072 5245 4f52     E280 Sensor ERRO
 80a5730:	2152 4e00 6e6f 0065 6144 676e 7265 4800     R!.None.Danger.H
 80a5740:	6769 2068 6f50 6c6c 7475 6f69 006e 6f4c     igh Pollution.Lo
 80a5750:	2077 6f50 6c6c 7475 6f69 006e 7246 7365     w Pollution.Fres
 80a5760:	2068 6941 0072 504c 3a4f 2520 0064 6152     h Air.LPO: %d.Ra
 80a5770:	6974 3a6f 2520 2566 0025 6f43 636e 6e65     tio: %f%%.Concen
 80a5780:	7274 7461 6f69 3a6e 2520 2066 6370 2f73     tration: %f pcs/
 80a5790:	004c 6554 706d 203a 4300 4800 6d75 6469     L.Temp: .C.Humid
 80a57a0:	7469 3a79 0020 7250 7365 3a73 0020 6820     ity: .Press: . h
 80a57b0:	6150 4400 7375 3a74 0020 6574 706d 6800     Pa.Dust: .temp.h
 80a57c0:	6d75 6469 7469 0079 7270 7365 7573 6572     umidity.pressure
 80a57d0:	6100 7269 712d 6175 696c 7974 6400 7375     .air-quality.dus
 80a57e0:	2d74 706c 006f 6c25 0075 7564 7473 722d     t-lpo.%lu.dust-r
 80a57f0:	7461 6f69 6400 7375 2d74 6f63 636e 6e65     atio.dust-concen
 80a5800:	7274 7461 6f69 006e 6e65 2d76 6176 736c     tration.env-vals
 80a5810:	4100 7269 5120 6175 696c 7974 203a 7325     .Air Quality: %s
 80a5820:	5400 6d65 3a70 2520 0064 7250 7365 7573     .Temp: %d.Pressu
 80a5830:	6572 203a 6425 4800 6d75 6469 7469 3a79     re: %d.Humidity:
 80a5840:	2520 0064                                    %d.

080a5844 <_ZTVN8particle13__SPISettingsE>:
	...
 80a584c:	0769 080a 6564 6166 6c75 2074 4d00 4253     i...default .MSB
 80a585c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 80a586c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 80a587c:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
 80a588c:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

080a5898 <_ZTV10JsonBuffer>:
	...
 80a58a0:	107d 080a 1099 080a                         }.......

080a58a8 <_ZTV10JsonWriter>:
	...
 80a58b0:	10ad 080a 10c1 080a 3025 7834 5c00 2575     ........%04x.\u%
 80a58c0:	3430 0058 7274 6575 6600 6c61 6573 2500     04X.true.false.%
 80a58d0:	2a2e 0066 6625 2500 2a2e 666c 2500 666c     .*f.%f.%.*lf.%lf
 80a58e0:	0000 0000                                   ....

080a58e4 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
 80a58e4:	0002 0000                                   ....

080a58e8 <_ZN16AirQualitySensor9FRESH_AIRE>:
 80a58e8:	0003 0000                                   ....

080a58ec <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
 80a58ec:	0001 0000                                   ....

080a58f0 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
 80a58f0:	0000 0000                                   ....

080a58f4 <_ZL9BasicFont>:
	...
 80a58fc:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
 80a590c:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
 80a591c:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
 80a592c:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
 80a593c:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
 80a594c:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
 80a595c:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
 80a596c:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
 80a597c:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
 80a598c:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
 80a599c:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
 80a59ac:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
 80a59bc:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
 80a59cc:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
 80a59dc:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
 80a59ec:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
 80a59fc:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
 80a5a0c:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
 80a5a1c:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
 80a5a2c:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
 80a5a3c:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
 80a5a4c:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
 80a5a5c:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
 80a5a6c:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
 80a5a7c:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
 80a5a8c:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
 80a5a9c:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
 80a5aac:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
 80a5abc:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
 80a5acc:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
 80a5adc:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
 80a5aec:	8000 8080 8080 0000 0100 0402 0000 0000     ................
 80a5afc:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
 80a5b0c:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
 80a5b1c:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
 80a5b2c:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
 80a5b3c:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
 80a5b4c:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
 80a5b5c:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
 80a5b6c:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
 80a5b7c:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
 80a5b8c:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
 80a5b9c:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
 80a5bac:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
 80a5bbc:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
 80a5bcc:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
 80a5bdc:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
 80a5bec:	0200 0505 0002 0000                         ........

080a5bf4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a5bf4:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
 80a5c04:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a5c14:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a5c24:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a5c34:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a5c44:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a5c54:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a5c64:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a5c74:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
 80a5c84:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a5c94:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80a5ca4:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
 80a5cb4:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
 80a5cc4:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
 80a5cd4:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
 80a5ce4:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
 80a5cf4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

080a5d04 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a5d0c:	20ad 080a 20b3 080a 20f7 080a 20c1 080a     . ... ... ... ..
 80a5d1c:	20af 080a                                   . ..

080a5d20 <_ZTV9IPAddress>:
	...
 80a5d28:	2645 080a 2635 080a 2637 080a               E&..5&..7&..

080a5d34 <_ZTV9USBSerial>:
	...
 80a5d3c:	2701 080a 2751 080a 275f 080a 1d73 080a     .'..Q'.._'..s...
 80a5d4c:	273d 080a 2703 080a 2719 080a 274b 080a     ='...'...'..K'..
 80a5d5c:	272f 080a 26fd 080a                         /'...&..

080a5d64 <_ZTV11USARTSerial>:
	...
 80a5d6c:	28a1 080a 28f1 080a 28ff 080a 1d73 080a     .(...(...(..s...
 80a5d7c:	28b5 080a 28d7 080a 28c3 080a 28eb 080a     .(...(...(...(..
 80a5d8c:	28a3 080a 28a7 080a                         .(...(..

080a5d94 <_ZTV7TwoWire>:
	...
 80a5d9c:	29cd 080a 2a17 080a 29ef 080a 29cf 080a     .)...*...)...)..
 80a5dac:	29f7 080a 29ff 080a 2a07 080a 2a0f 080a     .)...)...*...*..

080a5dbc <_ZTVN5spark9WiFiClassE>:
	...
 80a5dc4:	2b71 080a 2b67 080a 2b5d 080a 2adb 080a     q+..g+..]+...*..
 80a5dd4:	1eab 080a 2b51 080a 2b45 080a 2b3d 080a     ....Q+..E+..=+..
 80a5de4:	2b33 080a 2b29 080a 2ae5 080a               3+..)+...*..

080a5df0 <_ZTVN5spark12NetworkClassE>:
	...
 80a5df8:	2b91 080a 2b9b 080a 2ba5 080a 2baf 080a     .+...+...+...+..
 80a5e08:	2bb9 080a 2bc5 080a 2bd1 080a 2bdd 080a     .+...+...+...+..
 80a5e18:	2be5 080a 2bef 080a 2bf9 080a               .+...+...+..

080a5e24 <_ZSt7nothrow>:
 80a5e24:	0000 0000 6f70 0077 0000 0000               ....pow.....

080a5e30 <TWO52>:
 80a5e30:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a5e40 <__sf_fake_stdin>:
	...

080a5e60 <__sf_fake_stdout>:
	...

080a5e80 <__sf_fake_stderr>:
	...

080a5ea0 <link_const_variable_data_end>:
 80a5ea0:	080a0725 	.word	0x080a0725
 80a5ea4:	080a1077 	.word	0x080a1077
 80a5ea8:	080a1345 	.word	0x080a1345
 80a5eac:	080a1409 	.word	0x080a1409
 80a5eb0:	080a15f1 	.word	0x080a15f1
 80a5eb4:	080a1c35 	.word	0x080a1c35
 80a5eb8:	080a1ef1 	.word	0x080a1ef1
 80a5ebc:	080a1f01 	.word	0x080a1f01
 80a5ec0:	080a1f59 	.word	0x080a1f59
 80a5ec4:	080a2b7d 	.word	0x080a2b7d
 80a5ec8:	080a2c49 	.word	0x080a2c49
 80a5ecc:	080a2d85 	.word	0x080a2d85
 80a5ed0:	080a2e7d 	.word	0x080a2e7d
 80a5ed4:	080a2f01 	.word	0x080a2f01
 80a5ed8:	080a2fc5 	.word	0x080a2fc5
 80a5edc:	080a3089 	.word	0x080a3089
