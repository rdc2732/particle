
c:/Users/Rick/Documents/dev/particle/oled/target/1.5.2/argon/oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005e20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9e40  000d9e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d9e48  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e2e0  000d9e4c  0001e2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004a4  2003e34c  2003e34c  0002e34c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d9eb8  000d9eb8  00029eb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d9ee0  000d9ee0  00029ee0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00101e80  00000000  00000000  00029ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001436c  00000000  00000000  0012bd64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024df8  00000000  00000000  001400d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002a70  00000000  00000000  00164ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005158  00000000  00000000  00167938  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003abc9  00000000  00000000  0016ca90  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00032244  00000000  00000000  001a7659  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010b84a  00000000  00000000  001d989d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e3b4  00000000  00000000  002e50e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fa45 	bl	d94c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fa4a 	bl	d94d6 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e2e0 	.word	0x2003e2e0
   d404c:	000d9e4c 	.word	0x000d9e4c
   d4050:	2003e34c 	.word	0x2003e34c
   d4054:	2003e34c 	.word	0x2003e34c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f002 f881 	bl	d6164 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9e40 	.word	0x000d9e40
   d4084:	000d9df8 	.word	0x000d9df8

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b82c 	b.w	d40e4 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 faf5 	bl	d467c <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f002 b827 	b.w	d60e8 <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 bd11 	b.w	d5ac0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bd17 	b.w	d5ad0 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bd15 	b.w	d5ad0 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40b8:	b510      	push	{r4, lr}
   d40ba:	4b03      	ldr	r3, [pc, #12]	; (d40c8 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40bc:	6003      	str	r3, [r0, #0]
   d40be:	4604      	mov	r4, r0
   d40c0:	f001 f814 	bl	d50ec <_ZN10JsonWriterD1Ev>
   d40c4:	4620      	mov	r0, r4
   d40c6:	bd10      	pop	{r4, pc}
   d40c8:	000d959c 	.word	0x000d959c

000d40cc <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40cc:	b510      	push	{r4, lr}
   d40ce:	4604      	mov	r4, r0
   d40d0:	f7ff fff2 	bl	d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40da:	f002 ffc3 	bl	d7064 <_ZdlPvj>
   d40de:	4620      	mov	r0, r4
   d40e0:	bd10      	pop	{r4, pc}
	...

000d40e4 <setup>:
String getAirQuality();
void createEventPayload(int temp, int humidity, int pressure, String airQuality);
void updateDisplay(int temp, int humidity, int pressure, String airQuality);

void setup()
{
   d40e4:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d40e6:	f002 fc01 	bl	d68ec <_Z16_fetch_usbserialv>
   d40ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ee:	f002 fbf1 	bl	d68d4 <_ZN9USBSerial5beginEl>
  delay(50);
   d40f2:	2032      	movs	r0, #50	; 0x32
   d40f4:	f001 ffaa 	bl	d604c <delay>

  // Configure the dust sensor pin as an input
  pinMode(DUST_SENSOR_PIN, INPUT);
   d40f8:	2004      	movs	r0, #4
   d40fa:	2100      	movs	r1, #0
   d40fc:	f002 ff0e 	bl	d6f1c <pinMode>

  if (aqSensor.init())
   d4100:	4824      	ldr	r0, [pc, #144]	; (d4194 <setup+0xb0>)
   d4102:	f001 f948 	bl	d5396 <_ZN16AirQualitySensor4initEv>
   d4106:	b118      	cbz	r0, d4110 <setup+0x2c>
  {
    Serial.println("Air Quality Sensor ready.");
   d4108:	f002 fbf0 	bl	d68ec <_Z16_fetch_usbserialv>
   d410c:	4922      	ldr	r1, [pc, #136]	; (d4198 <setup+0xb4>)
   d410e:	e002      	b.n	d4116 <setup+0x32>
  }
  else
  {
    Serial.println("Air Quality Sensor ERROR!");
   d4110:	f002 fbec 	bl	d68ec <_Z16_fetch_usbserialv>
   d4114:	4921      	ldr	r1, [pc, #132]	; (d419c <setup+0xb8>)
   d4116:	f001 ff22 	bl	d5f5e <_ZN5Print7printlnEPKc>
  }

  Wire.begin();
   d411a:	f002 ff6f 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d411e:	f002 fcdf 	bl	d6ae0 <_ZN7TwoWire5beginEv>
  SeeedOled.init();
   d4122:	481f      	ldr	r0, [pc, #124]	; (d41a0 <setup+0xbc>)
   d4124:	f001 f9b0 	bl	d5488 <_ZN9SeeedOLED4initEv>

  SeeedOled.clearDisplay();
   d4128:	481d      	ldr	r0, [pc, #116]	; (d41a0 <setup+0xbc>)
   d412a:	f001 fa19 	bl	d5560 <_ZN9SeeedOLED12clearDisplayEv>
  SeeedOled.setNormalDisplay();
   d412e:	481c      	ldr	r0, [pc, #112]	; (d41a0 <setup+0xbc>)
   d4130:	f001 fa7d 	bl	d562e <_ZN9SeeedOLED16setNormalDisplayEv>
  SeeedOled.setPageMode();
   d4134:	481a      	ldr	r0, [pc, #104]	; (d41a0 <setup+0xbc>)
   d4136:	f001 f9bc 	bl	d54b2 <_ZN9SeeedOLED11setPageModeEv>

  SeeedOled.setTextXY(2, 0);
   d413a:	2200      	movs	r2, #0
   d413c:	2102      	movs	r1, #2
   d413e:	4818      	ldr	r0, [pc, #96]	; (d41a0 <setup+0xbc>)
   d4140:	f001 f9c4 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Particle");
   d4144:	4917      	ldr	r1, [pc, #92]	; (d41a4 <setup+0xc0>)
   d4146:	4816      	ldr	r0, [pc, #88]	; (d41a0 <setup+0xbc>)
   d4148:	f001 fa2c 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(3, 0);
   d414c:	2200      	movs	r2, #0
   d414e:	2103      	movs	r1, #3
   d4150:	4813      	ldr	r0, [pc, #76]	; (d41a0 <setup+0xbc>)
   d4152:	f001 f9bb 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Air Quality");
   d4156:	4914      	ldr	r1, [pc, #80]	; (d41a8 <setup+0xc4>)
   d4158:	4811      	ldr	r0, [pc, #68]	; (d41a0 <setup+0xbc>)
   d415a:	f001 fa23 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.setTextXY(4, 0);
   d415e:	2200      	movs	r2, #0
   d4160:	2104      	movs	r1, #4
   d4162:	480f      	ldr	r0, [pc, #60]	; (d41a0 <setup+0xbc>)
   d4164:	f001 f9b2 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Monitor");
   d4168:	480d      	ldr	r0, [pc, #52]	; (d41a0 <setup+0xbc>)
   d416a:	4910      	ldr	r1, [pc, #64]	; (d41ac <setup+0xc8>)
   d416c:	f001 fa1a 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>

  if (bme.begin())
   d4170:	480f      	ldr	r0, [pc, #60]	; (d41b0 <setup+0xcc>)
   d4172:	f000 ff8d 	bl	d5090 <_ZN15Adafruit_BME2805beginEv>
   d4176:	b118      	cbz	r0, d4180 <setup+0x9c>
  {
    Serial.println("BME280 Sensor ready.");
   d4178:	f002 fbb8 	bl	d68ec <_Z16_fetch_usbserialv>
   d417c:	490d      	ldr	r1, [pc, #52]	; (d41b4 <setup+0xd0>)
   d417e:	e002      	b.n	d4186 <setup+0xa2>
  }
  else
  {
    Serial.println("BME280 Sensor ERROR!");
   d4180:	f002 fbb4 	bl	d68ec <_Z16_fetch_usbserialv>
   d4184:	490c      	ldr	r1, [pc, #48]	; (d41b8 <setup+0xd4>)
   d4186:	f001 feea 	bl	d5f5e <_ZN5Print7printlnEPKc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d418a:	f001 faed 	bl	d5768 <HAL_Timer_Get_Milli_Seconds>
  }

  lastInterval = millis();
   d418e:	4b0b      	ldr	r3, [pc, #44]	; (d41bc <setup+0xd8>)
   d4190:	6018      	str	r0, [r3, #0]
   d4192:	bd08      	pop	{r3, pc}
   d4194:	2003e3ac 	.word	0x2003e3ac
   d4198:	000d95a4 	.word	0x000d95a4
   d419c:	000d95be 	.word	0x000d95be
   d41a0:	2003e3d8 	.word	0x2003e3d8
   d41a4:	000d95d8 	.word	0x000d95d8
   d41a8:	000d95e1 	.word	0x000d95e1
   d41ac:	000d95ed 	.word	0x000d95ed
   d41b0:	2003e368 	.word	0x2003e368
   d41b4:	000d95f5 	.word	0x000d95f5
   d41b8:	000d960a 	.word	0x000d960a
   d41bc:	2003e3c8 	.word	0x2003e3c8

000d41c0 <_Z13getAirQualityv>:
    lastInterval = millis();
  }
}

String getAirQuality()
{
   d41c0:	b538      	push	{r3, r4, r5, lr}
   d41c2:	4604      	mov	r4, r0
  int quality = aqSensor.slope();
   d41c4:	4811      	ldr	r0, [pc, #68]	; (d420c <_Z13getAirQualityv+0x4c>)
   d41c6:	f001 f913 	bl	d53f0 <_ZN16AirQualitySensor5slopeEv>
  String qual = "None";
   d41ca:	4911      	ldr	r1, [pc, #68]	; (d4210 <_Z13getAirQualityv+0x50>)
  }
}

String getAirQuality()
{
  int quality = aqSensor.slope();
   d41cc:	4605      	mov	r5, r0
  String qual = "None";
   d41ce:	4620      	mov	r0, r4
   d41d0:	f001 fe0f 	bl	d5df2 <_ZN6StringC1EPK19__FlashStringHelper>

  if (quality == AirQualitySensor::FORCE_SIGNAL)
   d41d4:	4b0f      	ldr	r3, [pc, #60]	; (d4214 <_Z13getAirQualityv+0x54>)
   d41d6:	681b      	ldr	r3, [r3, #0]
   d41d8:	429d      	cmp	r5, r3
   d41da:	d101      	bne.n	d41e0 <_Z13getAirQualityv+0x20>
  {
    qual = "Danger";
   d41dc:	490e      	ldr	r1, [pc, #56]	; (d4218 <_Z13getAirQualityv+0x58>)
   d41de:	e010      	b.n	d4202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::HIGH_POLLUTION)
   d41e0:	4b0e      	ldr	r3, [pc, #56]	; (d421c <_Z13getAirQualityv+0x5c>)
   d41e2:	681b      	ldr	r3, [r3, #0]
   d41e4:	429d      	cmp	r5, r3
   d41e6:	d101      	bne.n	d41ec <_Z13getAirQualityv+0x2c>
  {
    qual = "High Pollution";
   d41e8:	490d      	ldr	r1, [pc, #52]	; (d4220 <_Z13getAirQualityv+0x60>)
   d41ea:	e00a      	b.n	d4202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::LOW_POLLUTION)
   d41ec:	4b0d      	ldr	r3, [pc, #52]	; (d4224 <_Z13getAirQualityv+0x64>)
   d41ee:	681b      	ldr	r3, [r3, #0]
   d41f0:	429d      	cmp	r5, r3
   d41f2:	d101      	bne.n	d41f8 <_Z13getAirQualityv+0x38>
  {
    qual = "Low Pollution";
   d41f4:	490c      	ldr	r1, [pc, #48]	; (d4228 <_Z13getAirQualityv+0x68>)
   d41f6:	e004      	b.n	d4202 <_Z13getAirQualityv+0x42>
  }
  else if (quality == AirQualitySensor::FRESH_AIR)
   d41f8:	4b0c      	ldr	r3, [pc, #48]	; (d422c <_Z13getAirQualityv+0x6c>)
   d41fa:	681b      	ldr	r3, [r3, #0]
   d41fc:	429d      	cmp	r5, r3
   d41fe:	d103      	bne.n	d4208 <_Z13getAirQualityv+0x48>
  {
    qual = "Fresh Air";
   d4200:	490b      	ldr	r1, [pc, #44]	; (d4230 <_Z13getAirQualityv+0x70>)
   d4202:	4620      	mov	r0, r4
   d4204:	f001 fe22 	bl	d5e4c <_ZN6StringaSEPKc>
  }

  return qual;
}
   d4208:	4620      	mov	r0, r4
   d420a:	bd38      	pop	{r3, r4, r5, pc}
   d420c:	2003e3ac 	.word	0x2003e3ac
   d4210:	000d961f 	.word	0x000d961f
   d4214:	000d97e0 	.word	0x000d97e0
   d4218:	000d9624 	.word	0x000d9624
   d421c:	000d97dc 	.word	0x000d97dc
   d4220:	000d962b 	.word	0x000d962b
   d4224:	000d97d4 	.word	0x000d97d4
   d4228:	000d963a 	.word	0x000d963a
   d422c:	000d97d8 	.word	0x000d97d8
   d4230:	000d9648 	.word	0x000d9648

000d4234 <_Z12getBMEValuesRiS_S_>:

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d4234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  temp = (int)bme.readTemperature();
   d4236:	4c0f      	ldr	r4, [pc, #60]	; (d4274 <_Z12getBMEValuesRiS_S_+0x40>)

  return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d4238:	4607      	mov	r7, r0
  temp = (int)bme.readTemperature();
   d423a:	4620      	mov	r0, r4

  return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
   d423c:	460e      	mov	r6, r1
   d423e:	4615      	mov	r5, r2
  temp = (int)bme.readTemperature();
   d4240:	f000 fbac 	bl	d499c <_ZN15Adafruit_BME28015readTemperatureEv>
   d4244:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  pressure = (int)(bme.readPressure() / 100.0F);
   d4248:	4620      	mov	r0, r4
  return qual;
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
  temp = (int)bme.readTemperature();
   d424a:	ed87 0a00 	vstr	s0, [r7]
  pressure = (int)(bme.readPressure() / 100.0F);
   d424e:	f000 fbd3 	bl	d49f8 <_ZN15Adafruit_BME28012readPressureEv>
   d4252:	eddf 7a09 	vldr	s15, [pc, #36]	; d4278 <_Z12getBMEValuesRiS_S_+0x44>
   d4256:	ee80 0a27 	vdiv.f32	s0, s0, s15
  humidity = (int)bme.readHumidity();
   d425a:	4620      	mov	r0, r4
}

int getBMEValues(int &temp, int &pressure, int &humidity)
{
  temp = (int)bme.readTemperature();
  pressure = (int)(bme.readPressure() / 100.0F);
   d425c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4260:	ed86 0a00 	vstr	s0, [r6]
  humidity = (int)bme.readHumidity();
   d4264:	f000 fd10 	bl	d4c88 <_ZN15Adafruit_BME28012readHumidityEv>
   d4268:	eebd 0ac0 	vcvt.s32.f32	s0, s0

  return 1;
}
   d426c:	2001      	movs	r0, #1

int getBMEValues(int &temp, int &pressure, int &humidity)
{
  temp = (int)bme.readTemperature();
  pressure = (int)(bme.readPressure() / 100.0F);
  humidity = (int)bme.readHumidity();
   d426e:	ed85 0a00 	vstr	s0, [r5]

  return 1;
}
   d4272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4274:	2003e368 	.word	0x2003e368
   d4278:	42c80000 	.word	0x42c80000
   d427c:	00000000 	.word	0x00000000

000d4280 <_Z21getDustSensorReadingsv>:

void getDustSensorReadings()
{
   d4280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4284:	ed2d 8b02 	vpush	{d8}
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d4288:	4c4d      	ldr	r4, [pc, #308]	; (d43c0 <_Z21getDustSensorReadingsv+0x140>)
   d428a:	4b4e      	ldr	r3, [pc, #312]	; (d43c4 <_Z21getDustSensorReadingsv+0x144>)
   d428c:	6822      	ldr	r2, [r4, #0]

  return 1;
}

void getDustSensorReadings()
{
   d428e:	b084      	sub	sp, #16
  // This particular dust sensor returns 0s often, so let's filter them out by making sure we only
  // capture and use non-zero LPO values for our calculations once we get a good reading.
  if (lowpulseoccupancy == 0)
   d4290:	b912      	cbnz	r2, d4298 <_Z21getDustSensorReadingsv+0x18>
  {
    lowpulseoccupancy = last_lpo;
   d4292:	681b      	ldr	r3, [r3, #0]
   d4294:	6023      	str	r3, [r4, #0]
   d4296:	e000      	b.n	d429a <_Z21getDustSensorReadingsv+0x1a>
  }
  else
  {
    last_lpo = lowpulseoccupancy;
   d4298:	601a      	str	r2, [r3, #0]
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d429a:	6820      	ldr	r0, [r4, #0]
   d429c:	4d4a      	ldr	r5, [pc, #296]	; (d43c8 <_Z21getDustSensorReadingsv+0x148>)
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d429e:	f8df a13c 	ldr.w	sl, [pc, #316]	; d43dc <_Z21getDustSensorReadingsv+0x15c>
  else
  {
    last_lpo = lowpulseoccupancy;
  }

  ratio = lowpulseoccupancy / (SENSOR_READING_INTERVAL * 10.0);                   // Integer percentage 0=>100
   d42a2:	f004 fab7 	bl	d8814 <__aeabi_ui2d>
   d42a6:	a33c      	add	r3, pc, #240	; (adr r3, d4398 <_Z21getDustSensorReadingsv+0x118>)
   d42a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42ac:	f004 fc52 	bl	d8b54 <__aeabi_ddiv>
   d42b0:	f004 fdd6 	bl	d8e60 <__aeabi_d2f>
   d42b4:	6028      	str	r0, [r5, #0]
  concentration = 1.1 * pow(ratio, 3) - 3.8 * pow(ratio, 2) + 520 * ratio + 0.62; // using spec sheet curve
   d42b6:	f004 facf 	bl	d8858 <__aeabi_f2d>
   d42ba:	ed9f 1b39 	vldr	d1, [pc, #228]	; d43a0 <_Z21getDustSensorReadingsv+0x120>
   d42be:	ec41 0b10 	vmov	d0, r0, r1
   d42c2:	f003 f82d 	bl	d7320 <pow>
   d42c6:	ed95 8a00 	vldr	s16, [r5]
   d42ca:	ee18 0a10 	vmov	r0, s16
   d42ce:	ed8d 0b02 	vstr	d0, [sp, #8]
   d42d2:	f004 fac1 	bl	d8858 <__aeabi_f2d>
   d42d6:	ed9d 0b02 	vldr	d0, [sp, #8]
   d42da:	4680      	mov	r8, r0
   d42dc:	4689      	mov	r9, r1
   d42de:	a332      	add	r3, pc, #200	; (adr r3, d43a8 <_Z21getDustSensorReadingsv+0x128>)
   d42e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e4:	ec51 0b10 	vmov	r0, r1, d0
   d42e8:	f004 fb0a 	bl	d8900 <__aeabi_dmul>
   d42ec:	4642      	mov	r2, r8
   d42ee:	4606      	mov	r6, r0
   d42f0:	460f      	mov	r7, r1
   d42f2:	464b      	mov	r3, r9
   d42f4:	4640      	mov	r0, r8
   d42f6:	4649      	mov	r1, r9
   d42f8:	f004 fb02 	bl	d8900 <__aeabi_dmul>
   d42fc:	a32c      	add	r3, pc, #176	; (adr r3, d43b0 <_Z21getDustSensorReadingsv+0x130>)
   d42fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4302:	f004 fafd 	bl	d8900 <__aeabi_dmul>
   d4306:	4602      	mov	r2, r0
   d4308:	460b      	mov	r3, r1
   d430a:	4630      	mov	r0, r6
   d430c:	4639      	mov	r1, r7
   d430e:	f004 f943 	bl	d8598 <__aeabi_dsub>
   d4312:	eddf 7a2e 	vldr	s15, [pc, #184]	; d43cc <_Z21getDustSensorReadingsv+0x14c>
   d4316:	ee68 7a27 	vmul.f32	s15, s16, s15
   d431a:	4606      	mov	r6, r0
   d431c:	ee17 0a90 	vmov	r0, s15
   d4320:	460f      	mov	r7, r1
   d4322:	f004 fa99 	bl	d8858 <__aeabi_f2d>
   d4326:	4602      	mov	r2, r0
   d4328:	460b      	mov	r3, r1
   d432a:	4630      	mov	r0, r6
   d432c:	4639      	mov	r1, r7
   d432e:	f004 f935 	bl	d859c <__adddf3>
   d4332:	a321      	add	r3, pc, #132	; (adr r3, d43b8 <_Z21getDustSensorReadingsv+0x138>)
   d4334:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4338:	f004 f930 	bl	d859c <__adddf3>
   d433c:	f004 fd90 	bl	d8e60 <__aeabi_d2f>
   d4340:	f8ca 0000 	str.w	r0, [sl]

  Serial.printlnf("LPO: %d", lowpulseoccupancy);
   d4344:	f002 fad2 	bl	d68ec <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4348:	6823      	ldr	r3, [r4, #0]
   d434a:	4a21      	ldr	r2, [pc, #132]	; (d43d0 <_Z21getDustSensorReadingsv+0x150>)
   d434c:	2101      	movs	r1, #1
   d434e:	f001 fe30 	bl	d5fb2 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Ratio: %f%%", ratio);
   d4352:	f002 facb 	bl	d68ec <_Z16_fetch_usbserialv>
   d4356:	4604      	mov	r4, r0
   d4358:	6828      	ldr	r0, [r5, #0]
   d435a:	f004 fa7d 	bl	d8858 <__aeabi_f2d>
   d435e:	4a1d      	ldr	r2, [pc, #116]	; (d43d4 <_Z21getDustSensorReadingsv+0x154>)
   d4360:	e9cd 0100 	strd	r0, r1, [sp]
   d4364:	2101      	movs	r1, #1
   d4366:	4620      	mov	r0, r4
   d4368:	f001 fe23 	bl	d5fb2 <_ZN5Print11printf_implEbPKcz>
  Serial.printlnf("Concentration: %f pcs/L", concentration);
   d436c:	f002 fabe 	bl	d68ec <_Z16_fetch_usbserialv>
   d4370:	4604      	mov	r4, r0
   d4372:	f8da 0000 	ldr.w	r0, [sl]
   d4376:	f004 fa6f 	bl	d8858 <__aeabi_f2d>
   d437a:	4a17      	ldr	r2, [pc, #92]	; (d43d8 <_Z21getDustSensorReadingsv+0x158>)
   d437c:	e9cd 0100 	strd	r0, r1, [sp]
   d4380:	2101      	movs	r1, #1
   d4382:	4620      	mov	r0, r4
   d4384:	f001 fe15 	bl	d5fb2 <_ZN5Print11printf_implEbPKcz>
}
   d4388:	b004      	add	sp, #16
   d438a:	ecbd 8b02 	vpop	{d8}
   d438e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4392:	bf00      	nop
   d4394:	f3af 8000 	nop.w
   d4398:	00000000 	.word	0x00000000
   d439c:	41124f80 	.word	0x41124f80
   d43a0:	00000000 	.word	0x00000000
   d43a4:	40080000 	.word	0x40080000
   d43a8:	9999999a 	.word	0x9999999a
   d43ac:	3ff19999 	.word	0x3ff19999
   d43b0:	66666666 	.word	0x66666666
   d43b4:	400e6666 	.word	0x400e6666
   d43b8:	3d70a3d7 	.word	0x3d70a3d7
   d43bc:	3fe3d70a 	.word	0x3fe3d70a
   d43c0:	2003e354 	.word	0x2003e354
   d43c4:	2003e35c 	.word	0x2003e35c
   d43c8:	2003e364 	.word	0x2003e364
   d43cc:	44020000 	.word	0x44020000
   d43d0:	000d9652 	.word	0x000d9652
   d43d4:	000d965a 	.word	0x000d965a
   d43d8:	000d9666 	.word	0x000d9666
   d43dc:	2003e350 	.word	0x2003e350

000d43e0 <_Z13updateDisplayiii6String>:

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}

void updateDisplay(int temp, int humidity, int pressure, String airQuality)
{
   d43e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43e2:	461f      	mov	r7, r3
   d43e4:	4606      	mov	r6, r0
  SeeedOled.clearDisplay();
   d43e6:	4832      	ldr	r0, [pc, #200]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}

void updateDisplay(int temp, int humidity, int pressure, String airQuality)
{
   d43e8:	4614      	mov	r4, r2
   d43ea:	460d      	mov	r5, r1
  SeeedOled.clearDisplay();
   d43ec:	f001 f8b8 	bl	d5560 <_ZN9SeeedOLED12clearDisplayEv>

  SeeedOled.setTextXY(0, 3);
   d43f0:	2203      	movs	r2, #3
   d43f2:	2100      	movs	r1, #0
   d43f4:	482e      	ldr	r0, [pc, #184]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d43f6:	f001 f869 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString(airQuality);
   d43fa:	6839      	ldr	r1, [r7, #0]
   d43fc:	482c      	ldr	r0, [pc, #176]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d43fe:	f001 f8d1 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(2, 0);
   d4402:	2200      	movs	r2, #0
   d4404:	2102      	movs	r1, #2
   d4406:	482a      	ldr	r0, [pc, #168]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4408:	f001 f860 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Temp: ");
   d440c:	4929      	ldr	r1, [pc, #164]	; (d44b4 <_Z13updateDisplayiii6String+0xd4>)
   d440e:	4828      	ldr	r0, [pc, #160]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4410:	f001 f8c8 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(temp);
   d4414:	4631      	mov	r1, r6
   d4416:	4826      	ldr	r0, [pc, #152]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4418:	f001 f8d1 	bl	d55be <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("C");
   d441c:	4926      	ldr	r1, [pc, #152]	; (d44b8 <_Z13updateDisplayiii6String+0xd8>)
   d441e:	4824      	ldr	r0, [pc, #144]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4420:	f001 f8c0 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(3, 0);
   d4424:	2200      	movs	r2, #0
   d4426:	2103      	movs	r1, #3
   d4428:	4821      	ldr	r0, [pc, #132]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d442a:	f001 f84f 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Humidity: ");
   d442e:	4923      	ldr	r1, [pc, #140]	; (d44bc <_Z13updateDisplayiii6String+0xdc>)
   d4430:	481f      	ldr	r0, [pc, #124]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4432:	f001 f8b7 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(humidity);
   d4436:	4629      	mov	r1, r5
   d4438:	481d      	ldr	r0, [pc, #116]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d443a:	f001 f8c0 	bl	d55be <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString("%");
   d443e:	4920      	ldr	r1, [pc, #128]	; (d44c0 <_Z13updateDisplayiii6String+0xe0>)
   d4440:	481b      	ldr	r0, [pc, #108]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4442:	f001 f8af 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>

  SeeedOled.setTextXY(4, 0);
   d4446:	2200      	movs	r2, #0
   d4448:	2104      	movs	r1, #4
   d444a:	4819      	ldr	r0, [pc, #100]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d444c:	f001 f83e 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
  SeeedOled.putString("Press: ");
   d4450:	491c      	ldr	r1, [pc, #112]	; (d44c4 <_Z13updateDisplayiii6String+0xe4>)
   d4452:	4817      	ldr	r0, [pc, #92]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4454:	f001 f8a6 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>
  SeeedOled.putNumber(pressure);
   d4458:	4621      	mov	r1, r4
   d445a:	4815      	ldr	r0, [pc, #84]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
  SeeedOled.putString(" hPa");

  if (concentration > 1)
   d445c:	4c1a      	ldr	r4, [pc, #104]	; (d44c8 <_Z13updateDisplayiii6String+0xe8>)
  SeeedOled.putNumber(humidity);
  SeeedOled.putString("%");

  SeeedOled.setTextXY(4, 0);
  SeeedOled.putString("Press: ");
  SeeedOled.putNumber(pressure);
   d445e:	f001 f8ae 	bl	d55be <_ZN9SeeedOLED9putNumberEl>
  SeeedOled.putString(" hPa");
   d4462:	491a      	ldr	r1, [pc, #104]	; (d44cc <_Z13updateDisplayiii6String+0xec>)
   d4464:	4812      	ldr	r0, [pc, #72]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4466:	f001 f89d 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>

  if (concentration > 1)
   d446a:	ed94 7a00 	vldr	s14, [r4]
   d446e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   d4472:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d447a:	dd17      	ble.n	d44ac <_Z13updateDisplayiii6String+0xcc>
  {
    SeeedOled.setTextXY(5, 0);
   d447c:	2200      	movs	r2, #0
   d447e:	2105      	movs	r1, #5
   d4480:	480b      	ldr	r0, [pc, #44]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4482:	f001 f823 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
    SeeedOled.putString("Dust: ");
   d4486:	4912      	ldr	r1, [pc, #72]	; (d44d0 <_Z13updateDisplayiii6String+0xf0>)
   d4488:	4809      	ldr	r0, [pc, #36]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d448a:	f001 f88b 	bl	d55a4 <_ZN9SeeedOLED9putStringEPKc>
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
   d448e:	edd4 7a00 	vldr	s15, [r4]
   d4492:	4807      	ldr	r0, [pc, #28]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
   d4494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4498:	ee17 1a90 	vmov	r1, s15
   d449c:	f001 f88f 	bl	d55be <_ZN9SeeedOLED9putNumberEl>
    SeeedOled.putString(" pcs/L");
   d44a0:	490c      	ldr	r1, [pc, #48]	; (d44d4 <_Z13updateDisplayiii6String+0xf4>)
   d44a2:	4803      	ldr	r0, [pc, #12]	; (d44b0 <_Z13updateDisplayiii6String+0xd0>)
  }
   d44a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (concentration > 1)
  {
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
   d44a8:	f001 b87c 	b.w	d55a4 <_ZN9SeeedOLED9putStringEPKc>
   d44ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44ae:	bf00      	nop
   d44b0:	2003e3d8 	.word	0x2003e3d8
   d44b4:	000d967e 	.word	0x000d967e
   d44b8:	000d9685 	.word	0x000d9685
   d44bc:	000d9687 	.word	0x000d9687
   d44c0:	000d9664 	.word	0x000d9664
   d44c4:	000d9692 	.word	0x000d9692
   d44c8:	2003e350 	.word	0x2003e350
   d44cc:	000d969a 	.word	0x000d969a
   d44d0:	000d969f 	.word	0x000d969f
   d44d4:	000d9677 	.word	0x000d9677

000d44d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d44d8:	b570      	push	{r4, r5, r6, lr}
   d44da:	4604      	mov	r4, r0
   d44dc:	460e      	mov	r6, r1
   d44de:	4615      	mov	r5, r2
		insertCheckSeparator();
   d44e0:	f000 ff0c 	bl	d52fc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d44e4:	2201      	movs	r2, #1
   d44e6:	4631      	mov	r1, r6
   d44e8:	4620      	mov	r0, r4
   d44ea:	f000 fe7b 	bl	d51e4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d44ee:	4620      	mov	r0, r4
   d44f0:	213a      	movs	r1, #58	; 0x3a
   d44f2:	f000 fe2b 	bl	d514c <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d44f6:	462a      	mov	r2, r5
   d44f8:	4620      	mov	r0, r4
   d44fa:	4902      	ldr	r1, [pc, #8]	; (d4504 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d44fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4500:	f000 be63 	b.w	d51ca <_ZN10JsonWriter13insertsprintfEPKcz>
   d4504:	000d9657 	.word	0x000d9657

000d4508 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4508:	b538      	push	{r3, r4, r5, lr}
   d450a:	4604      	mov	r4, r0
   d450c:	ed2d 8b02 	vpush	{d8}
   d4510:	460d      	mov	r5, r1
   d4512:	eeb0 8a40 	vmov.f32	s16, s0
		insertCheckSeparator();
   d4516:	f000 fef1 	bl	d52fc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d451a:	4629      	mov	r1, r5
   d451c:	4620      	mov	r0, r4
   d451e:	2201      	movs	r2, #1
   d4520:	f000 fe60 	bl	d51e4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4524:	4620      	mov	r0, r4
   d4526:	213a      	movs	r1, #58	; 0x3a
   d4528:	f000 fe10 	bl	d514c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   d452c:	eeb0 0a48 	vmov.f32	s0, s16
	}
   d4530:	ecbd 8b02 	vpop	{d8}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d4534:	4620      	mov	r0, r4
	}
   d4536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
   d453a:	f000 bf03 	b.w	d5344 <_ZN10JsonWriter11insertValueEf>
	...

000d4540 <_Z18createEventPayloadiii6String>:
  Serial.printlnf("Ratio: %f%%", ratio);
  Serial.printlnf("Concentration: %f pcs/L", concentration);
}

void createEventPayload(int temp, int humidity, int pressure, String airQuality)
{
   d4540:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4542:	b0d5      	sub	sp, #340	; 0x154
   d4544:	4607      	mov	r7, r0
   d4546:	460e      	mov	r6, r1
   d4548:	4615      	mov	r5, r2
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d454a:	a914      	add	r1, sp, #80	; 0x50
   d454c:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4550:	a808      	add	r0, sp, #32
   d4552:	461c      	mov	r4, r3
   d4554:	f000 fde8 	bl	d5128 <_ZN10JsonWriterC1EPcj>
   d4558:	4b3a      	ldr	r3, [pc, #232]	; (d4644 <_Z18createEventPayloadiii6String+0x104>)
   d455a:	9308      	str	r3, [sp, #32]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d455c:	227d      	movs	r2, #125	; 0x7d
   d455e:	217b      	movs	r1, #123	; 0x7b
   d4560:	a808      	add	r0, sp, #32
   d4562:	f000 fed6 	bl	d5312 <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw;
  {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("temp", temp);
   d4566:	463a      	mov	r2, r7
   d4568:	4937      	ldr	r1, [pc, #220]	; (d4648 <_Z18createEventPayloadiii6String+0x108>)
   d456a:	a808      	add	r0, sp, #32
   d456c:	f7ff ffb4 	bl	d44d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("humidity", humidity);
   d4570:	4632      	mov	r2, r6
   d4572:	4936      	ldr	r1, [pc, #216]	; (d464c <_Z18createEventPayloadiii6String+0x10c>)
   d4574:	a808      	add	r0, sp, #32
   d4576:	f7ff ffaf 	bl	d44d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("pressure", pressure);
   d457a:	462a      	mov	r2, r5
   d457c:	4934      	ldr	r1, [pc, #208]	; (d4650 <_Z18createEventPayloadiii6String+0x110>)
   d457e:	a808      	add	r0, sp, #32
   d4580:	f7ff ffaa 	bl	d44d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("air-quality", airQuality);
   d4584:	4621      	mov	r1, r4
   d4586:	a804      	add	r0, sp, #16
   d4588:	f001 fc55 	bl	d5e36 <_ZN6StringC1ERKS_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d458c:	a808      	add	r0, sp, #32
   d458e:	f000 feb5 	bl	d52fc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4592:	2201      	movs	r2, #1
   d4594:	492f      	ldr	r1, [pc, #188]	; (d4654 <_Z18createEventPayloadiii6String+0x114>)
   d4596:	a808      	add	r0, sp, #32
   d4598:	f000 fe24 	bl	d51e4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d459c:	213a      	movs	r1, #58	; 0x3a
   d459e:	a808      	add	r0, sp, #32
   d45a0:	f000 fdd4 	bl	d514c <_ZN10JsonWriter10insertCharEc>
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
   d45a4:	2201      	movs	r2, #1
   d45a6:	9904      	ldr	r1, [sp, #16]
   d45a8:	a808      	add	r0, sp, #32
   d45aa:	f000 fe1b 	bl	d51e4 <_ZN10JsonWriter12insertStringEPKcb>
   d45ae:	a804      	add	r0, sp, #16
   d45b0:	f001 fbd8 	bl	d5d64 <_ZN6StringD1Ev>

    if (lowpulseoccupancy > 0)
   d45b4:	4b28      	ldr	r3, [pc, #160]	; (d4658 <_Z18createEventPayloadiii6String+0x118>)
   d45b6:	681c      	ldr	r4, [r3, #0]
   d45b8:	b1f4      	cbz	r4, d45f8 <_Z18createEventPayloadiii6String+0xb8>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
   d45ba:	a808      	add	r0, sp, #32
   d45bc:	f000 fe9e 	bl	d52fc <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d45c0:	2201      	movs	r2, #1
   d45c2:	4926      	ldr	r1, [pc, #152]	; (d465c <_Z18createEventPayloadiii6String+0x11c>)
   d45c4:	a808      	add	r0, sp, #32
   d45c6:	f000 fe0d 	bl	d51e4 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d45ca:	213a      	movs	r1, #58	; 0x3a
   d45cc:	a808      	add	r0, sp, #32
   d45ce:	f000 fdbd 	bl	d514c <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an unsigned long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
   d45d2:	4622      	mov	r2, r4
   d45d4:	4922      	ldr	r1, [pc, #136]	; (d4660 <_Z18createEventPayloadiii6String+0x120>)
   d45d6:	a808      	add	r0, sp, #32
   d45d8:	f000 fdf7 	bl	d51ca <_ZN10JsonWriter13insertsprintfEPKcz>
    {
      jw.insertKeyValue("dust-lpo", lowpulseoccupancy);
      jw.insertKeyValue("dust-ratio", ratio);
   d45dc:	4b21      	ldr	r3, [pc, #132]	; (d4664 <_Z18createEventPayloadiii6String+0x124>)
   d45de:	4922      	ldr	r1, [pc, #136]	; (d4668 <_Z18createEventPayloadiii6String+0x128>)
   d45e0:	ed93 0a00 	vldr	s0, [r3]
   d45e4:	a808      	add	r0, sp, #32
   d45e6:	f7ff ff8f 	bl	d4508 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
      jw.insertKeyValue("dust-concentration", concentration);
   d45ea:	4b20      	ldr	r3, [pc, #128]	; (d466c <_Z18createEventPayloadiii6String+0x12c>)
   d45ec:	4920      	ldr	r1, [pc, #128]	; (d4670 <_Z18createEventPayloadiii6String+0x130>)
   d45ee:	ed93 0a00 	vldr	s0, [r3]
   d45f2:	a808      	add	r0, sp, #32
   d45f4:	f7ff ff88 	bl	d4508 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d45f8:	a808      	add	r0, sp, #32
   d45fa:	f000 fdb5 	bl	d5168 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d45fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4600:	9303      	str	r3, [sp, #12]
   d4602:	4b1c      	ldr	r3, [pc, #112]	; (d4674 <_Z18createEventPayloadiii6String+0x134>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4604:	9a03      	ldr	r2, [sp, #12]
   d4606:	781b      	ldrb	r3, [r3, #0]
   d4608:	f88d 3000 	strb.w	r3, [sp]
   d460c:	491a      	ldr	r1, [pc, #104]	; (d4678 <_Z18createEventPayloadiii6String+0x138>)
   d460e:	233c      	movs	r3, #60	; 0x3c
   d4610:	a804      	add	r0, sp, #16
   d4612:	f001 ff15 	bl	d6440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4616:	9c05      	ldr	r4, [sp, #20]
   d4618:	b17c      	cbz	r4, d463a <_Z18createEventPayloadiii6String+0xfa>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d461a:	6863      	ldr	r3, [r4, #4]
   d461c:	3b01      	subs	r3, #1
   d461e:	6063      	str	r3, [r4, #4]
   d4620:	b95b      	cbnz	r3, d463a <_Z18createEventPayloadiii6String+0xfa>
        {
          _M_dispose();
   d4622:	6823      	ldr	r3, [r4, #0]
   d4624:	4620      	mov	r0, r4
   d4626:	689b      	ldr	r3, [r3, #8]
   d4628:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d462a:	68a3      	ldr	r3, [r4, #8]
   d462c:	3b01      	subs	r3, #1
   d462e:	60a3      	str	r3, [r4, #8]
   d4630:	b91b      	cbnz	r3, d463a <_Z18createEventPayloadiii6String+0xfa>
            _M_destroy();
   d4632:	6823      	ldr	r3, [r4, #0]
   d4634:	4620      	mov	r0, r4
   d4636:	68db      	ldr	r3, [r3, #12]
   d4638:	4798      	blx	r3
  Serial.printlnf("Concentration: %f pcs/L", concentration);
}

void createEventPayload(int temp, int humidity, int pressure, String airQuality)
{
  JsonWriterStatic<256> jw;
   d463a:	a808      	add	r0, sp, #32
   d463c:	f7ff fd3c 	bl	d40b8 <_ZN16JsonWriterStaticILj256EED1Ev>
      jw.insertKeyValue("dust-concentration", concentration);
    }
  }

  Particle.publish("env-vals", jw.getBuffer(), PRIVATE);
}
   d4640:	b055      	add	sp, #340	; 0x154
   d4642:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4644:	000d959c 	.word	0x000d959c
   d4648:	000d96a6 	.word	0x000d96a6
   d464c:	000d96ab 	.word	0x000d96ab
   d4650:	000d96b4 	.word	0x000d96b4
   d4654:	000d96bd 	.word	0x000d96bd
   d4658:	2003e354 	.word	0x2003e354
   d465c:	000d96c9 	.word	0x000d96c9
   d4660:	000d96d2 	.word	0x000d96d2
   d4664:	2003e364 	.word	0x2003e364
   d4668:	000d96d6 	.word	0x000d96d6
   d466c:	2003e350 	.word	0x2003e350
   d4670:	000d96e1 	.word	0x000d96e1
   d4674:	2003e360 	.word	0x2003e360
   d4678:	000d96f4 	.word	0x000d96f4

000d467c <loop>:

  lastInterval = millis();
}

void loop()
{
   d467c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4680:	2100      	movs	r1, #0

  lastInterval = millis();
}

void loop()
{
   d4682:	b08c      	sub	sp, #48	; 0x30
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4684:	2004      	movs	r0, #4
   d4686:	f002 fc9d 	bl	d6fc4 <pulseIn>
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d468a:	4c31      	ldr	r4, [pc, #196]	; (d4750 <loop+0xd4>)

void loop()
{
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d468c:	4b31      	ldr	r3, [pc, #196]	; (d4754 <loop+0xd8>)
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d468e:	4d32      	ldr	r5, [pc, #200]	; (d4758 <loop+0xdc>)

void loop()
{
  int temp, pressure, humidity;

  duration = pulseIn(DUST_SENSOR_PIN, LOW);
   d4690:	6018      	str	r0, [r3, #0]
  lowpulseoccupancy = lowpulseoccupancy + duration;
   d4692:	6823      	ldr	r3, [r4, #0]
   d4694:	4418      	add	r0, r3
   d4696:	6020      	str	r0, [r4, #0]
   d4698:	f001 f866 	bl	d5768 <HAL_Timer_Get_Milli_Seconds>

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
   d469c:	682b      	ldr	r3, [r5, #0]
   d469e:	1ac0      	subs	r0, r0, r3
   d46a0:	f247 5330 	movw	r3, #30000	; 0x7530
   d46a4:	4298      	cmp	r0, r3
   d46a6:	d94f      	bls.n	d4748 <loop+0xcc>
  {
    String quality = getAirQuality();
   d46a8:	a804      	add	r0, sp, #16
   d46aa:	f7ff fd89 	bl	d41c0 <_Z13getAirQualityv>
    Serial.printlnf("\nAir Quality: %s", quality.c_str());
   d46ae:	f002 f91d 	bl	d68ec <_Z16_fetch_usbserialv>
   d46b2:	9b04      	ldr	r3, [sp, #16]
   d46b4:	4a29      	ldr	r2, [pc, #164]	; (d475c <loop+0xe0>)
   d46b6:	2101      	movs	r1, #1
   d46b8:	f001 fc7b 	bl	d5fb2 <_ZN5Print11printf_implEbPKcz>

    getBMEValues(temp, pressure, humidity);
   d46bc:	aa03      	add	r2, sp, #12
   d46be:	a902      	add	r1, sp, #8
   d46c0:	a801      	add	r0, sp, #4
   d46c2:	f7ff fdb7 	bl	d4234 <_Z12getBMEValuesRiS_S_>
    Serial.printlnf("Temp: %d", temp);
   d46c6:	f002 f911 	bl	d68ec <_Z16_fetch_usbserialv>
   d46ca:	9b01      	ldr	r3, [sp, #4]
   d46cc:	4a24      	ldr	r2, [pc, #144]	; (d4760 <loop+0xe4>)
   d46ce:	2101      	movs	r1, #1
   d46d0:	f001 fc6f 	bl	d5fb2 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Pressure: %d", pressure);
   d46d4:	f002 f90a 	bl	d68ec <_Z16_fetch_usbserialv>
   d46d8:	9b02      	ldr	r3, [sp, #8]
   d46da:	4a22      	ldr	r2, [pc, #136]	; (d4764 <loop+0xe8>)
   d46dc:	2101      	movs	r1, #1
   d46de:	f001 fc68 	bl	d5fb2 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf("Humidity: %d", humidity);
   d46e2:	f002 f903 	bl	d68ec <_Z16_fetch_usbserialv>
   d46e6:	9b03      	ldr	r3, [sp, #12]
   d46e8:	4a1f      	ldr	r2, [pc, #124]	; (d4768 <loop+0xec>)
   d46ea:	2101      	movs	r1, #1
   d46ec:	f001 fc61 	bl	d5fb2 <_ZN5Print11printf_implEbPKcz>

    getDustSensorReadings();
   d46f0:	f7ff fdc6 	bl	d4280 <_Z21getDustSensorReadingsv>

    updateDisplay(temp, humidity, pressure, quality);
   d46f4:	9e01      	ldr	r6, [sp, #4]
   d46f6:	9f03      	ldr	r7, [sp, #12]
   d46f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
   d46fc:	a904      	add	r1, sp, #16
   d46fe:	a808      	add	r0, sp, #32
   d4700:	f001 fb99 	bl	d5e36 <_ZN6StringC1ERKS_>
   d4704:	4642      	mov	r2, r8
   d4706:	ab08      	add	r3, sp, #32
   d4708:	4639      	mov	r1, r7
   d470a:	4630      	mov	r0, r6
   d470c:	f7ff fe68 	bl	d43e0 <_Z13updateDisplayiii6String>
   d4710:	a808      	add	r0, sp, #32
   d4712:	f001 fb27 	bl	d5d64 <_ZN6StringD1Ev>

    createEventPayload(temp, humidity, pressure, quality);
   d4716:	9e01      	ldr	r6, [sp, #4]
   d4718:	9f03      	ldr	r7, [sp, #12]
   d471a:	f8dd 8008 	ldr.w	r8, [sp, #8]
   d471e:	a904      	add	r1, sp, #16
   d4720:	a808      	add	r0, sp, #32
   d4722:	f001 fb88 	bl	d5e36 <_ZN6StringC1ERKS_>
   d4726:	ab08      	add	r3, sp, #32
   d4728:	4642      	mov	r2, r8
   d472a:	4639      	mov	r1, r7
   d472c:	4630      	mov	r0, r6
   d472e:	f7ff ff07 	bl	d4540 <_Z18createEventPayloadiii6String>
   d4732:	a808      	add	r0, sp, #32
   d4734:	f001 fb16 	bl	d5d64 <_ZN6StringD1Ev>

    lowpulseoccupancy = 0;
   d4738:	2300      	movs	r3, #0
   d473a:	6023      	str	r3, [r4, #0]
   d473c:	f001 f814 	bl	d5768 <HAL_Timer_Get_Milli_Seconds>
    lastInterval = millis();
   d4740:	6028      	str	r0, [r5, #0]
  duration = pulseIn(DUST_SENSOR_PIN, LOW);
  lowpulseoccupancy = lowpulseoccupancy + duration;

  if ((millis() - lastInterval) > SENSOR_READING_INTERVAL)
  {
    String quality = getAirQuality();
   d4742:	a804      	add	r0, sp, #16
   d4744:	f001 fb0e 	bl	d5d64 <_ZN6StringD1Ev>
    createEventPayload(temp, humidity, pressure, quality);

    lowpulseoccupancy = 0;
    lastInterval = millis();
  }
}
   d4748:	b00c      	add	sp, #48	; 0x30
   d474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d474e:	bf00      	nop
   d4750:	2003e354 	.word	0x2003e354
   d4754:	2003e358 	.word	0x2003e358
   d4758:	2003e3c8 	.word	0x2003e3c8
   d475c:	000d96fd 	.word	0x000d96fd
   d4760:	000d970e 	.word	0x000d970e
   d4764:	000d9717 	.word	0x000d9717
   d4768:	000d9724 	.word	0x000d9724

000d476c <_GLOBAL__sub_I_aqSensor>:
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
  }
   d476c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d476e:	4b09      	ldr	r3, [pc, #36]	; (d4794 <_GLOBAL__sub_I_aqSensor+0x28>)
   d4770:	2401      	movs	r4, #1
   d4772:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4774:	f000 ff70 	bl	d5658 <HAL_Pin_Map>
#include "Grove_Air_Quality_Sensor.h"
#include "Adafruit_BME280.h"
#include "SeeedOLED.h"
#include "JsonParserGeneratorRK.h"

SYSTEM_THREAD(ENABLED);
   d4778:	4620      	mov	r0, r4
   d477a:	2100      	movs	r1, #0
   d477c:	f001 f90c 	bl	d5998 <system_thread_set_state>

#define AQS_PIN A2
#define DUST_SENSOR_PIN D4 
#define SENSOR_READING_INTERVAL 30000

AirQualitySensor aqSensor(AQS_PIN);
   d4780:	2111      	movs	r1, #17
   d4782:	4805      	ldr	r0, [pc, #20]	; (d4798 <_GLOBAL__sub_I_aqSensor+0x2c>)
   d4784:	f000 fe02 	bl	d538c <_ZN16AirQualitySensorC1Ei>
Adafruit_BME280 bme;
   d4788:	4804      	ldr	r0, [pc, #16]	; (d479c <_GLOBAL__sub_I_aqSensor+0x30>)
    SeeedOled.setTextXY(5, 0);
    SeeedOled.putString("Dust: ");
    SeeedOled.putNumber(concentration); // Will cast our float to an int to make it more compact
    SeeedOled.putString(" pcs/L");
  }
   d478a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#define AQS_PIN A2
#define DUST_SENSOR_PIN D4 
#define SENSOR_READING_INTERVAL 30000

AirQualitySensor aqSensor(AQS_PIN);
Adafruit_BME280 bme;
   d478e:	f000 b833 	b.w	d47f8 <_ZN15Adafruit_BME280C1Ev>
   d4792:	bf00      	nop
   d4794:	2003e360 	.word	0x2003e360
   d4798:	2003e3ac 	.word	0x2003e3ac
   d479c:	2003e368 	.word	0x2003e368

000d47a0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d47a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d47a2:	4602      	mov	r2, r0
   d47a4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d47a6:	7913      	ldrb	r3, [r2, #4]
   d47a8:	6895      	ldr	r5, [r2, #8]
   d47aa:	b133      	cbz	r3, d47ba <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d47ac:	b93d      	cbnz	r5, d47be <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d47ae:	490c      	ldr	r1, [pc, #48]	; (d47e0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d47b0:	b004      	add	sp, #16
   d47b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d47b6:	f001 bbbf 	b.w	d5f38 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d47ba:	4b0a      	ldr	r3, [pc, #40]	; (d47e4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d47bc:	e000      	b.n	d47c0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d47be:	4b0a      	ldr	r3, [pc, #40]	; (d47e8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d47c0:	7b16      	ldrb	r6, [r2, #12]
   d47c2:	4c0a      	ldr	r4, [pc, #40]	; (d47ec <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d47c4:	490a      	ldr	r1, [pc, #40]	; (d47f0 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d47c6:	7b52      	ldrb	r2, [r2, #13]
   d47c8:	9202      	str	r2, [sp, #8]
   d47ca:	2e01      	cmp	r6, #1
   d47cc:	bf08      	it	eq
   d47ce:	4621      	moveq	r1, r4
   d47d0:	9101      	str	r1, [sp, #4]
   d47d2:	9500      	str	r5, [sp, #0]
   d47d4:	4a07      	ldr	r2, [pc, #28]	; (d47f4 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d47d6:	2100      	movs	r1, #0
   d47d8:	f001 fbeb 	bl	d5fb2 <_ZN5Print11printf_implEbPKcz>
  }
   d47dc:	b004      	add	sp, #16
   d47de:	bd70      	pop	{r4, r5, r6, pc}
   d47e0:	000d9751 	.word	0x000d9751
   d47e4:	000d9bc4 	.word	0x000d9bc4
   d47e8:	000d9740 	.word	0x000d9740
   d47ec:	000d9749 	.word	0x000d9749
   d47f0:	000d974d 	.word	0x000d974d
   d47f4:	000d9767 	.word	0x000d9767

000d47f8 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d47f8:	22ff      	movs	r2, #255	; 0xff
   d47fa:	7402      	strb	r2, [r0, #16]
   d47fc:	7442      	strb	r2, [r0, #17]
   d47fe:	7482      	strb	r2, [r0, #18]
   d4800:	74c2      	strb	r2, [r0, #19]
{ }
   d4802:	4770      	bx	lr

000d4804 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4804:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d4806:	4d09      	ldr	r5, [pc, #36]	; (d482c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d4808:	6829      	ldr	r1, [r5, #0]
   d480a:	f011 0401 	ands.w	r4, r1, #1
   d480e:	d10a      	bne.n	d4826 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4810:	4628      	mov	r0, r5
   d4812:	f7ff fc48 	bl	d40a6 <__cxa_guard_acquire>
   d4816:	b130      	cbz	r0, d4826 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4818:	4621      	mov	r1, r4
   d481a:	4805      	ldr	r0, [pc, #20]	; (d4830 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d481c:	f001 f9cc 	bl	d5bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4820:	4628      	mov	r0, r5
   d4822:	f7ff fc45 	bl	d40b0 <__cxa_guard_release>
        return instance;
    }
   d4826:	4802      	ldr	r0, [pc, #8]	; (d4830 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4828:	bd38      	pop	{r3, r4, r5, pc}
   d482a:	bf00      	nop
   d482c:	2003e3cc 	.word	0x2003e3cc
   d4830:	2003e3d0 	.word	0x2003e3d0

000d4834 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4838:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d483c:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d483e:	4605      	mov	r5, r0
   d4840:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d4842:	d106      	bne.n	d4852 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4844:	f7ff ffde 	bl	d4804 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4848:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d484a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d484e:	f001 ba57 	b.w	d5d00 <_ZN8SPIClass8transferEh>
   d4852:	2607      	movs	r6, #7
   d4854:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d4856:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d485a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d485e:	2100      	movs	r1, #0
   d4860:	b280      	uxth	r0, r0
   d4862:	f002 fb6c 	bl	d6f3e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d4866:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d486a:	fa08 f106 	lsl.w	r1, r8, r6
   d486e:	4039      	ands	r1, r7
   d4870:	b280      	uxth	r0, r0
   d4872:	f002 fb64 	bl	d6f3e <digitalWrite>
        digitalWrite(_sck, HIGH);
   d4876:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d487a:	2101      	movs	r1, #1
   d487c:	b280      	uxth	r0, r0
   d487e:	f002 fb5e 	bl	d6f3e <digitalWrite>
        if (digitalRead(_miso))
   d4882:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4886:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4888:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d488a:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d488c:	f002 fb70 	bl	d6f70 <digitalRead>
   d4890:	b108      	cbz	r0, d4896 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d4892:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d4896:	f116 36ff 	adds.w	r6, r6, #4294967295
   d489a:	d2de      	bcs.n	d485a <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d489c:	4620      	mov	r0, r4
   d489e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d48a2:	b508      	push	{r3, lr}
        instance().endTransaction();
   d48a4:	f7ff ffae 	bl	d4804 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d48a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d48ac:	f001 b99f 	b.w	d5bee <_ZN8SPIClass14endTransactionEv>

000d48b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d48b0:	b510      	push	{r4, lr}
   d48b2:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d48b4:	f7ff ffa6 	bl	d4804 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d48b8:	4621      	mov	r1, r4
    }
   d48ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d48be:	f001 b9af 	b.w	d5c20 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d48c4 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d48c4:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d48c6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d48ca:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d48cc:	b085      	sub	sp, #20
   d48ce:	4604      	mov	r4, r0
   d48d0:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
   d48d2:	d121      	bne.n	d4918 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d48d4:	7901      	ldrb	r1, [r0, #4]
   d48d6:	6800      	ldr	r0, [r0, #0]
   d48d8:	f002 f939 	bl	d6b4e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d48dc:	6820      	ldr	r0, [r4, #0]
   d48de:	6803      	ldr	r3, [r0, #0]
   d48e0:	4629      	mov	r1, r5
   d48e2:	689b      	ldr	r3, [r3, #8]
   d48e4:	4798      	blx	r3
        _wire -> endTransmission();
   d48e6:	6820      	ldr	r0, [r4, #0]
   d48e8:	f002 f93c 	bl	d6b64 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d48ec:	2203      	movs	r2, #3
   d48ee:	7921      	ldrb	r1, [r4, #4]
   d48f0:	6820      	ldr	r0, [r4, #0]
   d48f2:	f002 f929 	bl	d6b48 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d48f6:	6820      	ldr	r0, [r4, #0]
   d48f8:	6803      	ldr	r3, [r0, #0]
   d48fa:	695b      	ldr	r3, [r3, #20]
   d48fc:	4798      	blx	r3
        value <<= 8;
   d48fe:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d4900:	6820      	ldr	r0, [r4, #0]
   d4902:	6803      	ldr	r3, [r0, #0]
   d4904:	695b      	ldr	r3, [r3, #20]
   d4906:	4798      	blx	r3
   d4908:	4328      	orrs	r0, r5
        value <<= 8;
   d490a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d490c:	6820      	ldr	r0, [r4, #0]
   d490e:	6803      	ldr	r3, [r0, #0]
   d4910:	695b      	ldr	r3, [r3, #20]
   d4912:	4798      	blx	r3
   d4914:	4305      	orrs	r5, r0
   d4916:	e039      	b.n	d498c <_ZN15Adafruit_BME2806read24Eh+0xc8>
    } else {
        if (_sck == -1)
   d4918:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d491c:	3301      	adds	r3, #1
   d491e:	d10e      	bne.n	d493e <_ZN15Adafruit_BME2806read24Eh+0x7a>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4920:	4b1c      	ldr	r3, [pc, #112]	; (d4994 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d4922:	4a1d      	ldr	r2, [pc, #116]	; (d4998 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   d4924:	9300      	str	r3, [sp, #0]
   d4926:	9202      	str	r2, [sp, #8]
   d4928:	2300      	movs	r3, #0
   d492a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d492c:	4668      	mov	r0, sp
   d492e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4932:	f88d 200c 	strb.w	r2, [sp, #12]
   d4936:	f88d 300d 	strb.w	r3, [sp, #13]
   d493a:	f7ff ffb9 	bl	d48b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d493e:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4942:	2100      	movs	r1, #0
   d4944:	b280      	uxth	r0, r0
   d4946:	f002 fafa 	bl	d6f3e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d494a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d494e:	4620      	mov	r0, r4
   d4950:	f7ff ff70 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
   d4954:	2100      	movs	r1, #0
   d4956:	4620      	mov	r0, r4
   d4958:	f7ff ff6c 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
   d495c:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
   d495e:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d4960:	4620      	mov	r0, r4
   d4962:	f7ff ff67 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
   d4966:	4328      	orrs	r0, r5
        value <<= 8;
   d4968:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d496a:	2100      	movs	r1, #0
   d496c:	4620      	mov	r0, r4
   d496e:	f7ff ff61 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
   d4972:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
   d4974:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4978:	2101      	movs	r1, #1
   d497a:	b280      	uxth	r0, r0
   d497c:	f002 fadf 	bl	d6f3e <digitalWrite>
        if (_sck == -1)
   d4980:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4984:	3301      	adds	r3, #1
   d4986:	d101      	bne.n	d498c <_ZN15Adafruit_BME2806read24Eh+0xc8>
            SPI.endTransaction(); // release the SPI bus
   d4988:	f7ff ff8b 	bl	d48a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d498c:	4628      	mov	r0, r5
   d498e:	b005      	add	sp, #20
   d4990:	bd30      	pop	{r4, r5, pc}
   d4992:	bf00      	nop
   d4994:	000d973c 	.word	0x000d973c
   d4998:	0007a120 	.word	0x0007a120

000d499c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d499c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d499e:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d49a0:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d49a2:	f7ff ff8f 	bl	d48c4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d49a6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d49aa:	d01e      	beq.n	d49ea <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d49ac:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d49ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; d49f0 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d49b2:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
   d49b6:	0052      	lsls	r2, r2, #1
   d49b8:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
   d49bc:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
   d49c0:	435b      	muls	r3, r3
   d49c2:	4350      	muls	r0, r2
   d49c4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
   d49c8:	131b      	asrs	r3, r3, #12
   d49ca:	4353      	muls	r3, r2
   d49cc:	139b      	asrs	r3, r3, #14
   d49ce:	eb03 20e0 	add.w	r0, r3, r0, asr #11
   d49d2:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d49d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d49d8:	3080      	adds	r0, #128	; 0x80
   d49da:	1200      	asrs	r0, r0, #8
   d49dc:	ee07 0a90 	vmov	s15, r0
   d49e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d49e4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d49e8:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
   d49ea:	ed9f 0a02 	vldr	s0, [pc, #8]	; d49f4 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
   d49ee:	bd10      	pop	{r4, pc}
   d49f0:	42c80000 	.word	0x42c80000
   d49f4:	7fc00000 	.word	0x7fc00000

000d49f8 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d49f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49fc:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d49fe:	f7ff ffcd 	bl	d499c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4a02:	21f7      	movs	r1, #247	; 0xf7
   d4a04:	4630      	mov	r0, r6
   d4a06:	f7ff ff5d 	bl	d48c4 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4a0a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d4a0e:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d4a10:	f000 80c1 	beq.w	d4b96 <_ZN15Adafruit_BME28012readPressureEv+0x19e>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4a14:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4a16:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d4a1a:	17e5      	asrs	r5, r4, #31
   d4a1c:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
   d4a20:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4a24:	fba4 8904 	umull	r8, r9, r4, r4
   d4a28:	fb04 f305 	mul.w	r3, r4, r5
   d4a2c:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d4a30:	fb02 f105 	mul.w	r1, r2, r5
   d4a34:	17d3      	asrs	r3, r2, #31
   d4a36:	fb04 1103 	mla	r1, r4, r3, r1
   d4a3a:	fba2 2304 	umull	r2, r3, r2, r4
   d4a3e:	440b      	add	r3, r1
   d4a40:	0319      	lsls	r1, r3, #12
   d4a42:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
   d4a46:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d4a48:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
   d4a4c:	17d3      	asrs	r3, r2, #31
   d4a4e:	fb02 fe09 	mul.w	lr, r2, r9
   d4a52:	fb08 ee03 	mla	lr, r8, r3, lr
   d4a56:	fba2 2308 	umull	r2, r3, r2, r8
   d4a5a:	4473      	add	r3, lr
   d4a5c:	ea4f 2a12 	mov.w	sl, r2, lsr #8
   d4a60:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
   d4a64:	eb1a 0a00 	adds.w	sl, sl, r0
   d4a68:	8b72      	ldrh	r2, [r6, #26]
   d4a6a:	ea4f 2b23 	mov.w	fp, r3, asr #8
   d4a6e:	eb4b 0b01 	adc.w	fp, fp, r1
   d4a72:	f11a 0000 	adds.w	r0, sl, #0
   d4a76:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
   d4a7a:	fba0 ab02 	umull	sl, fp, r0, r2
   d4a7e:	fb02 bb01 	mla	fp, r2, r1, fp
   d4a82:	ea4f 026b 	mov.w	r2, fp, asr #1
   d4a86:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
   d4a8a:	ea52 0103 	orrs.w	r1, r2, r3
   d4a8e:	f000 8086 	beq.w	d4b9e <_ZN15Adafruit_BME28012readPressureEv+0x1a6>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4a92:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24
   d4a96:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4a9a:	fb0a f109 	mul.w	r1, sl, r9
   d4a9e:	fb08 110b 	mla	r1, r8, fp, r1
   d4aa2:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4aa6:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d4aaa:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4aac:	ea4f 7bea 	mov.w	fp, sl, asr #31
   d4ab0:	fb0a f105 	mul.w	r1, sl, r5
   d4ab4:	fb04 110b 	mla	r1, r4, fp, r1
   d4ab8:	fbaa 4504 	umull	r4, r5, sl, r4
   d4abc:	440d      	add	r5, r1
   d4abe:	ea4f 4b45 	mov.w	fp, r5, lsl #17
   d4ac2:	ea4f 4a44 	mov.w	sl, r4, lsl #17

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4ac6:	1138      	asrs	r0, r7, #4
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4ac8:	eb1a 0a08 	adds.w	sl, sl, r8

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4acc:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d4ad0:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
   d4ad4:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
   d4ad8:	ea4f 79e0 	mov.w	r9, r0, asr #31
   d4adc:	ea4f 75c9 	mov.w	r5, r9, lsl #31
   d4ae0:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
   d4ae4:	07c4      	lsls	r4, r0, #31
   d4ae6:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
   d4aea:	f04f 0800 	mov.w	r8, #0
   d4aee:	eb18 080a 	adds.w	r8, r8, sl
   d4af2:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4af6:	eb49 090b 	adc.w	r9, r9, fp
   d4afa:	f640 4735 	movw	r7, #3125	; 0xc35
   d4afe:	ebb4 0408 	subs.w	r4, r4, r8
   d4b02:	eb65 0509 	sbc.w	r5, r5, r9
   d4b06:	fba4 0107 	umull	r0, r1, r4, r7
   d4b0a:	fb07 1105 	mla	r1, r7, r5, r1
   d4b0e:	f004 fb05 	bl	d911c <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4b12:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d4b16:	134c      	asrs	r4, r1, #13
   d4b18:	0b45      	lsrs	r5, r0, #13
   d4b1a:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4b1e:	fb02 f704 	mul.w	r7, r2, r4
   d4b22:	17d3      	asrs	r3, r2, #31
   d4b24:	fb05 7703 	mla	r7, r5, r3, r7
   d4b28:	fba2 2305 	umull	r2, r3, r2, r5
   d4b2c:	443b      	add	r3, r7
   d4b2e:	4354      	muls	r4, r2
   d4b30:	fb05 4403 	mla	r4, r5, r3, r4
   d4b34:	fba2 2305 	umull	r2, r3, r2, r5
   d4b38:	4423      	add	r3, r4
   d4b3a:	0e54      	lsrs	r4, r2, #25
   d4b3c:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
   d4b40:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
   d4b44:	1824      	adds	r4, r4, r0
   d4b46:	ea4f 6563 	mov.w	r5, r3, asr #25
   d4b4a:	414d      	adcs	r5, r1
   d4b4c:	17d3      	asrs	r3, r2, #31
   d4b4e:	4351      	muls	r1, r2
   d4b50:	fb00 1303 	mla	r3, r0, r3, r1
   d4b54:	fba2 0100 	umull	r0, r1, r2, r0
   d4b58:	4419      	add	r1, r3
   d4b5a:	0cc2      	lsrs	r2, r0, #19
   d4b5c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
   d4b60:	1912      	adds	r2, r2, r4
    return (float)p/256;
   d4b62:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4b66:	ea4f 43e1 	mov.w	r3, r1, asr #19
   d4b6a:	416b      	adcs	r3, r5
   d4b6c:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
   d4b6e:	17e5      	asrs	r5, r4, #31
   d4b70:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d4b72:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
   d4b76:	1219      	asrs	r1, r3, #8
    return (float)p/256;
   d4b78:	012b      	lsls	r3, r5, #4
   d4b7a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
   d4b7e:	1880      	adds	r0, r0, r2
   d4b80:	4159      	adcs	r1, r3
   d4b82:	f004 fa8d 	bl	d90a0 <__aeabi_l2f>
   d4b86:	ed9f 0a08 	vldr	s0, [pc, #32]	; d4ba8 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d4b8a:	ee07 0a90 	vmov	s15, r0
   d4b8e:	ee27 0a80 	vmul.f32	s0, s15, s0
   d4b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
   d4b96:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4bac <_ZN15Adafruit_BME28012readPressureEv+0x1b4>
   d4b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
   d4b9e:	ed9f 0a04 	vldr	s0, [pc, #16]	; d4bb0 <_ZN15Adafruit_BME28012readPressureEv+0x1b8>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
   d4ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ba6:	bf00      	nop
   d4ba8:	3b800000 	.word	0x3b800000
   d4bac:	7fc00000 	.word	0x7fc00000
   d4bb0:	00000000 	.word	0x00000000

000d4bb4 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4bb4:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d4bb6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4bba:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4bbc:	b085      	sub	sp, #20
   d4bbe:	4604      	mov	r4, r0
   d4bc0:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d4bc2:	d11d      	bne.n	d4c00 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4bc4:	7901      	ldrb	r1, [r0, #4]
   d4bc6:	6800      	ldr	r0, [r0, #0]
   d4bc8:	f001 ffc1 	bl	d6b4e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4bcc:	6820      	ldr	r0, [r4, #0]
   d4bce:	6803      	ldr	r3, [r0, #0]
   d4bd0:	4629      	mov	r1, r5
   d4bd2:	689b      	ldr	r3, [r3, #8]
   d4bd4:	4798      	blx	r3
        _wire -> endTransmission();
   d4bd6:	6820      	ldr	r0, [r4, #0]
   d4bd8:	f001 ffc4 	bl	d6b64 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d4bdc:	2202      	movs	r2, #2
   d4bde:	7921      	ldrb	r1, [r4, #4]
   d4be0:	6820      	ldr	r0, [r4, #0]
   d4be2:	f001 ffb1 	bl	d6b48 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d4be6:	6820      	ldr	r0, [r4, #0]
   d4be8:	6803      	ldr	r3, [r0, #0]
   d4bea:	695b      	ldr	r3, [r3, #20]
   d4bec:	4798      	blx	r3
   d4bee:	4605      	mov	r5, r0
   d4bf0:	6820      	ldr	r0, [r4, #0]
   d4bf2:	6803      	ldr	r3, [r0, #0]
   d4bf4:	695b      	ldr	r3, [r3, #20]
   d4bf6:	4798      	blx	r3
   d4bf8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4bfc:	b285      	uxth	r5, r0
   d4bfe:	e035      	b.n	d4c6c <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d4c00:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4c04:	3301      	adds	r3, #1
   d4c06:	d10e      	bne.n	d4c26 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d4c08:	4b1a      	ldr	r3, [pc, #104]	; (d4c74 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d4c0a:	4a1b      	ldr	r2, [pc, #108]	; (d4c78 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d4c0c:	9300      	str	r3, [sp, #0]
   d4c0e:	9202      	str	r2, [sp, #8]
   d4c10:	2300      	movs	r3, #0
   d4c12:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4c14:	4668      	mov	r0, sp
   d4c16:	f88d 3004 	strb.w	r3, [sp, #4]
   d4c1a:	f88d 200c 	strb.w	r2, [sp, #12]
   d4c1e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4c22:	f7ff fe45 	bl	d48b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4c26:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c2a:	2100      	movs	r1, #0
   d4c2c:	b280      	uxth	r0, r0
   d4c2e:	f002 f986 	bl	d6f3e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4c32:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4c36:	4620      	mov	r0, r4
   d4c38:	f7ff fdfc 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4c3c:	2100      	movs	r1, #0
   d4c3e:	4620      	mov	r0, r4
   d4c40:	f7ff fdf8 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
   d4c44:	2100      	movs	r1, #0
   d4c46:	4605      	mov	r5, r0
   d4c48:	4620      	mov	r0, r4
   d4c4a:	f7ff fdf3 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
   d4c4e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d4c52:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d4c54:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4c58:	2101      	movs	r1, #1
   d4c5a:	b280      	uxth	r0, r0
   d4c5c:	f002 f96f 	bl	d6f3e <digitalWrite>
        if (_sck == -1)
   d4c60:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4c64:	3301      	adds	r3, #1
   d4c66:	d101      	bne.n	d4c6c <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4c68:	f7ff fe1b 	bl	d48a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4c6c:	4628      	mov	r0, r5
   d4c6e:	b005      	add	sp, #20
   d4c70:	bd30      	pop	{r4, r5, pc}
   d4c72:	bf00      	nop
   d4c74:	000d973c 	.word	0x000d973c
   d4c78:	0007a120 	.word	0x0007a120

000d4c7c <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4c7c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4c7e:	f7ff ff99 	bl	d4bb4 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d4c82:	ba40      	rev16	r0, r0
}
   d4c84:	b280      	uxth	r0, r0
   d4c86:	bd08      	pop	{r3, pc}

000d4c88 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
   d4c88:	b510      	push	{r4, lr}
   d4c8a:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d4c8c:	f7ff fe86 	bl	d499c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d4c90:	21fd      	movs	r1, #253	; 0xfd
   d4c92:	4620      	mov	r0, r4
   d4c94:	f7ff ff8e 	bl	d4bb4 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d4c98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d4c9c:	d038      	beq.n	d4d10 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4c9e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4ca2:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4ca4:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
   d4ca8:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
   d4caa:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d4cae:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
   d4cb2:	fb02 3311 	mls	r3, r2, r1, r3
   d4cb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d4cba:	13d9      	asrs	r1, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d4cbc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d4cc0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d4cc4:	4353      	muls	r3, r2
   d4cc6:	12db      	asrs	r3, r3, #11
   d4cc8:	4342      	muls	r2, r0
   d4cca:	1292      	asrs	r2, r2, #10
   d4ccc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
   d4cd0:	4353      	muls	r3, r2
   d4cd2:	129b      	asrs	r3, r3, #10
   d4cd4:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
   d4cd8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   d4cdc:	4353      	muls	r3, r2
   d4cde:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d4ce2:	139b      	asrs	r3, r3, #14
   d4ce4:	434b      	muls	r3, r1

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d4ce6:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d4ce8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   d4cec:	4352      	muls	r2, r2
   d4cee:	11d2      	asrs	r2, r2, #7
   d4cf0:	434a      	muls	r2, r1
   d4cf2:	eba3 1322 	sub.w	r3, r3, r2, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d4cf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
   d4cfa:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d4cfe:	bfa8      	it	ge
   d4d00:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
   d4d04:	131b      	asrs	r3, r3, #12
   d4d06:	ee00 3a10 	vmov	s0, r3
   d4d0a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
   d4d0e:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
   d4d10:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4d18 <_ZN15Adafruit_BME28012readHumidityEv+0x90>

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
   d4d14:	bd10      	pop	{r4, pc}
   d4d16:	bf00      	nop
   d4d18:	7fc00000 	.word	0x7fc00000

000d4d1c <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4d1c:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4d1e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4d22:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4d24:	b085      	sub	sp, #20
   d4d26:	4604      	mov	r4, r0
   d4d28:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d4d2a:	d116      	bne.n	d4d5a <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4d2c:	7901      	ldrb	r1, [r0, #4]
   d4d2e:	6800      	ldr	r0, [r0, #0]
   d4d30:	f001 ff0d 	bl	d6b4e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4d34:	6820      	ldr	r0, [r4, #0]
   d4d36:	6803      	ldr	r3, [r0, #0]
   d4d38:	4629      	mov	r1, r5
   d4d3a:	689b      	ldr	r3, [r3, #8]
   d4d3c:	4798      	blx	r3
        _wire -> endTransmission();
   d4d3e:	6820      	ldr	r0, [r4, #0]
   d4d40:	f001 ff10 	bl	d6b64 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4d44:	2201      	movs	r2, #1
   d4d46:	7921      	ldrb	r1, [r4, #4]
   d4d48:	6820      	ldr	r0, [r4, #0]
   d4d4a:	f001 fefd 	bl	d6b48 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4d4e:	6820      	ldr	r0, [r4, #0]
   d4d50:	6803      	ldr	r3, [r0, #0]
   d4d52:	695b      	ldr	r3, [r3, #20]
   d4d54:	4798      	blx	r3
   d4d56:	b2c5      	uxtb	r5, r0
   d4d58:	e02e      	b.n	d4db8 <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d4d5a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4d5e:	3301      	adds	r3, #1
   d4d60:	d10e      	bne.n	d4d80 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d4d62:	4b17      	ldr	r3, [pc, #92]	; (d4dc0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d4d64:	4a17      	ldr	r2, [pc, #92]	; (d4dc4 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d4d66:	9300      	str	r3, [sp, #0]
   d4d68:	9202      	str	r2, [sp, #8]
   d4d6a:	2300      	movs	r3, #0
   d4d6c:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4d6e:	4668      	mov	r0, sp
   d4d70:	f88d 3004 	strb.w	r3, [sp, #4]
   d4d74:	f88d 200c 	strb.w	r2, [sp, #12]
   d4d78:	f88d 300d 	strb.w	r3, [sp, #13]
   d4d7c:	f7ff fd98 	bl	d48b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4d80:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4d84:	2100      	movs	r1, #0
   d4d86:	b280      	uxth	r0, r0
   d4d88:	f002 f8d9 	bl	d6f3e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d4d8c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4d90:	4620      	mov	r0, r4
   d4d92:	f7ff fd4f 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d4d96:	2100      	movs	r1, #0
   d4d98:	4620      	mov	r0, r4
   d4d9a:	f7ff fd4b 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
   d4d9e:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d4da0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4da4:	2101      	movs	r1, #1
   d4da6:	b280      	uxth	r0, r0
   d4da8:	f002 f8c9 	bl	d6f3e <digitalWrite>
        if (_sck == -1)
   d4dac:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4db0:	3301      	adds	r3, #1
   d4db2:	d101      	bne.n	d4db8 <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d4db4:	f7ff fd75 	bl	d48a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d4db8:	4628      	mov	r0, r5
   d4dba:	b005      	add	sp, #20
   d4dbc:	bd30      	pop	{r4, r5, pc}
   d4dbe:	bf00      	nop
   d4dc0:	000d973c 	.word	0x000d973c
   d4dc4:	0007a120 	.word	0x0007a120

000d4dc8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d4dc8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d4dca:	21f3      	movs	r1, #243	; 0xf3
   d4dcc:	f7ff ffa6 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4dd0:	f000 0001 	and.w	r0, r0, #1
   d4dd4:	bd08      	pop	{r3, pc}

000d4dd6 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4dd6:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4dd8:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d4dda:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4ddc:	f7ff ff4e 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4de0:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4de2:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4de4:	4620      	mov	r0, r4
   d4de6:	f7ff ff49 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
   d4dea:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4dec:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4dee:	4620      	mov	r0, r4
   d4df0:	f7ff ff44 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4df4:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d4df6:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4df8:	4620      	mov	r0, r4
   d4dfa:	f7ff ff3f 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4dfe:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4e00:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e02:	4620      	mov	r0, r4
   d4e04:	f7ff ff3a 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
   d4e08:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d4e0a:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	f7ff ff35 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
   d4e12:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4e14:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e16:	4620      	mov	r0, r4
   d4e18:	f7ff ff30 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
   d4e1c:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4e1e:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e20:	4620      	mov	r0, r4
   d4e22:	f7ff ff2b 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
   d4e26:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d4e28:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e2a:	4620      	mov	r0, r4
   d4e2c:	f7ff ff26 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
   d4e30:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4e32:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e34:	4620      	mov	r0, r4
   d4e36:	f7ff ff21 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
   d4e3a:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4e3c:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e3e:	4620      	mov	r0, r4
   d4e40:	f7ff ff1c 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
   d4e44:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d4e46:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e48:	4620      	mov	r0, r4
   d4e4a:	f7ff ff17 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4e4e:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4e50:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4e52:	4620      	mov	r0, r4
   d4e54:	f7ff ff62 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e58:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4e5a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4e5e:	4620      	mov	r0, r4
   d4e60:	f7ff ff0c 	bl	d4c7c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4e64:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d4e66:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4e68:	4620      	mov	r0, r4
   d4e6a:	f7ff ff57 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4e6e:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d4e70:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d4e74:	4620      	mov	r0, r4
   d4e76:	f7ff ff51 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>
   d4e7a:	21e5      	movs	r1, #229	; 0xe5
   d4e7c:	4605      	mov	r5, r0
   d4e7e:	4620      	mov	r0, r4
   d4e80:	f7ff ff4c 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>
   d4e84:	f000 000f 	and.w	r0, r0, #15
   d4e88:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4e8c:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d4e8e:	21e6      	movs	r1, #230	; 0xe6
   d4e90:	4620      	mov	r0, r4
   d4e92:	f7ff ff43 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>
   d4e96:	21e5      	movs	r1, #229	; 0xe5
   d4e98:	4605      	mov	r5, r0
   d4e9a:	4620      	mov	r0, r4
   d4e9c:	f7ff ff3e 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>
   d4ea0:	1100      	asrs	r0, r0, #4
   d4ea2:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d4ea6:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d4ea8:	21e7      	movs	r1, #231	; 0xe7
   d4eaa:	4620      	mov	r0, r4
   d4eac:	f7ff ff36 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>
   d4eb0:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d4eb4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4eb8 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4eb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d4eba:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4ebe:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4ec0:	4604      	mov	r4, r0
   d4ec2:	460e      	mov	r6, r1
   d4ec4:	4615      	mov	r5, r2
    if (_cs == -1) {
   d4ec6:	d111      	bne.n	d4eec <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4ec8:	7901      	ldrb	r1, [r0, #4]
   d4eca:	6800      	ldr	r0, [r0, #0]
   d4ecc:	f001 fe3f 	bl	d6b4e <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4ed0:	6820      	ldr	r0, [r4, #0]
   d4ed2:	6803      	ldr	r3, [r0, #0]
   d4ed4:	4631      	mov	r1, r6
   d4ed6:	689b      	ldr	r3, [r3, #8]
   d4ed8:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d4eda:	6820      	ldr	r0, [r4, #0]
   d4edc:	6803      	ldr	r3, [r0, #0]
   d4ede:	4629      	mov	r1, r5
   d4ee0:	689b      	ldr	r3, [r3, #8]
   d4ee2:	4798      	blx	r3
        _wire -> endTransmission();
   d4ee4:	6820      	ldr	r0, [r4, #0]
   d4ee6:	f001 fe3d 	bl	d6b64 <_ZN7TwoWire15endTransmissionEv>
   d4eea:	e02d      	b.n	d4f48 <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4eec:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4ef0:	3301      	adds	r3, #1
   d4ef2:	d10e      	bne.n	d4f12 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4ef4:	4b15      	ldr	r3, [pc, #84]	; (d4f4c <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d4ef6:	4a16      	ldr	r2, [pc, #88]	; (d4f50 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d4ef8:	9300      	str	r3, [sp, #0]
   d4efa:	9202      	str	r2, [sp, #8]
   d4efc:	2300      	movs	r3, #0
   d4efe:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4f00:	4668      	mov	r0, sp
   d4f02:	f88d 3004 	strb.w	r3, [sp, #4]
   d4f06:	f88d 200c 	strb.w	r2, [sp, #12]
   d4f0a:	f88d 300d 	strb.w	r3, [sp, #13]
   d4f0e:	f7ff fccf 	bl	d48b0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4f12:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4f16:	2100      	movs	r1, #0
   d4f18:	b280      	uxth	r0, r0
   d4f1a:	f002 f810 	bl	d6f3e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4f1e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4f22:	4620      	mov	r0, r4
   d4f24:	f7ff fc86 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d4f28:	4629      	mov	r1, r5
   d4f2a:	4620      	mov	r0, r4
   d4f2c:	f7ff fc82 	bl	d4834 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4f30:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4f34:	2101      	movs	r1, #1
   d4f36:	b280      	uxth	r0, r0
   d4f38:	f002 f801 	bl	d6f3e <digitalWrite>
    if (_sck == -1)
   d4f3c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4f40:	3301      	adds	r3, #1
   d4f42:	d101      	bne.n	d4f48 <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4f44:	f7ff fcad 	bl	d48a2 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d4f48:	b004      	add	sp, #16
   d4f4a:	bd70      	pop	{r4, r5, r6, pc}
   d4f4c:	000d973c 	.word	0x000d973c
   d4f50:	0007a120 	.word	0x0007a120

000d4f54 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d4f56:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4f5a:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d4f5e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d4f62:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d4f66:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d4f6a:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d4f6e:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d4f72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d4f76:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d4f7a:	f366 1347 	bfi	r3, r6, #5, #3
   d4f7e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d4f82:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d4f86:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4f8a:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d4f8c:	f367 0302 	bfi	r3, r7, #0, #3
   d4f90:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d4f94:	f006 0207 	and.w	r2, r6, #7
   d4f98:	21f2      	movs	r1, #242	; 0xf2
   d4f9a:	f7ff ff8d 	bl	d4eb8 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d4f9e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d4fa2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4fa6:	f002 0107 	and.w	r1, r2, #7
   d4faa:	009b      	lsls	r3, r3, #2
   d4fac:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4fb0:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d4fb4:	4620      	mov	r0, r4
   d4fb6:	21f5      	movs	r1, #245	; 0xf5
   d4fb8:	f7ff ff7e 	bl	d4eb8 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4fbc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4fc0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4fc4:	f002 0107 	and.w	r1, r2, #7
   d4fc8:	009b      	lsls	r3, r3, #2
   d4fca:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4fce:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	21f4      	movs	r1, #244	; 0xf4
}
   d4fd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4fda:	f7ff bf6d 	b.w	d4eb8 <_ZN15Adafruit_BME2806write8Ehh>

000d4fde <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4fde:	b530      	push	{r4, r5, lr}
   d4fe0:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4fe2:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d4fe6:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4fe8:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4fea:	d103      	bne.n	d4ff4 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4fec:	6820      	ldr	r0, [r4, #0]
   d4fee:	f001 fd77 	bl	d6ae0 <_ZN7TwoWire5beginEv>
   d4ff2:	e022      	b.n	d503a <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4ff4:	2101      	movs	r1, #1
   d4ff6:	b280      	uxth	r0, r0
   d4ff8:	f001 ffa1 	bl	d6f3e <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4ffc:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5000:	2101      	movs	r1, #1
   d5002:	b280      	uxth	r0, r0
   d5004:	f001 ff8a 	bl	d6f1c <pinMode>
        if (_sck == -1) {
   d5008:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d500c:	1c43      	adds	r3, r0, #1
   d500e:	d104      	bne.n	d501a <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5010:	f7ff fbf8 	bl	d4804 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5014:	f000 fdda 	bl	d5bcc <_ZN8SPIClass5beginEv>
   d5018:	e00f      	b.n	d503a <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d501a:	2101      	movs	r1, #1
   d501c:	b280      	uxth	r0, r0
   d501e:	f001 ff7d 	bl	d6f1c <pinMode>
            pinMode(_mosi, OUTPUT);
   d5022:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d5026:	2101      	movs	r1, #1
   d5028:	b280      	uxth	r0, r0
   d502a:	f001 ff77 	bl	d6f1c <pinMode>
            pinMode(_miso, INPUT);
   d502e:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5032:	2100      	movs	r1, #0
   d5034:	b280      	uxth	r0, r0
   d5036:	f001 ff71 	bl	d6f1c <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d503a:	21d0      	movs	r1, #208	; 0xd0
   d503c:	4620      	mov	r0, r4
   d503e:	f7ff fe6d 	bl	d4d1c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5042:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5044:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5046:	d120      	bne.n	d508a <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5048:	4620      	mov	r0, r4
   d504a:	22b6      	movs	r2, #182	; 0xb6
   d504c:	21e0      	movs	r1, #224	; 0xe0
   d504e:	f7ff ff33 	bl	d4eb8 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d5052:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5056:	f000 fff9 	bl	d604c <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d505a:	4620      	mov	r0, r4
   d505c:	f7ff feb4 	bl	d4dc8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d5060:	4605      	mov	r5, r0
   d5062:	b108      	cbz	r0, d5068 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5064:	2064      	movs	r0, #100	; 0x64
   d5066:	e7f6      	b.n	d5056 <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d5068:	4620      	mov	r0, r4
   d506a:	f7ff feb4 	bl	d4dd6 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d506e:	2305      	movs	r3, #5
   d5070:	9300      	str	r3, [sp, #0]
   d5072:	461a      	mov	r2, r3
   d5074:	2103      	movs	r1, #3
   d5076:	4620      	mov	r0, r4
   d5078:	9502      	str	r5, [sp, #8]
   d507a:	9501      	str	r5, [sp, #4]
   d507c:	f7ff ff6a 	bl	d4f54 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d5080:	2064      	movs	r0, #100	; 0x64
   d5082:	f000 ffe3 	bl	d604c <delay>
   d5086:	2001      	movs	r0, #1
   d5088:	e000      	b.n	d508c <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d508a:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d508c:	b005      	add	sp, #20
   d508e:	bd30      	pop	{r4, r5, pc}

000d5090 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d5090:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d5092:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d5094:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d5096:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d5098:	f001 ffb0 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d509c:	6020      	str	r0, [r4, #0]
	status = init();
   d509e:	4620      	mov	r0, r4
   d50a0:	f7ff ff9d 	bl	d4fde <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d50a4:	b930      	cbnz	r0, d50b4 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d50a6:	2376      	movs	r3, #118	; 0x76
   d50a8:	7123      	strb	r3, [r4, #4]
 		status = init();
   d50aa:	4620      	mov	r0, r4
 		}
	return status;
}
   d50ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d50b0:	f7ff bf95 	b.w	d4fde <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d50b4:	bd10      	pop	{r4, pc}

000d50b6 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d50b6:	f000 bacf 	b.w	d5658 <HAL_Pin_Map>
	...

000d50bc <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d50bc:	b510      	push	{r4, lr}
   d50be:	4b05      	ldr	r3, [pc, #20]	; (d50d4 <_ZN10JsonBufferD1Ev+0x18>)
   d50c0:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d50c2:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d50c4:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d50c6:	b91b      	cbnz	r3, d50d0 <_ZN10JsonBufferD1Ev+0x14>
   d50c8:	6840      	ldr	r0, [r0, #4]
   d50ca:	b108      	cbz	r0, d50d0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d50cc:	f000 fd00 	bl	d5ad0 <free>
	}
}
   d50d0:	4620      	mov	r0, r4
   d50d2:	bd10      	pop	{r4, pc}
   d50d4:	000d9790 	.word	0x000d9790

000d50d8 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d50d8:	b510      	push	{r4, lr}
   d50da:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d50dc:	f7ff ffee 	bl	d50bc <_ZN10JsonBufferD1Ev>
   d50e0:	4620      	mov	r0, r4
   d50e2:	2114      	movs	r1, #20
   d50e4:	f001 ffbe 	bl	d7064 <_ZdlPvj>
   d50e8:	4620      	mov	r0, r4
   d50ea:	bd10      	pop	{r4, pc}

000d50ec <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d50ec:	b510      	push	{r4, lr}
   d50ee:	4b03      	ldr	r3, [pc, #12]	; (d50fc <_ZN10JsonWriterD1Ev+0x10>)
   d50f0:	6003      	str	r3, [r0, #0]
   d50f2:	4604      	mov	r4, r0
   d50f4:	f7ff ffe2 	bl	d50bc <_ZN10JsonBufferD1Ev>

}
   d50f8:	4620      	mov	r0, r4
   d50fa:	bd10      	pop	{r4, pc}
   d50fc:	000d97a0 	.word	0x000d97a0

000d5100 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5100:	b510      	push	{r4, lr}
   d5102:	4604      	mov	r4, r0

}
   d5104:	f7ff fff2 	bl	d50ec <_ZN10JsonWriterD1Ev>
   d5108:	4620      	mov	r0, r4
   d510a:	2130      	movs	r1, #48	; 0x30
   d510c:	f001 ffaa 	bl	d7064 <_ZdlPvj>
   d5110:	4620      	mov	r0, r4
   d5112:	bd10      	pop	{r4, pc}

000d5114 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5114:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d5116:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5118:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d511a:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d511c:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d511e:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d5120:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d5124:	4770      	bx	lr
	...

000d5128 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5128:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d512a:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d512c:	60c3      	str	r3, [r0, #12]
   d512e:	2301      	movs	r3, #1
   d5130:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5132:	4b05      	ldr	r3, [pc, #20]	; (d5148 <_ZN10JsonWriterC1EPcj+0x20>)
   d5134:	6003      	str	r3, [r0, #0]
   d5136:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d513a:	6041      	str	r1, [r0, #4]
   d513c:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d513e:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d5140:	f7ff ffe8 	bl	d5114 <_ZN10JsonWriter4initEv>
}
   d5144:	bd10      	pop	{r4, pc}
   d5146:	bf00      	nop
   d5148:	000d97a0 	.word	0x000d97a0

000d514c <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d514c:	68c3      	ldr	r3, [r0, #12]
   d514e:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d5150:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d5152:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d5154:	bf3f      	itttt	cc
   d5156:	6842      	ldrcc	r2, [r0, #4]
   d5158:	1c5c      	addcc	r4, r3, #1
   d515a:	60c4      	strcc	r4, [r0, #12]
   d515c:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d515e:	bf24      	itt	cs
   d5160:	2301      	movcs	r3, #1
   d5162:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d5166:	bd10      	pop	{r4, pc}

000d5168 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5168:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d516a:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d516c:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d516e:	b143      	cbz	r3, d5182 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d5170:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d5174:	7e59      	ldrb	r1, [r3, #25]
   d5176:	b109      	cbz	r1, d517c <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5178:	f7ff ffe8 	bl	d514c <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d517c:	6963      	ldr	r3, [r4, #20]
   d517e:	3b01      	subs	r3, #1
   d5180:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d5182:	68a3      	ldr	r3, [r4, #8]
   d5184:	68e0      	ldr	r0, [r4, #12]
   d5186:	6861      	ldr	r1, [r4, #4]
   d5188:	4298      	cmp	r0, r3
   d518a:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d518e:	bf2a      	itet	cs
   d5190:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d5192:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5194:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5198:	bd10      	pop	{r4, pc}

000d519a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d519a:	b570      	push	{r4, r5, r6, lr}
   d519c:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d519e:	68c0      	ldr	r0, [r0, #12]
   d51a0:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d51a2:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d51a4:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d51a6:	4613      	mov	r3, r2
   d51a8:	4430      	add	r0, r6
   d51aa:	460a      	mov	r2, r1
   d51ac:	4629      	mov	r1, r5
   d51ae:	f000 fc9f 	bl	d5af0 <vsnprintf>
	if (count <= spaceAvailable) {
   d51b2:	4285      	cmp	r5, r0
		offset += count;
   d51b4:	bf2d      	iteet	cs
   d51b6:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d51b8:	68a3      	ldrcc	r3, [r4, #8]
   d51ba:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d51bc:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d51be:	bf36      	itet	cc
   d51c0:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d51c2:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d51c4:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d51c8:	bd70      	pop	{r4, r5, r6, pc}

000d51ca <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d51ca:	b40e      	push	{r1, r2, r3}
   d51cc:	b503      	push	{r0, r1, lr}
   d51ce:	aa03      	add	r2, sp, #12
   d51d0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d51d4:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d51d6:	f7ff ffe0 	bl	d519a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d51da:	b002      	add	sp, #8
   d51dc:	f85d eb04 	ldr.w	lr, [sp], #4
   d51e0:	b003      	add	sp, #12
   d51e2:	4770      	bx	lr

000d51e4 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d51e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d51e8:	4604      	mov	r4, r0
   d51ea:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d51ec:	4617      	mov	r7, r2
   d51ee:	b112      	cbz	r2, d51f6 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d51f0:	2122      	movs	r1, #34	; 0x22
   d51f2:	f7ff ffab 	bl	d514c <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d51f6:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d51f8:	5d71      	ldrb	r1, [r6, r5]
   d51fa:	eb06 0805 	add.w	r8, r6, r5
   d51fe:	2900      	cmp	r1, #0
   d5200:	d071      	beq.n	d52e6 <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d5202:	68e2      	ldr	r2, [r4, #12]
   d5204:	68a3      	ldr	r3, [r4, #8]
   d5206:	429a      	cmp	r2, r3
   d5208:	d26d      	bcs.n	d52e6 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d520a:	060b      	lsls	r3, r1, #24
   d520c:	d533      	bpl.n	d5276 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d520e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d5212:	2be0      	cmp	r3, #224	; 0xe0
   d5214:	d117      	bne.n	d5246 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5216:	f898 3001 	ldrb.w	r3, [r8, #1]
   d521a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d521e:	2a80      	cmp	r2, #128	; 0x80
   d5220:	d111      	bne.n	d5246 <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d5222:	f105 0802 	add.w	r8, r5, #2
   d5226:	f816 2008 	ldrb.w	r2, [r6, r8]
   d522a:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d522e:	2880      	cmp	r0, #128	; 0x80
   d5230:	d109      	bne.n	d5246 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5232:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d5236:	019b      	lsls	r3, r3, #6
   d5238:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d523c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d5240:	431a      	orrs	r2, r3
   d5242:	b292      	uxth	r2, r2
   d5244:	e011      	b.n	d526a <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d5246:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d524a:	2bc0      	cmp	r3, #192	; 0xc0
   d524c:	d146      	bne.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d524e:	f105 0801 	add.w	r8, r5, #1
   d5252:	f816 3008 	ldrb.w	r3, [r6, r8]
   d5256:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d525a:	2a80      	cmp	r2, #128	; 0x80
   d525c:	d13e      	bne.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d525e:	0189      	lsls	r1, r1, #6
   d5260:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d5264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d5268:	431a      	orrs	r2, r3
   d526a:	4923      	ldr	r1, [pc, #140]	; (d52f8 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d526c:	4620      	mov	r0, r4
   d526e:	f7ff ffac 	bl	d51ca <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d5272:	4645      	mov	r5, r8
   d5274:	e035      	b.n	d52e2 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5276:	290c      	cmp	r1, #12
   d5278:	d018      	beq.n	d52ac <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d527a:	d80b      	bhi.n	d5294 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d527c:	2909      	cmp	r1, #9
   d527e:	d021      	beq.n	d52c4 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d5280:	290a      	cmp	r1, #10
   d5282:	d019      	beq.n	d52b8 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d5284:	2908      	cmp	r1, #8
   d5286:	d129      	bne.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5288:	215c      	movs	r1, #92	; 0x5c
   d528a:	4620      	mov	r0, r4
   d528c:	f7ff ff5e 	bl	d514c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d5290:	2162      	movs	r1, #98	; 0x62
   d5292:	e023      	b.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d5294:	2922      	cmp	r1, #34	; 0x22
   d5296:	d01b      	beq.n	d52d0 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5298:	295c      	cmp	r1, #92	; 0x5c
   d529a:	d019      	beq.n	d52d0 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d529c:	290d      	cmp	r1, #13
   d529e:	d11d      	bne.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d52a0:	215c      	movs	r1, #92	; 0x5c
   d52a2:	4620      	mov	r0, r4
   d52a4:	f7ff ff52 	bl	d514c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d52a8:	2172      	movs	r1, #114	; 0x72
   d52aa:	e017      	b.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d52ac:	215c      	movs	r1, #92	; 0x5c
   d52ae:	4620      	mov	r0, r4
   d52b0:	f7ff ff4c 	bl	d514c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d52b4:	2166      	movs	r1, #102	; 0x66
   d52b6:	e011      	b.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d52b8:	215c      	movs	r1, #92	; 0x5c
   d52ba:	4620      	mov	r0, r4
   d52bc:	f7ff ff46 	bl	d514c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d52c0:	216e      	movs	r1, #110	; 0x6e
   d52c2:	e00b      	b.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d52c4:	215c      	movs	r1, #92	; 0x5c
   d52c6:	4620      	mov	r0, r4
   d52c8:	f7ff ff40 	bl	d514c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d52cc:	2174      	movs	r1, #116	; 0x74
   d52ce:	e005      	b.n	d52dc <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d52d0:	215c      	movs	r1, #92	; 0x5c
   d52d2:	4620      	mov	r0, r4
   d52d4:	f7ff ff3a 	bl	d514c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d52d8:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d52dc:	4620      	mov	r0, r4
   d52de:	f7ff ff35 	bl	d514c <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d52e2:	3501      	adds	r5, #1
   d52e4:	e788      	b.n	d51f8 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d52e6:	b12f      	cbz	r7, d52f4 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d52e8:	4620      	mov	r0, r4
   d52ea:	2122      	movs	r1, #34	; 0x22
	}

}
   d52ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d52f0:	f7ff bf2c 	b.w	d514c <_ZN10JsonWriter10insertCharEc>
   d52f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d52f8:	000d97ad 	.word	0x000d97ad

000d52fc <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d52fc:	6942      	ldr	r2, [r0, #20]
   d52fe:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d5302:	7e1a      	ldrb	r2, [r3, #24]
   d5304:	b112      	cbz	r2, d530c <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5306:	2200      	movs	r2, #0
   d5308:	761a      	strb	r2, [r3, #24]
   d530a:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d530c:	212c      	movs	r1, #44	; 0x2c
   d530e:	f7ff bf1d 	b.w	d514c <_ZN10JsonWriter10insertCharEc>

000d5312 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5314:	6943      	ldr	r3, [r0, #20]
   d5316:	3301      	adds	r3, #1
   d5318:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d531a:	460e      	mov	r6, r1
   d531c:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d531e:	d80e      	bhi.n	d533e <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d5320:	f7ff ffec 	bl	d52fc <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d5324:	6943      	ldr	r3, [r0, #20]
   d5326:	1c5a      	adds	r2, r3, #1
   d5328:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d532c:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d532e:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d5330:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d5332:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d5334:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d5336:	f7ff ff09 	bl	d514c <_ZN10JsonWriter10insertCharEc>
   d533a:	4620      	mov	r0, r4
   d533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d533e:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d5340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5344 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
   d5344:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5346:	4604      	mov	r4, r0
   d5348:	ee10 0a10 	vmov	r0, s0
	if (floatPlaces >= 0) {
   d534c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   d534e:	2d00      	cmp	r5, #0
   d5350:	db0a      	blt.n	d5368 <_ZN10JsonWriter11insertValueEf+0x24>
		insertsprintf("%.*f", floatPlaces, value);
   d5352:	f003 fa81 	bl	d8858 <__aeabi_f2d>
   d5356:	462a      	mov	r2, r5
   d5358:	e9cd 0100 	strd	r0, r1, [sp]
   d535c:	4908      	ldr	r1, [pc, #32]	; (d5380 <_ZN10JsonWriter11insertValueEf+0x3c>)
   d535e:	4620      	mov	r0, r4
   d5360:	f7ff ff33 	bl	d51ca <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
   d5364:	b003      	add	sp, #12
   d5366:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d5368:	f003 fa76 	bl	d8858 <__aeabi_f2d>
   d536c:	460b      	mov	r3, r1
   d536e:	4905      	ldr	r1, [pc, #20]	; (d5384 <_ZN10JsonWriter11insertValueEf+0x40>)
   d5370:	4602      	mov	r2, r0
   d5372:	4620      	mov	r0, r4
	}
}
   d5374:	b003      	add	sp, #12
   d5376:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
   d537a:	f7ff bf26 	b.w	d51ca <_ZN10JsonWriter13insertsprintfEPKcz>
   d537e:	bf00      	nop
   d5380:	000d97bf 	.word	0x000d97bf
   d5384:	000d97c4 	.word	0x000d97c4

000d5388 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5388:	f000 b966 	b.w	d5658 <HAL_Pin_Map>

000d538c <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d538c:	2200      	movs	r2, #0
   d538e:	6001      	str	r1, [r0, #0]
   d5390:	6102      	str	r2, [r0, #16]
   d5392:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d5394:	4770      	bx	lr

000d5396 <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d5396:	b510      	push	{r4, lr}
   d5398:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d539a:	8800      	ldrh	r0, [r0, #0]
   d539c:	f001 fdfb 	bl	d6f96 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d53a0:	f240 3312 	movw	r3, #786	; 0x312
   d53a4:	f1a0 020b 	sub.w	r2, r0, #11
   d53a8:	429a      	cmp	r2, r3
   d53aa:	d807      	bhi.n	d53bc <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d53ac:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d53ae:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d53b0:	60e0      	str	r0, [r4, #12]
   d53b2:	f000 f9d9 	bl	d5768 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d53b6:	61a0      	str	r0, [r4, #24]

        return true;
   d53b8:	2001      	movs	r0, #1
   d53ba:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d53bc:	2000      	movs	r0, #0
    }
}
   d53be:	bd10      	pop	{r4, pc}

000d53c0 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}

void AirQualitySensor::updateStandardVoltage(void) {
   d53c0:	b510      	push	{r4, lr}
   d53c2:	4604      	mov	r4, r0
   d53c4:	f000 f9d0 	bl	d5768 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d53c8:	69a3      	ldr	r3, [r4, #24]
   d53ca:	1ac0      	subs	r0, r0, r3
   d53cc:	4b07      	ldr	r3, [pc, #28]	; (d53ec <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d53ce:	4298      	cmp	r0, r3
   d53d0:	d90a      	bls.n	d53e8 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d53d2:	6923      	ldr	r3, [r4, #16]
   d53d4:	6962      	ldr	r2, [r4, #20]
   d53d6:	fb93 f3f2 	sdiv	r3, r3, r2
   d53da:	60e3      	str	r3, [r4, #12]
   d53dc:	f000 f9c4 	bl	d5768 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d53e0:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
   d53e2:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
   d53e4:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
   d53e6:	6163      	str	r3, [r4, #20]
   d53e8:	bd10      	pop	{r4, pc}
   d53ea:	bf00      	nop
   d53ec:	0007a120 	.word	0x0007a120

000d53f0 <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d53f0:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d53f2:	6883      	ldr	r3, [r0, #8]
   d53f4:	6043      	str	r3, [r0, #4]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d53f6:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d53f8:	8800      	ldrh	r0, [r0, #0]
   d53fa:	f001 fdcc 	bl	d6f96 <analogRead>

    _voltageSum += _currentVoltage;
   d53fe:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d5400:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
   d5402:	4418      	add	r0, r3
    _volSumCount += 1;
   d5404:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
   d5406:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d5408:	3301      	adds	r3, #1
   d540a:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
   d540c:	4620      	mov	r0, r4
   d540e:	f7ff ffd7 	bl	d53c0 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d5412:	68a2      	ldr	r2, [r4, #8]
   d5414:	6861      	ldr	r1, [r4, #4]
   d5416:	1a51      	subs	r1, r2, r1
   d5418:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d541c:	dc10      	bgt.n	d5440 <_ZN16AirQualitySensor5slopeEv+0x50>
   d541e:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d5422:	dc0d      	bgt.n	d5440 <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
   d5424:	68e3      	ldr	r3, [r4, #12]
   d5426:	1ad3      	subs	r3, r2, r3
   d5428:	2b96      	cmp	r3, #150	; 0x96
   d542a:	dc0b      	bgt.n	d5444 <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d542c:	29c8      	cmp	r1, #200	; 0xc8
   d542e:	dd02      	ble.n	d5436 <_ZN16AirQualitySensor5slopeEv+0x46>
   d5430:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d5434:	d108      	bne.n	d5448 <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
   d5436:	2b32      	cmp	r3, #50	; 0x32
   d5438:	bfcc      	ite	gt
   d543a:	2002      	movgt	r0, #2
   d543c:	2003      	movle	r0, #3
   d543e:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
   d5440:	2000      	movs	r0, #0
   d5442:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
   d5444:	2001      	movs	r0, #1
   d5446:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
   d5448:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
   d544a:	bd10      	pop	{r4, pc}

000d544c <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d544c:	f000 b904 	b.w	d5658 <HAL_Pin_Map>

000d5450 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5450:	6803      	ldr	r3, [r0, #0]
   d5452:	b2c9      	uxtb	r1, r1
   d5454:	689b      	ldr	r3, [r3, #8]
   d5456:	4718      	bx	r3

000d5458 <_ZN9SeeedOLED11sendCommandEh>:
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
}

void SeeedOLED::sendCommand(unsigned char command)
{
   d5458:	b510      	push	{r4, lr}
   d545a:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
   d545c:	f001 fdce 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d5460:	213c      	movs	r1, #60	; 0x3c
   d5462:	f001 fb78 	bl	d6b56 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
   d5466:	f001 fdc9 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d546a:	2180      	movs	r1, #128	; 0x80
   d546c:	f7ff fff0 	bl	d5450 <_ZN7TwoWire5writeEi>
  Wire.write(command);
   d5470:	f001 fdc4 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d5474:	6803      	ldr	r3, [r0, #0]
   d5476:	4621      	mov	r1, r4
   d5478:	689b      	ldr	r3, [r3, #8]
   d547a:	4798      	blx	r3
  Wire.endTransmission(); // End I2C communication
   d547c:	f001 fdbe 	bl	d6ffc <_Z19__fetch_global_Wirev>
}
   d5480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendCommand(unsigned char command)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C communication
  Wire.write(SeeedOLED_Command_Mode);        // Set OLED Command mode
  Wire.write(command);
  Wire.endTransmission(); // End I2C communication
   d5484:	f001 bb6e 	b.w	d6b64 <_ZN7TwoWire15endTransmissionEv>

000d5488 <_ZN9SeeedOLED4initEv>:
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d5488:	b510      	push	{r4, lr}
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d548a:	21ae      	movs	r1, #174	; 0xae
        {0x00, 0x41, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x00},
        {0x00, 0x02, 0x05, 0x05, 0x02, 0x00, 0x00, 0x00}};

void SeeedOLED::init(void)
{
   d548c:	4604      	mov	r4, r0
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d548e:	f7ff ffe3 	bl	d5458 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d5492:	2005      	movs	r0, #5
   d5494:	f000 fdda 	bl	d604c <delay>
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d5498:	21af      	movs	r1, #175	; 0xaf
   d549a:	4620      	mov	r0, r4
   d549c:	f7ff ffdc 	bl	d5458 <_ZN9SeeedOLED11sendCommandEh>
  delay(5);
   d54a0:	2005      	movs	r0, #5
   d54a2:	f000 fdd3 	bl	d604c <delay>
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d54a6:	4620      	mov	r0, r4
   d54a8:	21a6      	movs	r1, #166	; 0xa6
}
   d54aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  delay(5);
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  delay(5);
  sendCommand(SeeedOLED_Normal_Display_Cmd); //Set Normal Display (default)
   d54ae:	f7ff bfd3 	b.w	d5458 <_ZN9SeeedOLED11sendCommandEh>

000d54b2 <_ZN9SeeedOLED11setPageModeEv>:
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d54b2:	b510      	push	{r4, lr}
  addressingMode = PAGE_MODE;
   d54b4:	2301      	movs	r3, #1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x00); //set horizontal addressing mode
}

void SeeedOLED::setPageMode()
{
   d54b6:	4604      	mov	r4, r0
  addressingMode = PAGE_MODE;
   d54b8:	7003      	strb	r3, [r0, #0]
  sendCommand(0x20); //set addressing mode
   d54ba:	2120      	movs	r1, #32
   d54bc:	f7ff ffcc 	bl	d5458 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x02); //set page addressing mode
   d54c0:	4620      	mov	r0, r4
   d54c2:	2102      	movs	r1, #2
}
   d54c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void SeeedOLED::setPageMode()
{
  addressingMode = PAGE_MODE;
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
   d54c8:	f7ff bfc6 	b.w	d5458 <_ZN9SeeedOLED11sendCommandEh>

000d54cc <_ZN9SeeedOLED9setTextXYEhh>:
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d54cc:	b538      	push	{r3, r4, r5, lr}
  sendCommand(0xB0 + Row);                        //set page address
   d54ce:	3950      	subs	r1, #80	; 0x50
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d54d0:	4614      	mov	r4, r2
  sendCommand(0xB0 + Row);                        //set page address
   d54d2:	b2c9      	uxtb	r1, r1
  sendCommand(0x20); //set addressing mode
  sendCommand(0x02); //set page addressing mode
}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
   d54d4:	4605      	mov	r5, r0
  sendCommand(0xB0 + Row);                        //set page address
   d54d6:	f7ff ffbf 	bl	d5458 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
   d54da:	00e1      	lsls	r1, r4, #3
   d54dc:	4628      	mov	r0, r5
   d54de:	f001 0108 	and.w	r1, r1, #8
   d54e2:	f7ff ffb9 	bl	d5458 <_ZN9SeeedOLED11sendCommandEh>
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d54e6:	f3c4 0143 	ubfx	r1, r4, #1, #4
   d54ea:	4628      	mov	r0, r5
   d54ec:	3110      	adds	r1, #16
}
   d54ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SeeedOLED::setTextXY(unsigned char Row, unsigned char Column)
{
  sendCommand(0xB0 + Row);                        //set page address
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
   d54f2:	f7ff bfb1 	b.w	d5458 <_ZN9SeeedOLED11sendCommandEh>

000d54f6 <_ZN9SeeedOLED8sendDataEh>:
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
}

void SeeedOLED::sendData(unsigned char Data)
{
   d54f6:	b510      	push	{r4, lr}
   d54f8:	460c      	mov	r4, r1
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
   d54fa:	f001 fd7f 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d54fe:	213c      	movs	r1, #60	; 0x3c
   d5500:	f001 fb29 	bl	d6b56 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(SeeedOLED_Data_Mode);           // data mode
   d5504:	f001 fd7a 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d5508:	2140      	movs	r1, #64	; 0x40
   d550a:	f7ff ffa1 	bl	d5450 <_ZN7TwoWire5writeEi>
  Wire.write(Data);
   d550e:	f001 fd75 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d5512:	6803      	ldr	r3, [r0, #0]
   d5514:	4621      	mov	r1, r4
   d5516:	689b      	ldr	r3, [r3, #8]
   d5518:	4798      	blx	r3
  Wire.endTransmission(); // stop I2C transmission
   d551a:	f001 fd6f 	bl	d6ffc <_Z19__fetch_global_Wirev>
}
   d551e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void SeeedOLED::sendData(unsigned char Data)
{
  Wire.beginTransmission(SeeedOLED_Address); // begin I2C transmission
  Wire.write(SeeedOLED_Data_Mode);           // data mode
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
   d5522:	f001 bb1f 	b.w	d6b64 <_ZN7TwoWire15endTransmissionEv>
	...

000d5528 <_ZN9SeeedOLED7putCharEh>:
}

void SeeedOLED::putChar(unsigned char C)
{
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
   d5528:	f1a1 0320 	sub.w	r3, r1, #32
  {
    C = ' '; //Space
   d552c:	2b5f      	cmp	r3, #95	; 0x5f
   d552e:	4b0b      	ldr	r3, [pc, #44]	; (d555c <_ZN9SeeedOLED7putCharEh+0x34>)
   d5530:	bf88      	it	hi
   d5532:	2120      	movhi	r1, #32
  Wire.write(Data);
  Wire.endTransmission(); // stop I2C transmission
}

void SeeedOLED::putChar(unsigned char C)
{
   d5534:	b570      	push	{r4, r5, r6, lr}
   d5536:	f46f 7280 	mvn.w	r2, #256	; 0x100
   d553a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   d553e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d5542:	4606      	mov	r6, r0
   d5544:	4415      	add	r5, r2
   d5546:	f1a3 04f9 	sub.w	r4, r3, #249	; 0xf9
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
   d554a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d554e:	4630      	mov	r0, r6
   d5550:	f7ff ffd1 	bl	d54f6 <_ZN9SeeedOLED8sendDataEh>
  if (C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
  {
    C = ' '; //Space
  }
  unsigned char i = 0;
  for (i = 0; i < 8; i++)
   d5554:	42a5      	cmp	r5, r4
   d5556:	d1f8      	bne.n	d554a <_ZN9SeeedOLED7putCharEh+0x22>
  {
    //read bytes from code memory
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}
   d5558:	bd70      	pop	{r4, r5, r6, pc}
   d555a:	bf00      	nop
   d555c:	000d97e4 	.word	0x000d97e4

000d5560 <_ZN9SeeedOLED12clearDisplayEv>:
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d5560:	b570      	push	{r4, r5, r6, lr}
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d5562:	21ae      	movs	r1, #174	; 0xae
  sendCommand(0x00 + (8 * Column & 0x0F));        //set column lower address
  sendCommand(0x10 + ((8 * Column >> 4) & 0x0F)); //set column higher address
}

void SeeedOLED::clearDisplay()
{
   d5564:	4605      	mov	r5, r0
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
   d5566:	f7ff ff77 	bl	d5458 <_ZN9SeeedOLED11sendCommandEh>
   d556a:	2600      	movs	r6, #0
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
   d556c:	2200      	movs	r2, #0
   d556e:	b2f1      	uxtb	r1, r6
   d5570:	4628      	mov	r0, r5
   d5572:	f7ff ffab 	bl	d54cc <_ZN9SeeedOLED9setTextXYEhh>
   d5576:	2410      	movs	r4, #16
    {
      for (i = 0; i < 16; i++) //clear all columns
      {
        putChar(' ');
   d5578:	2120      	movs	r1, #32
   d557a:	4628      	mov	r0, r5
   d557c:	3c01      	subs	r4, #1
   d557e:	f7ff ffd3 	bl	d5528 <_ZN9SeeedOLED7putCharEh>
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
  {
    setTextXY(j, 0);
    {
      for (i = 0; i < 16; i++) //clear all columns
   d5582:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d5586:	d1f7      	bne.n	d5578 <_ZN9SeeedOLED12clearDisplayEv+0x18>
   d5588:	3601      	adds	r6, #1

void SeeedOLED::clearDisplay()
{
  unsigned char i, j;
  sendCommand(SeeedOLED_Display_Off_Cmd); //display off
  for (j = 0; j < 8; j++)
   d558a:	2e08      	cmp	r6, #8
   d558c:	d1ee      	bne.n	d556c <_ZN9SeeedOLED12clearDisplayEv+0xc>
      {
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
   d558e:	4628      	mov	r0, r5
   d5590:	21af      	movs	r1, #175	; 0xaf
   d5592:	f7ff ff61 	bl	d5458 <_ZN9SeeedOLED11sendCommandEh>
  setTextXY(0, 0);
   d5596:	4622      	mov	r2, r4
   d5598:	4621      	mov	r1, r4
   d559a:	4628      	mov	r0, r5
}
   d559c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        putChar(' ');
      }
    }
  }
  sendCommand(SeeedOLED_Display_On_Cmd); //display on
  setTextXY(0, 0);
   d55a0:	f7ff bf94 	b.w	d54cc <_ZN9SeeedOLED9setTextXYEhh>

000d55a4 <_ZN9SeeedOLED9putStringEPKc>:
    sendData(pgm_read_byte(&BasicFont[C - 32][i])); //font array starts at 0, ASCII starts at 32. Hence the translation
  }
}

void SeeedOLED::putString(const char *String)
{
   d55a4:	b570      	push	{r4, r5, r6, lr}
   d55a6:	4605      	mov	r5, r0
   d55a8:	460e      	mov	r6, r1
   d55aa:	2400      	movs	r4, #0
  unsigned char i = 0;
  while (String[i])
   d55ac:	b2e3      	uxtb	r3, r4
   d55ae:	3401      	adds	r4, #1
   d55b0:	5cf1      	ldrb	r1, [r6, r3]
   d55b2:	b119      	cbz	r1, d55bc <_ZN9SeeedOLED9putStringEPKc+0x18>
  {
    putChar(String[i]);
   d55b4:	4628      	mov	r0, r5
   d55b6:	f7ff ffb7 	bl	d5528 <_ZN9SeeedOLED7putCharEh>
}

void SeeedOLED::putString(const char *String)
{
  unsigned char i = 0;
  while (String[i])
   d55ba:	e7f7      	b.n	d55ac <_ZN9SeeedOLED9putStringEPKc+0x8>
   d55bc:	bd70      	pop	{r4, r5, r6, pc}

000d55be <_ZN9SeeedOLED9putNumberEl>:
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d55be:	b5f0      	push	{r4, r5, r6, r7, lr}
   d55c0:	b085      	sub	sp, #20
  unsigned char char_buffer[10] = "";
   d55c2:	2300      	movs	r3, #0
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d55c4:	1e0e      	subs	r6, r1, #0
    i++;
  }
}

unsigned char SeeedOLED::putNumber(long long_num)
{
   d55c6:	4607      	mov	r7, r0
  unsigned char char_buffer[10] = "";
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	9302      	str	r3, [sp, #8]
   d55cc:	f8ad 300c 	strh.w	r3, [sp, #12]
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
   d55d0:	da07      	bge.n	d55e2 <_ZN9SeeedOLED9putNumberEl+0x24>
  {
    f = 1;
    putChar('-');
   d55d2:	212d      	movs	r1, #45	; 0x2d
   d55d4:	f7ff ffa8 	bl	d5528 <_ZN9SeeedOLED7putCharEh>
    long_num = -long_num;
   d55d8:	4276      	negs	r6, r6
  unsigned char i = 0;
  unsigned char f = 0;

  if (long_num < 0)
  {
    f = 1;
   d55da:	2301      	movs	r3, #1

unsigned char SeeedOLED::putNumber(long long_num)
{
  unsigned char char_buffer[10] = "";
  unsigned char i = 0;
  unsigned char f = 0;
   d55dc:	2400      	movs	r4, #0
    return f;
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d55de:	210a      	movs	r1, #10
   d55e0:	e005      	b.n	d55ee <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    f = 1;
    putChar('-');
    long_num = -long_num;
  }
  else if (long_num == 0)
   d55e2:	d1fb      	bne.n	d55dc <_ZN9SeeedOLED9putNumberEl+0x1e>
  {
    f = 1;
    putChar('0');
   d55e4:	2130      	movs	r1, #48	; 0x30
   d55e6:	f7ff ff9f 	bl	d5528 <_ZN9SeeedOLED7putCharEh>
    return f;
   d55ea:	2001      	movs	r0, #1
   d55ec:	e01d      	b.n	d562a <_ZN9SeeedOLED9putNumberEl+0x6c>
  }

  while (long_num > 0)
  {
    char_buffer[i++] = long_num % 10;
   d55ee:	aa04      	add	r2, sp, #16
   d55f0:	1c65      	adds	r5, r4, #1
   d55f2:	4414      	add	r4, r2
   d55f4:	b2ed      	uxtb	r5, r5
   d55f6:	fb96 f2f1 	sdiv	r2, r6, r1
   d55fa:	fb01 6612 	mls	r6, r1, r2, r6
   d55fe:	f804 6c0c 	strb.w	r6, [r4, #-12]
   d5602:	462c      	mov	r4, r5
    f = 1;
    putChar('0');
    return f;
  }

  while (long_num > 0)
   d5604:	4616      	mov	r6, r2
   d5606:	2a00      	cmp	r2, #0
   d5608:	d1f1      	bne.n	d55ee <_ZN9SeeedOLED9putNumberEl+0x30>
  {
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
   d560a:	442b      	add	r3, r5
   d560c:	b2dc      	uxtb	r4, r3
  for (; i > 0; i--)
   d560e:	b15d      	cbz	r5, d5628 <_ZN9SeeedOLED9putNumberEl+0x6a>
  {
    putChar('0' + char_buffer[i - 1]);
   d5610:	ab04      	add	r3, sp, #16
   d5612:	442b      	add	r3, r5
   d5614:	4638      	mov	r0, r7
   d5616:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
   d561a:	3130      	adds	r1, #48	; 0x30
   d561c:	b2c9      	uxtb	r1, r1
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d561e:	3d01      	subs	r5, #1
  {
    putChar('0' + char_buffer[i - 1]);
   d5620:	f7ff ff82 	bl	d5528 <_ZN9SeeedOLED7putCharEh>
    char_buffer[i++] = long_num % 10;
    long_num /= 10;
  }

  f = f + i;
  for (; i > 0; i--)
   d5624:	b2ed      	uxtb	r5, r5
   d5626:	e7f2      	b.n	d560e <_ZN9SeeedOLED9putNumberEl+0x50>
  {
    putChar('0' + char_buffer[i - 1]);
  }
  return f;
   d5628:	4620      	mov	r0, r4
}
   d562a:	b005      	add	sp, #20
   d562c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d562e <_ZN9SeeedOLED16setNormalDisplayEv>:
  sendCommand(SeeedOLED_Dectivate_Scroll_Cmd);
}

void SeeedOLED::setNormalDisplay()
{
  sendCommand(SeeedOLED_Normal_Display_Cmd);
   d562e:	21a6      	movs	r1, #166	; 0xa6
   d5630:	f7ff bf12 	b.w	d5458 <_ZN9SeeedOLED11sendCommandEh>

000d5634 <_GLOBAL__sub_I__ZN9SeeedOLED4initEv>:
   d5634:	f000 b810 	b.w	d5658 <HAL_Pin_Map>

000d5638 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <netdb_freeaddrinfo+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	689b      	ldr	r3, [r3, #8]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030268 	.word	0x00030268

000d5648 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <netdb_getaddrinfo+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	68db      	ldr	r3, [r3, #12]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	00030268 	.word	0x00030268

000d5658 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <HAL_Pin_Map+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	681b      	ldr	r3, [r3, #0]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	0003022c 	.word	0x0003022c

000d5668 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <HAL_Validate_Pin_Function+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	685b      	ldr	r3, [r3, #4]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	0003022c 	.word	0x0003022c

000d5678 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <HAL_Pin_Mode+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	689b      	ldr	r3, [r3, #8]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	0003022c 	.word	0x0003022c

000d5688 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <HAL_Get_Pin_Mode+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	68db      	ldr	r3, [r3, #12]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	0003022c 	.word	0x0003022c

000d5698 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <HAL_GPIO_Write+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	691b      	ldr	r3, [r3, #16]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	0003022c 	.word	0x0003022c

000d56a8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <HAL_GPIO_Read+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	695b      	ldr	r3, [r3, #20]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	0003022c 	.word	0x0003022c

000d56b8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <HAL_ADC_Read+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	0003022c 	.word	0x0003022c

000d56c8 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <HAL_Pulse_In+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	0003022c 	.word	0x0003022c

000d56d8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <HAL_SPI_Begin+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	681b      	ldr	r3, [r3, #0]
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030230 	.word	0x00030230

000d56e8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <HAL_SPI_Send_Receive_Data+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	695b      	ldr	r3, [r3, #20]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030230 	.word	0x00030230

000d56f8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <HAL_SPI_Init+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	69db      	ldr	r3, [r3, #28]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030230 	.word	0x00030230

000d5708 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <HAL_SPI_Is_Enabled+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	6a1b      	ldr	r3, [r3, #32]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030230 	.word	0x00030230

000d5718 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <HAL_SPI_Info+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030230 	.word	0x00030230

000d5728 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <HAL_SPI_Set_Settings+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	00030230 	.word	0x00030230

000d5738 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <HAL_SPI_Acquire+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	00030230 	.word	0x00030230

000d5748 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <HAL_SPI_Release+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030230 	.word	0x00030230

000d5758 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <HAL_RNG_GetRandomNumber+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	685b      	ldr	r3, [r3, #4]
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030218 	.word	0x00030218

000d5768 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	695b      	ldr	r3, [r3, #20]
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030218 	.word	0x00030218

000d5778 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <os_thread_is_current+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	689b      	ldr	r3, [r3, #8]
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030248 	.word	0x00030248

000d5788 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <os_thread_join+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	691b      	ldr	r3, [r3, #16]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030248 	.word	0x00030248

000d5798 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <os_thread_cleanup+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	695b      	ldr	r3, [r3, #20]
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030248 	.word	0x00030248

000d57a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <os_mutex_recursive_create+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030248 	.word	0x00030248

000d57b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <os_mutex_recursive_destroy+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030248 	.word	0x00030248

000d57c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <inet_inet_ntop+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	695b      	ldr	r3, [r3, #20]
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030264 	.word	0x00030264

000d57d8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <HAL_USART_Init+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	681b      	ldr	r3, [r3, #0]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	0003023c 	.word	0x0003023c

000d57e8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <HAL_USART_Write_Data+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	68db      	ldr	r3, [r3, #12]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	0003023c 	.word	0x0003023c

000d57f8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <HAL_USART_Available_Data+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	691b      	ldr	r3, [r3, #16]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	0003023c 	.word	0x0003023c

000d5808 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <HAL_USART_Read_Data+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	695b      	ldr	r3, [r3, #20]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	0003023c 	.word	0x0003023c

000d5818 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <HAL_USART_Peek_Data+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	699b      	ldr	r3, [r3, #24]
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	0003023c 	.word	0x0003023c

000d5828 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <HAL_USART_Flush_Data+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	69db      	ldr	r3, [r3, #28]
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	0003023c 	.word	0x0003023c

000d5838 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <HAL_USART_Is_Enabled+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	6a1b      	ldr	r3, [r3, #32]
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	0003023c 	.word	0x0003023c

000d5848 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <HAL_USART_Available_Data_For_Write+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	0003023c 	.word	0x0003023c

000d5858 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <HAL_I2C_Begin+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	68db      	ldr	r3, [r3, #12]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	00030228 	.word	0x00030228

000d5868 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <HAL_I2C_Begin_Transmission+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	699b      	ldr	r3, [r3, #24]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	00030228 	.word	0x00030228

000d5878 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <HAL_I2C_End_Transmission+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	69db      	ldr	r3, [r3, #28]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	00030228 	.word	0x00030228

000d5888 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <HAL_I2C_Write_Data+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	6a1b      	ldr	r3, [r3, #32]
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	00030228 	.word	0x00030228

000d5898 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <HAL_I2C_Available_Data+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	00030228 	.word	0x00030228

000d58a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <HAL_I2C_Read_Data+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	00030228 	.word	0x00030228

000d58b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <HAL_I2C_Peek_Data+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	00030228 	.word	0x00030228

000d58c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <HAL_I2C_Flush_Data+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	00030228 	.word	0x00030228

000d58d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <HAL_I2C_Is_Enabled+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	00030228 	.word	0x00030228

000d58e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <HAL_I2C_Init+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	00030228 	.word	0x00030228

000d58f8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <HAL_I2C_Request_Data_Ex+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	00030228 	.word	0x00030228

000d5908 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <HAL_USB_USART_Init+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	681b      	ldr	r3, [r3, #0]
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	0003024c 	.word	0x0003024c

000d5918 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <HAL_USB_USART_Begin+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	685b      	ldr	r3, [r3, #4]
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	0003024c 	.word	0x0003024c

000d5928 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <HAL_USB_USART_Available_Data+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	691b      	ldr	r3, [r3, #16]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	0003024c 	.word	0x0003024c

000d5938 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	695b      	ldr	r3, [r3, #20]
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	0003024c 	.word	0x0003024c

000d5948 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <HAL_USB_USART_Receive_Data+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	699b      	ldr	r3, [r3, #24]
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	0003024c 	.word	0x0003024c

000d5958 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <HAL_USB_USART_Send_Data+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	69db      	ldr	r3, [r3, #28]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	0003024c 	.word	0x0003024c

000d5968 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <HAL_USB_USART_Flush_Data+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	6a1b      	ldr	r3, [r3, #32]
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	0003024c 	.word	0x0003024c

000d5978 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <set_system_mode+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	685b      	ldr	r3, [r3, #4]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030220 	.word	0x00030220

000d5988 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <system_delay_ms+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	695b      	ldr	r3, [r3, #20]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030220 	.word	0x00030220

000d5998 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <system_thread_set_state+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030220 	.word	0x00030220

000d59a8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <application_thread_current+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	00030220 	.word	0x00030220

000d59b8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <application_thread_invoke+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	00030220 	.word	0x00030220

000d59c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b03      	ldr	r3, [pc, #12]	; (d59d8 <system_ctrl_set_app_request_handler+0x10>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d59d2:	9301      	str	r3, [sp, #4]
   d59d4:	bd08      	pop	{r3, pc}
   d59d6:	0000      	.short	0x0000
   d59d8:	00030220 	.word	0x00030220

000d59dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b03      	ldr	r3, [pc, #12]	; (d59ec <system_ctrl_set_result+0x10>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d59e6:	9301      	str	r3, [sp, #4]
   d59e8:	bd08      	pop	{r3, pc}
   d59ea:	0000      	.short	0x0000
   d59ec:	00030220 	.word	0x00030220

000d59f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <network_connect+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	685b      	ldr	r3, [r3, #4]
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030240 	.word	0x00030240

000d5a00 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <network_connecting+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	689b      	ldr	r3, [r3, #8]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	00030240 	.word	0x00030240

000d5a10 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <network_disconnect+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	68db      	ldr	r3, [r3, #12]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	00030240 	.word	0x00030240

000d5a20 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <network_ready+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	691b      	ldr	r3, [r3, #16]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	00030240 	.word	0x00030240

000d5a30 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <network_on+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	695b      	ldr	r3, [r3, #20]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	00030240 	.word	0x00030240

000d5a40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <network_off+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	699b      	ldr	r3, [r3, #24]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	00030240 	.word	0x00030240

000d5a50 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <network_listen+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	69db      	ldr	r3, [r3, #28]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	00030240 	.word	0x00030240

000d5a60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <network_listening+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6a1b      	ldr	r3, [r3, #32]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	00030240 	.word	0x00030240

000d5a70 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <network_set_listen_timeout+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030240 	.word	0x00030240

000d5a80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <network_get_listen_timeout+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030240 	.word	0x00030240

000d5a90 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <spark_cloud_flag_connected+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	695b      	ldr	r3, [r3, #20]
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030244 	.word	0x00030244

000d5aa0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <spark_send_event+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	6a1b      	ldr	r3, [r3, #32]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030244 	.word	0x00030244

000d5ab0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <spark_set_random_seed_from_cloud_handler+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030244 	.word	0x00030244

000d5ac0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <malloc+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	681b      	ldr	r3, [r3, #0]
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	0003021c 	.word	0x0003021c

000d5ad0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b02      	ldr	r3, [pc, #8]	; (d5adc <free+0xc>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	685b      	ldr	r3, [r3, #4]
   d5ad8:	9301      	str	r3, [sp, #4]
   d5ada:	bd08      	pop	{r3, pc}
   d5adc:	0003021c 	.word	0x0003021c

000d5ae0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5ae0:	b508      	push	{r3, lr}
   d5ae2:	4b02      	ldr	r3, [pc, #8]	; (d5aec <realloc+0xc>)
   d5ae4:	681b      	ldr	r3, [r3, #0]
   d5ae6:	689b      	ldr	r3, [r3, #8]
   d5ae8:	9301      	str	r3, [sp, #4]
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	0003021c 	.word	0x0003021c

000d5af0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5af0:	b508      	push	{r3, lr}
   d5af2:	4b02      	ldr	r3, [pc, #8]	; (d5afc <vsnprintf+0xc>)
   d5af4:	681b      	ldr	r3, [r3, #0]
   d5af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	bd08      	pop	{r3, pc}
   d5afc:	0003021c 	.word	0x0003021c

000d5b00 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5b00:	b508      	push	{r3, lr}
   d5b02:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <abort+0xc>)
   d5b04:	681b      	ldr	r3, [r3, #0]
   d5b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b08:	9301      	str	r3, [sp, #4]
   d5b0a:	bd08      	pop	{r3, pc}
   d5b0c:	0003021c 	.word	0x0003021c

000d5b10 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b02      	ldr	r3, [pc, #8]	; (d5b1c <_malloc_r+0xc>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b18:	9301      	str	r3, [sp, #4]
   d5b1a:	bd08      	pop	{r3, pc}
   d5b1c:	0003021c 	.word	0x0003021c

000d5b20 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5b20:	b508      	push	{r3, lr}
   d5b22:	4b02      	ldr	r3, [pc, #8]	; (d5b2c <__errno+0xc>)
   d5b24:	681b      	ldr	r3, [r3, #0]
   d5b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b28:	9301      	str	r3, [sp, #4]
   d5b2a:	bd08      	pop	{r3, pc}
   d5b2c:	0003021c 	.word	0x0003021c

000d5b30 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b30:	2200      	movs	r2, #0
   d5b32:	4611      	mov	r1, r2
   d5b34:	6840      	ldr	r0, [r0, #4]
   d5b36:	f7ff bf93 	b.w	d5a60 <network_listening>

000d5b3a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b3a:	2200      	movs	r2, #0
   d5b3c:	4611      	mov	r1, r2
   d5b3e:	6840      	ldr	r0, [r0, #4]
   d5b40:	f7ff bf9e 	b.w	d5a80 <network_get_listen_timeout>

000d5b44 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b44:	2200      	movs	r2, #0
   d5b46:	6840      	ldr	r0, [r0, #4]
   d5b48:	f7ff bf92 	b.w	d5a70 <network_set_listen_timeout>

000d5b4c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b4c:	2200      	movs	r2, #0
   d5b4e:	f081 0101 	eor.w	r1, r1, #1
   d5b52:	6840      	ldr	r0, [r0, #4]
   d5b54:	f7ff bf7c 	b.w	d5a50 <network_listen>

000d5b58 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b58:	2300      	movs	r3, #0
   d5b5a:	461a      	mov	r2, r3
   d5b5c:	4619      	mov	r1, r3
   d5b5e:	6840      	ldr	r0, [r0, #4]
   d5b60:	f7ff bf6e 	b.w	d5a40 <network_off>

000d5b64 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b64:	2300      	movs	r3, #0
   d5b66:	461a      	mov	r2, r3
   d5b68:	4619      	mov	r1, r3
   d5b6a:	6840      	ldr	r0, [r0, #4]
   d5b6c:	f7ff bf60 	b.w	d5a30 <network_on>

000d5b70 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b70:	2200      	movs	r2, #0
   d5b72:	4611      	mov	r1, r2
   d5b74:	6840      	ldr	r0, [r0, #4]
   d5b76:	f7ff bf53 	b.w	d5a20 <network_ready>

000d5b7a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b7a:	2200      	movs	r2, #0
   d5b7c:	4611      	mov	r1, r2
   d5b7e:	6840      	ldr	r0, [r0, #4]
   d5b80:	f7ff bf3e 	b.w	d5a00 <network_connecting>

000d5b84 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b84:	2200      	movs	r2, #0
   d5b86:	2102      	movs	r1, #2
   d5b88:	6840      	ldr	r0, [r0, #4]
   d5b8a:	f7ff bf41 	b.w	d5a10 <network_disconnect>

000d5b8e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b8e:	2300      	movs	r3, #0
   d5b90:	461a      	mov	r2, r3
   d5b92:	6840      	ldr	r0, [r0, #4]
   d5b94:	f7ff bf2c 	b.w	d59f0 <network_connect>

000d5b98 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b98:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b9a:	2203      	movs	r2, #3
   d5b9c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b9e:	4a02      	ldr	r2, [pc, #8]	; (d5ba8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ba0:	601a      	str	r2, [r3, #0]
   d5ba2:	4770      	bx	lr
   d5ba4:	2003e3dc 	.word	0x2003e3dc
   d5ba8:	000d9aec 	.word	0x000d9aec

000d5bac <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5bac:	2100      	movs	r1, #0
   d5bae:	f7ff bdc3 	b.w	d5738 <HAL_SPI_Acquire>

000d5bb2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5bb2:	2100      	movs	r1, #0
   d5bb4:	f7ff bdc8 	b.w	d5748 <HAL_SPI_Release>

000d5bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5bb8:	b510      	push	{r4, lr}
   d5bba:	4604      	mov	r4, r0
{
    _spi = spi;
   d5bbc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5bbe:	4608      	mov	r0, r1
   d5bc0:	f7ff fd9a 	bl	d56f8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5bc4:	2300      	movs	r3, #0
   d5bc6:	6063      	str	r3, [r4, #4]
}
   d5bc8:	4620      	mov	r0, r4
   d5bca:	bd10      	pop	{r4, pc}

000d5bcc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5bcc:	b510      	push	{r4, lr}
   d5bce:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5bd0:	7800      	ldrb	r0, [r0, #0]
   d5bd2:	f7ff ffeb 	bl	d5bac <_ZN8SPIClass4lockEv.isra.0>
   d5bd6:	b948      	cbnz	r0, d5bec <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5bd8:	7820      	ldrb	r0, [r4, #0]
   d5bda:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5bde:	f7ff fd7b 	bl	d56d8 <HAL_SPI_Begin>
        unlock();
   d5be2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5be8:	f7ff bfe3 	b.w	d5bb2 <_ZN8SPIClass6unlockEv.isra.1>
   d5bec:	bd10      	pop	{r4, pc}

000d5bee <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5bee:	7800      	ldrb	r0, [r0, #0]
   d5bf0:	f7ff bfdf 	b.w	d5bb2 <_ZN8SPIClass6unlockEv.isra.1>

000d5bf4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5bf4:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5bf6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5bf8:	6018      	str	r0, [r3, #0]
   d5bfa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5bfc:	6818      	ldr	r0, [r3, #0]
   d5bfe:	4288      	cmp	r0, r1
   d5c00:	b2e5      	uxtb	r5, r4
   d5c02:	d906      	bls.n	d5c12 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5c04:	3401      	adds	r4, #1
   d5c06:	2c08      	cmp	r4, #8
   d5c08:	d002      	beq.n	d5c10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5c0a:	0840      	lsrs	r0, r0, #1
   d5c0c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5c0e:	e7f5      	b.n	d5bfc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5c10:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5c12:	4b02      	ldr	r3, [pc, #8]	; (d5c1c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5c14:	5d5b      	ldrb	r3, [r3, r5]
   d5c16:	7013      	strb	r3, [r2, #0]
   d5c18:	bd30      	pop	{r4, r5, pc}
   d5c1a:	bf00      	nop
   d5c1c:	000d9b18 	.word	0x000d9b18

000d5c20 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c24:	4607      	mov	r7, r0
   d5c26:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d5c28:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d5c2a:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d5c2c:	f7ff ffbe 	bl	d5bac <_ZN8SPIClass4lockEv.isra.0>
   d5c30:	2800      	cmp	r0, #0
   d5c32:	db62      	blt.n	d5cfa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d5c34:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5c36:	2214      	movs	r2, #20
   d5c38:	2100      	movs	r1, #0
   d5c3a:	a809      	add	r0, sp, #36	; 0x24
   d5c3c:	f003 fc4b 	bl	d94d6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5c40:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5c42:	4620      	mov	r0, r4
   d5c44:	2200      	movs	r2, #0
   d5c46:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5c48:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d5c4c:	f7ff fd64 	bl	d5718 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d5c50:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d5c54:	b154      	cbz	r4, d5c6c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d5c56:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5c5a:	b935      	cbnz	r5, d5c6a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d5c5c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5c60:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5c64:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d5c68:	e003      	b.n	d5c72 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d5c6a:	2400      	movs	r4, #0
   d5c6c:	46a1      	mov	r9, r4
   d5c6e:	46a0      	mov	r8, r4
   d5c70:	2501      	movs	r5, #1
   d5c72:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5c74:	b105      	cbz	r5, d5c78 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d5c76:	b9bb      	cbnz	r3, d5ca8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d5c78:	429d      	cmp	r5, r3
   d5c7a:	d10b      	bne.n	d5c94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d5c7c:	68b2      	ldr	r2, [r6, #8]
   d5c7e:	4542      	cmp	r2, r8
   d5c80:	d108      	bne.n	d5c94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5c82:	f88d 9020 	strb.w	r9, [sp, #32]
   d5c86:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5c8a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d5c8e:	89b2      	ldrh	r2, [r6, #12]
   d5c90:	4291      	cmp	r1, r2
   d5c92:	d009      	beq.n	d5ca8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d5c94:	b153      	cbz	r3, d5cac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5c96:	2400      	movs	r4, #0
   d5c98:	7838      	ldrb	r0, [r7, #0]
   d5c9a:	9401      	str	r4, [sp, #4]
   d5c9c:	9400      	str	r4, [sp, #0]
   d5c9e:	4623      	mov	r3, r4
   d5ca0:	4622      	mov	r2, r4
   d5ca2:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5ca4:	f7ff fd40 	bl	d5728 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d5ca8:	2000      	movs	r0, #0
   d5caa:	e026      	b.n	d5cfa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d5cac:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d5cb0:	68b1      	ldr	r1, [r6, #8]
   d5cb2:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5cb4:	ab04      	add	r3, sp, #16
   d5cb6:	f10d 020f 	add.w	r2, sp, #15
   d5cba:	f7ff ff9b 	bl	d5bf4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d5cbe:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d5cc0:	b105      	cbz	r5, d5cc4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d5cc2:	b9b1      	cbnz	r1, d5cf2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d5cc4:	42a9      	cmp	r1, r5
   d5cc6:	d008      	beq.n	d5cda <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d5cc8:	2400      	movs	r4, #0
   d5cca:	7838      	ldrb	r0, [r7, #0]
   d5ccc:	9401      	str	r4, [sp, #4]
   d5cce:	7b74      	ldrb	r4, [r6, #13]
   d5cd0:	7b33      	ldrb	r3, [r6, #12]
   d5cd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5cd6:	9400      	str	r4, [sp, #0]
   d5cd8:	e7e4      	b.n	d5ca4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d5cda:	68b3      	ldr	r3, [r6, #8]
   d5cdc:	4543      	cmp	r3, r8
   d5cde:	d3f3      	bcc.n	d5cc8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d5ce0:	f88d 9020 	strb.w	r9, [sp, #32]
   d5ce4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d5ce8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5cec:	89b3      	ldrh	r3, [r6, #12]
   d5cee:	429a      	cmp	r2, r3
   d5cf0:	d1ea      	bne.n	d5cc8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5cf2:	9b04      	ldr	r3, [sp, #16]
   d5cf4:	4543      	cmp	r3, r8
   d5cf6:	d1e7      	bne.n	d5cc8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d5cf8:	e7d6      	b.n	d5ca8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d5cfa:	b00f      	add	sp, #60	; 0x3c
   d5cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d00 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5d00:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d5d02:	7800      	ldrb	r0, [r0, #0]
   d5d04:	f7ff fcf0 	bl	d56e8 <HAL_SPI_Send_Receive_Data>
}
   d5d08:	b2c0      	uxtb	r0, r0
   d5d0a:	bd08      	pop	{r3, pc}

000d5d0c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5d0c:	7800      	ldrb	r0, [r0, #0]
   d5d0e:	f7ff bcfb 	b.w	d5708 <HAL_SPI_Is_Enabled>

000d5d12 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5d12:	b510      	push	{r4, lr}
   d5d14:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5d16:	6800      	ldr	r0, [r0, #0]
   d5d18:	b118      	cbz	r0, d5d22 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5d1a:	f7ff fed9 	bl	d5ad0 <free>
            wakeupSource_ = nullptr;
   d5d1e:	2300      	movs	r3, #0
   d5d20:	6023      	str	r3, [r4, #0]
   d5d22:	bd10      	pop	{r4, pc}

000d5d24 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5d24:	b510      	push	{r4, lr}
   d5d26:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5d28:	f7ff fff3 	bl	d5d12 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	bd10      	pop	{r4, pc}

000d5d30 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5d30:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d32:	4c09      	ldr	r4, [pc, #36]	; (d5d58 <_GLOBAL__sub_I_System+0x28>)
   d5d34:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d36:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5d3a:	6020      	str	r0, [r4, #0]
   d5d3c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5d3e:	71a0      	strb	r0, [r4, #6]
   d5d40:	8120      	strh	r0, [r4, #8]
   d5d42:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5d44:	f7ff fe18 	bl	d5978 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5d48:	4620      	mov	r0, r4
   d5d4a:	4a04      	ldr	r2, [pc, #16]	; (d5d5c <_GLOBAL__sub_I_System+0x2c>)
   d5d4c:	4904      	ldr	r1, [pc, #16]	; (d5d60 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5d52:	f001 b979 	b.w	d7048 <__aeabi_atexit>
   d5d56:	bf00      	nop
   d5d58:	2003e3e4 	.word	0x2003e3e4
   d5d5c:	2003e34c 	.word	0x2003e34c
   d5d60:	000d5d25 	.word	0x000d5d25

000d5d64 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5d64:	b510      	push	{r4, lr}
   d5d66:	4604      	mov	r4, r0
{
	free(buffer);
   d5d68:	6800      	ldr	r0, [r0, #0]
   d5d6a:	f7ff feb1 	bl	d5ad0 <free>
}
   d5d6e:	4620      	mov	r0, r4
   d5d70:	bd10      	pop	{r4, pc}

000d5d72 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5d72:	b510      	push	{r4, lr}
   d5d74:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5d76:	6800      	ldr	r0, [r0, #0]
   d5d78:	b108      	cbz	r0, d5d7e <_ZN6String10invalidateEv+0xc>
   d5d7a:	f7ff fea9 	bl	d5ad0 <free>
	buffer = NULL;
   d5d7e:	2300      	movs	r3, #0
   d5d80:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5d82:	60a3      	str	r3, [r4, #8]
   d5d84:	6063      	str	r3, [r4, #4]
   d5d86:	bd10      	pop	{r4, pc}

000d5d88 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5d88:	b538      	push	{r3, r4, r5, lr}
   d5d8a:	4604      	mov	r4, r0
   d5d8c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5d8e:	6800      	ldr	r0, [r0, #0]
   d5d90:	3101      	adds	r1, #1
   d5d92:	f7ff fea5 	bl	d5ae0 <realloc>
	if (newbuffer) {
   d5d96:	b110      	cbz	r0, d5d9e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5d98:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5d9c:	2001      	movs	r0, #1
	}
	return 0;
}
   d5d9e:	bd38      	pop	{r3, r4, r5, pc}

000d5da0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5da0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5da2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5da4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5da6:	b113      	cbz	r3, d5dae <_ZN6String7reserveEj+0xe>
   d5da8:	6843      	ldr	r3, [r0, #4]
   d5daa:	428b      	cmp	r3, r1
   d5dac:	d207      	bcs.n	d5dbe <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5dae:	4620      	mov	r0, r4
   d5db0:	f7ff ffea 	bl	d5d88 <_ZN6String12changeBufferEj>
   d5db4:	b120      	cbz	r0, d5dc0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5db6:	68a3      	ldr	r3, [r4, #8]
   d5db8:	b90b      	cbnz	r3, d5dbe <_ZN6String7reserveEj+0x1e>
   d5dba:	6822      	ldr	r2, [r4, #0]
   d5dbc:	7013      	strb	r3, [r2, #0]
   d5dbe:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5dc0:	bd10      	pop	{r4, pc}

000d5dc2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5dc2:	b570      	push	{r4, r5, r6, lr}
   d5dc4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5dc6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5dc8:	4604      	mov	r4, r0
   d5dca:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5dcc:	f7ff ffe8 	bl	d5da0 <_ZN6String7reserveEj>
   d5dd0:	b918      	cbnz	r0, d5dda <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5dd2:	4620      	mov	r0, r4
   d5dd4:	f7ff ffcd 	bl	d5d72 <_ZN6String10invalidateEv>
		return *this;
   d5dd8:	e009      	b.n	d5dee <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5dda:	462a      	mov	r2, r5
   d5ddc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5dde:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5de0:	6820      	ldr	r0, [r4, #0]
   d5de2:	f003 fb6d 	bl	d94c0 <memcpy>
	buffer[len] = 0;
   d5de6:	6822      	ldr	r2, [r4, #0]
   d5de8:	68a3      	ldr	r3, [r4, #8]
   d5dea:	2100      	movs	r1, #0
   d5dec:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5dee:	4620      	mov	r0, r4
   d5df0:	bd70      	pop	{r4, r5, r6, pc}

000d5df2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5df2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5df4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5df6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5df8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5dfa:	6043      	str	r3, [r0, #4]
	len = 0;
   d5dfc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5dfe:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5e00:	460d      	mov	r5, r1
   d5e02:	b139      	cbz	r1, d5e14 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5e04:	4608      	mov	r0, r1
   d5e06:	f003 fbb2 	bl	d956e <strlen>
   d5e0a:	4629      	mov	r1, r5
   d5e0c:	4602      	mov	r2, r0
   d5e0e:	4620      	mov	r0, r4
   d5e10:	f7ff ffd7 	bl	d5dc2 <_ZN6String4copyEPKcj>
}
   d5e14:	4620      	mov	r0, r4
   d5e16:	bd38      	pop	{r3, r4, r5, pc}

000d5e18 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5e18:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5e1a:	b510      	push	{r4, lr}
   d5e1c:	460b      	mov	r3, r1
   d5e1e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5e20:	d007      	beq.n	d5e32 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5e22:	6809      	ldr	r1, [r1, #0]
   d5e24:	b119      	cbz	r1, d5e2e <_ZN6StringaSERKS_+0x16>
   d5e26:	689a      	ldr	r2, [r3, #8]
   d5e28:	f7ff ffcb 	bl	d5dc2 <_ZN6String4copyEPKcj>
   d5e2c:	e001      	b.n	d5e32 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5e2e:	f7ff ffa0 	bl	d5d72 <_ZN6String10invalidateEv>

	return *this;
}
   d5e32:	4620      	mov	r0, r4
   d5e34:	bd10      	pop	{r4, pc}

000d5e36 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e36:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e38:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5e3a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5e3c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5e3e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5e40:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5e42:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5e44:	f7ff ffe8 	bl	d5e18 <_ZN6StringaSERKS_>
}
   d5e48:	4620      	mov	r0, r4
   d5e4a:	bd10      	pop	{r4, pc}

000d5e4c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5e4c:	b538      	push	{r3, r4, r5, lr}
   d5e4e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5e50:	460c      	mov	r4, r1
   d5e52:	b141      	cbz	r1, d5e66 <_ZN6StringaSEPKc+0x1a>
   d5e54:	4608      	mov	r0, r1
   d5e56:	f003 fb8a 	bl	d956e <strlen>
   d5e5a:	4621      	mov	r1, r4
   d5e5c:	4602      	mov	r2, r0
   d5e5e:	4628      	mov	r0, r5
   d5e60:	f7ff ffaf 	bl	d5dc2 <_ZN6String4copyEPKcj>
   d5e64:	e001      	b.n	d5e6a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5e66:	f7ff ff84 	bl	d5d72 <_ZN6String10invalidateEv>

	return *this;
}
   d5e6a:	4628      	mov	r0, r5
   d5e6c:	bd38      	pop	{r3, r4, r5, pc}

000d5e6e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5e6e:	b510      	push	{r4, lr}
   d5e70:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5e72:	6800      	ldr	r0, [r0, #0]
   d5e74:	b108      	cbz	r0, d5e7a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5e76:	f7ff fc9f 	bl	d57b8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	bd10      	pop	{r4, pc}

000d5e7e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5e7e:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5e80:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5e82:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5e84:	689b      	ldr	r3, [r3, #8]
   d5e86:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5e88:	68a3      	ldr	r3, [r4, #8]
   d5e8a:	3b01      	subs	r3, #1
   d5e8c:	60a3      	str	r3, [r4, #8]
   d5e8e:	b92b      	cbnz	r3, d5e9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5e90:	6823      	ldr	r3, [r4, #0]
   d5e92:	4620      	mov	r0, r4
   d5e94:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5e9a:	4718      	bx	r3
   d5e9c:	bd10      	pop	{r4, pc}

000d5e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5e9e:	680b      	ldr	r3, [r1, #0]
   d5ea0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5ea2:	b113      	cbz	r3, d5eaa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5ea4:	685a      	ldr	r2, [r3, #4]
   d5ea6:	3201      	adds	r2, #1
   d5ea8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5eaa:	4770      	bx	lr

000d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5eac:	b510      	push	{r4, lr}
   d5eae:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5eb0:	6800      	ldr	r0, [r0, #0]
   d5eb2:	b128      	cbz	r0, d5ec0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5eb4:	6843      	ldr	r3, [r0, #4]
   d5eb6:	3b01      	subs	r3, #1
   d5eb8:	6043      	str	r3, [r0, #4]
   d5eba:	b90b      	cbnz	r3, d5ec0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5ebc:	f7ff ffdf 	bl	d5e7e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5ec0:	4620      	mov	r0, r4
   d5ec2:	bd10      	pop	{r4, pc}

000d5ec4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5ec4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ec6:	4c06      	ldr	r4, [pc, #24]	; (d5ee0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5ec8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5eca:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ecc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5ece:	f7ff fc6b 	bl	d57a8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	4a03      	ldr	r2, [pc, #12]	; (d5ee4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5ed6:	4904      	ldr	r1, [pc, #16]	; (d5ee8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5edc:	f001 b8b4 	b.w	d7048 <__aeabi_atexit>
   d5ee0:	2003e3f0 	.word	0x2003e3f0
   d5ee4:	2003e34c 	.word	0x2003e34c
   d5ee8:	000d5e6f 	.word	0x000d5e6f

000d5eec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5eee:	4606      	mov	r6, r0
   d5ef0:	460d      	mov	r5, r1
   d5ef2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5ef4:	2400      	movs	r4, #0
  while (size--) {
   d5ef6:	42bd      	cmp	r5, r7
   d5ef8:	d00c      	beq.n	d5f14 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5efa:	6833      	ldr	r3, [r6, #0]
   d5efc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5f00:	689b      	ldr	r3, [r3, #8]
   d5f02:	4630      	mov	r0, r6
   d5f04:	4798      	blx	r3
     if (chunk>=0)
   d5f06:	2800      	cmp	r0, #0
   d5f08:	db01      	blt.n	d5f0e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5f0a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5f0c:	e7f3      	b.n	d5ef6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5f0e:	2c00      	cmp	r4, #0
   d5f10:	bf08      	it	eq
   d5f12:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5f14:	4620      	mov	r0, r4
   d5f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f18 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f18:	b570      	push	{r4, r5, r6, lr}
   d5f1a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5f1c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5f1e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f20:	b149      	cbz	r1, d5f36 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f22:	f003 fb24 	bl	d956e <strlen>
   d5f26:	682b      	ldr	r3, [r5, #0]
   d5f28:	4602      	mov	r2, r0
   d5f2a:	4621      	mov	r1, r4
   d5f2c:	4628      	mov	r0, r5
   d5f2e:	68db      	ldr	r3, [r3, #12]
    }
   d5f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f34:	4718      	bx	r3
    }
   d5f36:	bd70      	pop	{r4, r5, r6, pc}

000d5f38 <_ZN5Print5printEPKc>:
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	f7ff ffed 	bl	d5f18 <_ZN5Print5writeEPKc>
   d5f3e:	bd08      	pop	{r3, pc}

000d5f40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5f40:	6803      	ldr	r3, [r0, #0]
   d5f42:	689b      	ldr	r3, [r3, #8]
   d5f44:	4718      	bx	r3

000d5f46 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f46:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5f48:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f4a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5f4c:	f7ff fff8 	bl	d5f40 <_ZN5Print5printEc>
  n += print('\n');
   d5f50:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5f52:	4604      	mov	r4, r0
  n += print('\n');
   d5f54:	4628      	mov	r0, r5
   d5f56:	f7ff fff3 	bl	d5f40 <_ZN5Print5printEc>
  return n;
}
   d5f5a:	4420      	add	r0, r4
   d5f5c:	bd38      	pop	{r3, r4, r5, pc}

000d5f5e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5f5e:	b538      	push	{r3, r4, r5, lr}
   d5f60:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f62:	f7ff ffd9 	bl	d5f18 <_ZN5Print5writeEPKc>
   d5f66:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5f68:	4628      	mov	r0, r5
   d5f6a:	f7ff ffec 	bl	d5f46 <_ZN5Print7printlnEv>
  return n;
}
   d5f6e:	4420      	add	r0, r4
   d5f70:	bd38      	pop	{r3, r4, r5, pc}

000d5f72 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5f72:	b530      	push	{r4, r5, lr}
   d5f74:	b08b      	sub	sp, #44	; 0x2c
   d5f76:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5f78:	2100      	movs	r1, #0
   d5f7a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5f7e:	2a01      	cmp	r2, #1
   d5f80:	bf98      	it	ls
   d5f82:	220a      	movls	r2, #10
   d5f84:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5f88:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5f8c:	fb05 3312 	mls	r3, r5, r2, r3
   d5f90:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5f94:	2b09      	cmp	r3, #9
   d5f96:	bf94      	ite	ls
   d5f98:	3330      	addls	r3, #48	; 0x30
   d5f9a:	3337      	addhi	r3, #55	; 0x37
   d5f9c:	b2db      	uxtb	r3, r3
   d5f9e:	4621      	mov	r1, r4
   d5fa0:	f804 3901 	strb.w	r3, [r4], #-1
   d5fa4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5fa6:	2d00      	cmp	r5, #0
   d5fa8:	d1ee      	bne.n	d5f88 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5faa:	f7ff ffb5 	bl	d5f18 <_ZN5Print5writeEPKc>
}
   d5fae:	b00b      	add	sp, #44	; 0x2c
   d5fb0:	bd30      	pop	{r4, r5, pc}

000d5fb2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5fb2:	b40c      	push	{r2, r3}
   d5fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5fb8:	b087      	sub	sp, #28
   d5fba:	af00      	add	r7, sp, #0
   d5fbc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5fc0:	4605      	mov	r5, r0
   d5fc2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5fc6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5fc8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5fca:	4623      	mov	r3, r4
   d5fcc:	464a      	mov	r2, r9
   d5fce:	2114      	movs	r1, #20
   d5fd0:	1d38      	adds	r0, r7, #4
   d5fd2:	f7ff fd8d 	bl	d5af0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5fd6:	2813      	cmp	r0, #19
   d5fd8:	d805      	bhi.n	d5fe6 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5fda:	1d39      	adds	r1, r7, #4
   d5fdc:	4628      	mov	r0, r5
   d5fde:	f7ff ff9b 	bl	d5f18 <_ZN5Print5writeEPKc>
   d5fe2:	4604      	mov	r4, r0
   d5fe4:	e013      	b.n	d600e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5fe6:	f100 0308 	add.w	r3, r0, #8
   d5fea:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5fee:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5ff0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5ff4:	1c41      	adds	r1, r0, #1
   d5ff6:	4623      	mov	r3, r4
   d5ff8:	464a      	mov	r2, r9
   d5ffa:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5ffc:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5ffe:	f7ff fd77 	bl	d5af0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6002:	4669      	mov	r1, sp
   d6004:	4628      	mov	r0, r5
   d6006:	f7ff ff87 	bl	d5f18 <_ZN5Print5writeEPKc>
   d600a:	4604      	mov	r4, r0
   d600c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d600e:	b11e      	cbz	r6, d6018 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6010:	4628      	mov	r0, r5
   d6012:	f7ff ff98 	bl	d5f46 <_ZN5Print7printlnEv>
   d6016:	4404      	add	r4, r0
    return n;
}
   d6018:	4620      	mov	r0, r4
   d601a:	371c      	adds	r7, #28
   d601c:	46bd      	mov	sp, r7
   d601e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6022:	b002      	add	sp, #8
   d6024:	4770      	bx	lr
	...

000d6028 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6028:	4b01      	ldr	r3, [pc, #4]	; (d6030 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d602a:	4a02      	ldr	r2, [pc, #8]	; (d6034 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d602c:	601a      	str	r2, [r3, #0]
   d602e:	4770      	bx	lr
   d6030:	2003e3f4 	.word	0x2003e3f4
   d6034:	000d9b93 	.word	0x000d9b93

000d6038 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6038:	4b02      	ldr	r3, [pc, #8]	; (d6044 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d603a:	681a      	ldr	r2, [r3, #0]
   d603c:	4b02      	ldr	r3, [pc, #8]	; (d6048 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d603e:	601a      	str	r2, [r3, #0]
   d6040:	4770      	bx	lr
   d6042:	bf00      	nop
   d6044:	2003e2e0 	.word	0x2003e2e0
   d6048:	2003e3f8 	.word	0x2003e3f8

000d604c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d604c:	2100      	movs	r1, #0
   d604e:	f7ff bc9b 	b.w	d5988 <system_delay_ms>

000d6052 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6052:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6054:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6056:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6058:	b113      	cbz	r3, d6060 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d605a:	2203      	movs	r2, #3
   d605c:	4601      	mov	r1, r0
   d605e:	4798      	blx	r3
    }
   d6060:	4620      	mov	r0, r4
   d6062:	bd10      	pop	{r4, pc}

000d6064 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6064:	b510      	push	{r4, lr}
   d6066:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6068:	f7ff fff3 	bl	d6052 <_ZNSt14_Function_baseD1Ev>
   d606c:	4620      	mov	r0, r4
   d606e:	bd10      	pop	{r4, pc}

000d6070 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6070:	b513      	push	{r0, r1, r4, lr}
   d6072:	460b      	mov	r3, r1
   d6074:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6076:	c803      	ldmia	r0, {r0, r1}
   d6078:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d607c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6080:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6084:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6088:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d608c:	b002      	add	sp, #8
   d608e:	bd10      	pop	{r4, pc}

000d6090 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6090:	4803      	ldr	r0, [pc, #12]	; (d60a0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6092:	4a04      	ldr	r2, [pc, #16]	; (d60a4 <_GLOBAL__sub_I_RGB+0x14>)
   d6094:	4904      	ldr	r1, [pc, #16]	; (d60a8 <_GLOBAL__sub_I_RGB+0x18>)
   d6096:	2300      	movs	r3, #0
   d6098:	6083      	str	r3, [r0, #8]
   d609a:	f000 bfd5 	b.w	d7048 <__aeabi_atexit>
   d609e:	bf00      	nop
   d60a0:	2003e3fc 	.word	0x2003e3fc
   d60a4:	2003e34c 	.word	0x2003e34c
   d60a8:	000d6065 	.word	0x000d6065

000d60ac <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d60ac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d60ae:	4b0c      	ldr	r3, [pc, #48]	; (d60e0 <serialEventRun+0x34>)
   d60b0:	b133      	cbz	r3, d60c0 <serialEventRun+0x14>
   d60b2:	f000 fc1b 	bl	d68ec <_Z16_fetch_usbserialv>
   d60b6:	6803      	ldr	r3, [r0, #0]
   d60b8:	691b      	ldr	r3, [r3, #16]
   d60ba:	4798      	blx	r3
   d60bc:	2800      	cmp	r0, #0
   d60be:	dc09      	bgt.n	d60d4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d60c0:	4b08      	ldr	r3, [pc, #32]	; (d60e4 <serialEventRun+0x38>)
   d60c2:	b163      	cbz	r3, d60de <serialEventRun+0x32>
   d60c4:	f000 fc94 	bl	d69f0 <_Z22__fetch_global_Serial1v>
   d60c8:	6803      	ldr	r3, [r0, #0]
   d60ca:	691b      	ldr	r3, [r3, #16]
   d60cc:	4798      	blx	r3
   d60ce:	2800      	cmp	r0, #0
   d60d0:	dc03      	bgt.n	d60da <serialEventRun+0x2e>
   d60d2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d60d4:	f3af 8000 	nop.w
   d60d8:	e7f2      	b.n	d60c0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d60da:	f3af 8000 	nop.w
   d60de:	bd08      	pop	{r3, pc}
	...

000d60e8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d60e8:	b508      	push	{r3, lr}
	serialEventRun();
   d60ea:	f7ff ffdf 	bl	d60ac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d60ee:	f7ff fb3b 	bl	d5768 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d60f2:	4b01      	ldr	r3, [pc, #4]	; (d60f8 <_post_loop+0x10>)
   d60f4:	6018      	str	r0, [r3, #0]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	2003e730 	.word	0x2003e730

000d60fc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d60fc:	4802      	ldr	r0, [pc, #8]	; (d6108 <_Z33system_initialize_user_backup_ramv+0xc>)
   d60fe:	4a03      	ldr	r2, [pc, #12]	; (d610c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6100:	4903      	ldr	r1, [pc, #12]	; (d6110 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6102:	1a12      	subs	r2, r2, r0
   d6104:	f003 b9dc 	b.w	d94c0 <memcpy>
   d6108:	2003f400 	.word	0x2003f400
   d610c:	2003f404 	.word	0x2003f404
   d6110:	000d9e48 	.word	0x000d9e48

000d6114 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6114:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6116:	2300      	movs	r3, #0
   d6118:	9300      	str	r3, [sp, #0]
   d611a:	461a      	mov	r2, r3
   d611c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6120:	f7ff fc5c 	bl	d59dc <system_ctrl_set_result>
}
   d6124:	b003      	add	sp, #12
   d6126:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d612c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d612c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d612e:	8843      	ldrh	r3, [r0, #2]
   d6130:	2b0a      	cmp	r3, #10
   d6132:	d008      	beq.n	d6146 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6134:	2b50      	cmp	r3, #80	; 0x50
   d6136:	d109      	bne.n	d614c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6138:	4b09      	ldr	r3, [pc, #36]	; (d6160 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d613a:	681b      	ldr	r3, [r3, #0]
   d613c:	b13b      	cbz	r3, d614e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d613e:	b003      	add	sp, #12
   d6140:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6144:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6146:	f7ff ffe5 	bl	d6114 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d614a:	e006      	b.n	d615a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d614c:	2300      	movs	r3, #0
   d614e:	9300      	str	r3, [sp, #0]
   d6150:	461a      	mov	r2, r3
   d6152:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6156:	f7ff fc41 	bl	d59dc <system_ctrl_set_result>
        break;
    }
}
   d615a:	b003      	add	sp, #12
   d615c:	f85d fb04 	ldr.w	pc, [sp], #4
   d6160:	2003e40c 	.word	0x2003e40c

000d6164 <module_user_init_hook>:

void module_user_init_hook()
{
   d6164:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6166:	4c10      	ldr	r4, [pc, #64]	; (d61a8 <module_user_init_hook+0x44>)
   d6168:	4d10      	ldr	r5, [pc, #64]	; (d61ac <module_user_init_hook+0x48>)
   d616a:	6823      	ldr	r3, [r4, #0]
   d616c:	42ab      	cmp	r3, r5
   d616e:	4b10      	ldr	r3, [pc, #64]	; (d61b0 <module_user_init_hook+0x4c>)
   d6170:	bf0c      	ite	eq
   d6172:	2201      	moveq	r2, #1
   d6174:	2200      	movne	r2, #0
   d6176:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6178:	d002      	beq.n	d6180 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d617a:	f7ff ffbf 	bl	d60fc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d617e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6180:	f7ff faea 	bl	d5758 <HAL_RNG_GetRandomNumber>
   d6184:	4604      	mov	r4, r0
    srand(seed);
   d6186:	f003 f9af 	bl	d94e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d618a:	4b0a      	ldr	r3, [pc, #40]	; (d61b4 <module_user_init_hook+0x50>)
   d618c:	b113      	cbz	r3, d6194 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d618e:	4620      	mov	r0, r4
   d6190:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6194:	2100      	movs	r1, #0
   d6196:	4807      	ldr	r0, [pc, #28]	; (d61b4 <module_user_init_hook+0x50>)
   d6198:	f7ff fc8a 	bl	d5ab0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d619c:	2100      	movs	r1, #0
   d619e:	4806      	ldr	r0, [pc, #24]	; (d61b8 <module_user_init_hook+0x54>)
}
   d61a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d61a4:	f7ff bc10 	b.w	d59c8 <system_ctrl_set_app_request_handler>
   d61a8:	2003f400 	.word	0x2003f400
   d61ac:	9a271c1e 	.word	0x9a271c1e
   d61b0:	2003e410 	.word	0x2003e410
   d61b4:	00000000 	.word	0x00000000
   d61b8:	000d612d 	.word	0x000d612d

000d61bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d61bc:	4770      	bx	lr

000d61be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d61be:	2000      	movs	r0, #0
   d61c0:	4770      	bx	lr

000d61c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d61c2:	b510      	push	{r4, lr}
   d61c4:	2110      	movs	r1, #16
   d61c6:	4604      	mov	r4, r0
   d61c8:	f000 ff4c 	bl	d7064 <_ZdlPvj>
   d61cc:	4620      	mov	r0, r4
   d61ce:	bd10      	pop	{r4, pc}

000d61d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d61d0:	b508      	push	{r3, lr}
      { delete this; }
   d61d2:	b108      	cbz	r0, d61d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d61d4:	f7ff fff5 	bl	d61c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d61d8:	bd08      	pop	{r3, pc}

000d61da <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d61da:	2200      	movs	r2, #0
   d61dc:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d61de:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d61e0:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d61e4:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d61e6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d61ea:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d61ec:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61ee:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d61f0:	680c      	ldr	r4, [r1, #0]
   d61f2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d61f4:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d61f6:	bd10      	pop	{r4, pc}

000d61f8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d61f8:	b510      	push	{r4, lr}
   d61fa:	4604      	mov	r4, r0
    free((void*)msg_);
   d61fc:	6800      	ldr	r0, [r0, #0]
   d61fe:	f7ff fc67 	bl	d5ad0 <free>
}
   d6202:	4620      	mov	r0, r4
   d6204:	bd10      	pop	{r4, pc}

000d6206 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6206:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6208:	68c4      	ldr	r4, [r0, #12]
   d620a:	b1f4      	cbz	r4, d624a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d620c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d620e:	2b02      	cmp	r3, #2
   d6210:	d103      	bne.n	d621a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6212:	f104 000c 	add.w	r0, r4, #12
   d6216:	f7ff ffef 	bl	d61f8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d621a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d621c:	b135      	cbz	r5, d622c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d621e:	4628      	mov	r0, r5
   d6220:	f7ff ff17 	bl	d6052 <_ZNSt14_Function_baseD1Ev>
   d6224:	2110      	movs	r1, #16
   d6226:	4628      	mov	r0, r5
   d6228:	f000 ff1c 	bl	d7064 <_ZdlPvj>
   d622c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d622e:	b135      	cbz	r5, d623e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6230:	4628      	mov	r0, r5
   d6232:	f7ff ff0e 	bl	d6052 <_ZNSt14_Function_baseD1Ev>
   d6236:	2110      	movs	r1, #16
   d6238:	4628      	mov	r0, r5
   d623a:	f000 ff13 	bl	d7064 <_ZdlPvj>
   d623e:	4620      	mov	r0, r4
   d6240:	2114      	movs	r1, #20
   d6242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6246:	f000 bf0d 	b.w	d7064 <_ZdlPvj>
   d624a:	bd38      	pop	{r3, r4, r5, pc}

000d624c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d624c:	b513      	push	{r0, r1, r4, lr}
   d624e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6250:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6254:	2300      	movs	r3, #0
   d6256:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6258:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d625a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d625c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d625e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6260:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6262:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6264:	f7ff fe22 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6268:	4620      	mov	r0, r4
   d626a:	b002      	add	sp, #8
   d626c:	bd10      	pop	{r4, pc}

000d626e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d626e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6270:	460c      	mov	r4, r1
   d6272:	ad02      	add	r5, sp, #8
   d6274:	f854 3b04 	ldr.w	r3, [r4], #4
   d6278:	f845 3d08 	str.w	r3, [r5, #-8]!
   d627c:	4606      	mov	r6, r0
   d627e:	460f      	mov	r7, r1
   d6280:	a801      	add	r0, sp, #4
   d6282:	4621      	mov	r1, r4
   d6284:	f7ff fe0b 	bl	d5e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6288:	4629      	mov	r1, r5
   d628a:	4630      	mov	r0, r6
   d628c:	f7ff ffde 	bl	d624c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6290:	a801      	add	r0, sp, #4
   d6292:	f7ff fe0b 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6296:	4620      	mov	r0, r4
   d6298:	f7ff fe08 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d629c:	4638      	mov	r0, r7
   d629e:	2108      	movs	r1, #8
   d62a0:	f000 fee0 	bl	d7064 <_ZdlPvj>
        return p;
    }
   d62a4:	4630      	mov	r0, r6
   d62a6:	b003      	add	sp, #12
   d62a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d62ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d62ac:	b538      	push	{r3, r4, r5, lr}
   d62ae:	2300      	movs	r3, #0
   d62b0:	4604      	mov	r4, r0
   d62b2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62b4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d62b6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62b8:	f7fd feef 	bl	d409a <_Znwj>
   d62bc:	b128      	cbz	r0, d62ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d62be:	2301      	movs	r3, #1
   d62c0:	6043      	str	r3, [r0, #4]
   d62c2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d62c4:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d62c6:	6003      	str	r3, [r0, #0]
   d62c8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d62ca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d62cc:	4620      	mov	r0, r4
   d62ce:	bd38      	pop	{r3, r4, r5, pc}
   d62d0:	000d9c30 	.word	0x000d9c30

000d62d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62d4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d62d6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62d8:	b90a      	cbnz	r2, d62de <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d62da:	f000 fed6 	bl	d708a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62de:	68c3      	ldr	r3, [r0, #12]
    }
   d62e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62e4:	4718      	bx	r3

000d62e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d62e6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d62e8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d62ea:	f100 0110 	add.w	r1, r0, #16
   d62ee:	f7ff fff1 	bl	d62d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d62f2:	bd08      	pop	{r3, pc}

000d62f4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62f4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d62f6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d62f8:	b90a      	cbnz	r2, d62fe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d62fa:	f000 fec6 	bl	d708a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d62fe:	68c3      	ldr	r3, [r0, #12]
    }
   d6300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6304:	4718      	bx	r3

000d6306 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6306:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6308:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d630a:	f100 0110 	add.w	r1, r0, #16
   d630e:	f7ff fff1 	bl	d62f4 <_ZNKSt8functionIFvRKbEEclES1_>
   d6312:	bd08      	pop	{r3, pc}

000d6314 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6314:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6316:	2300      	movs	r3, #0
   d6318:	6083      	str	r3, [r0, #8]
   d631a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d631c:	4604      	mov	r4, r0
   d631e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6320:	b12b      	cbz	r3, d632e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6322:	2202      	movs	r2, #2
   d6324:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6326:	68eb      	ldr	r3, [r5, #12]
   d6328:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d632a:	68ab      	ldr	r3, [r5, #8]
   d632c:	60a3      	str	r3, [r4, #8]
	}
    }
   d632e:	4620      	mov	r0, r4
   d6330:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6334:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6336:	b089      	sub	sp, #36	; 0x24
   d6338:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d633a:	4668      	mov	r0, sp
   d633c:	f7ff ff4d 	bl	d61da <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6340:	2300      	movs	r3, #0
   d6342:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6346:	f04f 0202 	mov.w	r2, #2
   d634a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d634e:	2b00      	cmp	r3, #0
   d6350:	d103      	bne.n	d635a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6352:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6356:	2900      	cmp	r1, #0
   d6358:	d1f7      	bne.n	d634a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d635a:	d002      	beq.n	d6362 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d635c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6360:	e063      	b.n	d642a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6362:	f114 050c 	adds.w	r5, r4, #12
   d6366:	d003      	beq.n	d6370 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6368:	4669      	mov	r1, sp
   d636a:	4628      	mov	r0, r5
   d636c:	f7ff ff35 	bl	d61da <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6370:	f3bf 8f5f 	dmb	sy
   d6374:	2301      	movs	r3, #1
   d6376:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6378:	2000      	movs	r0, #0
   d637a:	f104 0308 	add.w	r3, r4, #8
   d637e:	f3bf 8f5f 	dmb	sy
   d6382:	e853 6f00 	ldrex	r6, [r3]
   d6386:	e843 0200 	strex	r2, r0, [r3]
   d638a:	2a00      	cmp	r2, #0
   d638c:	d1f9      	bne.n	d6382 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d638e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6392:	2e00      	cmp	r6, #0
   d6394:	d049      	beq.n	d642a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6396:	f7ff fb07 	bl	d59a8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d639a:	b120      	cbz	r0, d63a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d639c:	4629      	mov	r1, r5
   d639e:	4630      	mov	r0, r6
   d63a0:	f7ff ff98 	bl	d62d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d63a4:	e03a      	b.n	d641c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d63a6:	4631      	mov	r1, r6
   d63a8:	a802      	add	r0, sp, #8
   d63aa:	f7ff ffb3 	bl	d6314 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d63ae:	68e0      	ldr	r0, [r4, #12]
   d63b0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d63b4:	b108      	cbz	r0, d63ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d63b6:	f003 f8bf 	bl	d9538 <strdup>
   d63ba:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d63bc:	2010      	movs	r0, #16
   d63be:	f8ad 501c 	strh.w	r5, [sp, #28]
   d63c2:	f7fd fe6a 	bl	d409a <_Znwj>
   d63c6:	4605      	mov	r5, r0
   d63c8:	b1e8      	cbz	r0, d6406 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63ca:	2700      	movs	r7, #0
   d63cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63ce:	2018      	movs	r0, #24
   d63d0:	f7fd fe63 	bl	d409a <_Znwj>
   d63d4:	4604      	mov	r4, r0
   d63d6:	b188      	cbz	r0, d63fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d63d8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63da:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d63dc:	a802      	add	r0, sp, #8
   d63de:	f7ff fe47 	bl	d6070 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63e2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d63e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d63e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63e8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d63ea:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d63ec:	a906      	add	r1, sp, #24
   d63ee:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d63f0:	60e3      	str	r3, [r4, #12]
   d63f2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d63f6:	9205      	str	r2, [sp, #20]
   d63f8:	f7ff feef 	bl	d61da <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d63fc:	4b0d      	ldr	r3, [pc, #52]	; (d6434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d63fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6400:	4b0d      	ldr	r3, [pc, #52]	; (d6438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6402:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6404:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6406:	a806      	add	r0, sp, #24
   d6408:	f7ff fef6 	bl	d61f8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d640c:	a802      	add	r0, sp, #8
   d640e:	f7ff fe20 	bl	d6052 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6412:	2200      	movs	r2, #0
   d6414:	4629      	mov	r1, r5
   d6416:	4809      	ldr	r0, [pc, #36]	; (d643c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6418:	f7ff face 	bl	d59b8 <application_thread_invoke>
   d641c:	4630      	mov	r0, r6
   d641e:	f7ff fe18 	bl	d6052 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6422:	2110      	movs	r1, #16
   d6424:	4630      	mov	r0, r6
   d6426:	f000 fe1d 	bl	d7064 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d642a:	4668      	mov	r0, sp
   d642c:	f7ff fee4 	bl	d61f8 <_ZN8particle5ErrorD1Ev>
    }
   d6430:	b009      	add	sp, #36	; 0x24
   d6432:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6434:	000d62e7 	.word	0x000d62e7
   d6438:	000d655d 	.word	0x000d655d
   d643c:	000d6a3d 	.word	0x000d6a3d

000d6440 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6444:	b08b      	sub	sp, #44	; 0x2c
   d6446:	4606      	mov	r6, r0
   d6448:	460f      	mov	r7, r1
   d644a:	4690      	mov	r8, r2
   d644c:	4699      	mov	r9, r3
   d644e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6452:	f7ff fb1d 	bl	d5a90 <spark_cloud_flag_connected>
   d6456:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6458:	4683      	mov	fp, r0
   d645a:	bb30      	cbnz	r0, d64aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d645c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6460:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6462:	a905      	add	r1, sp, #20
   d6464:	4628      	mov	r0, r5
   d6466:	f8ad 3018 	strh.w	r3, [sp, #24]
   d646a:	f7ff feb6 	bl	d61da <_ZN8particle5ErrorC1EOS0_>
   d646e:	2014      	movs	r0, #20
   d6470:	f7fd fe13 	bl	d409a <_Znwj>
   d6474:	4604      	mov	r4, r0
   d6476:	b158      	cbz	r0, d6490 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6478:	2302      	movs	r3, #2
   d647a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d647c:	2301      	movs	r3, #1
   d647e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6480:	f8c0 b004 	str.w	fp, [r0, #4]
   d6484:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6488:	4629      	mov	r1, r5
   d648a:	300c      	adds	r0, #12
   d648c:	f7ff fea5 	bl	d61da <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6490:	4630      	mov	r0, r6
   d6492:	4621      	mov	r1, r4
   d6494:	f840 4b04 	str.w	r4, [r0], #4
   d6498:	f7ff ff08 	bl	d62ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d649c:	4628      	mov	r0, r5
   d649e:	f7ff feab 	bl	d61f8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d64a2:	a805      	add	r0, sp, #20
   d64a4:	f7ff fea8 	bl	d61f8 <_ZN8particle5ErrorD1Ev>
   d64a8:	e052      	b.n	d6550 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d64aa:	2400      	movs	r4, #0
   d64ac:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d64ae:	2014      	movs	r0, #20
   d64b0:	606c      	str	r4, [r5, #4]
   d64b2:	60ac      	str	r4, [r5, #8]
   d64b4:	9307      	str	r3, [sp, #28]
   d64b6:	f7fd fdf0 	bl	d409a <_Znwj>
   d64ba:	4601      	mov	r1, r0
   d64bc:	b118      	cbz	r0, d64c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d64be:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d64c0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d64c2:	6044      	str	r4, [r0, #4]
   d64c4:	6084      	str	r4, [r0, #8]
   d64c6:	a804      	add	r0, sp, #16
   d64c8:	9103      	str	r1, [sp, #12]
   d64ca:	f7ff feef 	bl	d62ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d64ce:	4b22      	ldr	r3, [pc, #136]	; (d6558 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d64d0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d64d2:	2008      	movs	r0, #8
   d64d4:	f7fd fde1 	bl	d409a <_Znwj>
   d64d8:	4604      	mov	r4, r0
   d64da:	b128      	cbz	r0, d64e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64dc:	9b03      	ldr	r3, [sp, #12]
   d64de:	f840 3b04 	str.w	r3, [r0], #4
   d64e2:	a904      	add	r1, sp, #16
   d64e4:	f7ff fcdb 	bl	d5e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d64e8:	9500      	str	r5, [sp, #0]
   d64ea:	fa5f f38a 	uxtb.w	r3, sl
   d64ee:	464a      	mov	r2, r9
   d64f0:	4641      	mov	r1, r8
   d64f2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d64f4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d64f6:	f7ff fad3 	bl	d5aa0 <spark_send_event>
   d64fa:	b920      	cbnz	r0, d6506 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d64fc:	9b03      	ldr	r3, [sp, #12]
   d64fe:	785b      	ldrb	r3, [r3, #1]
   d6500:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6504:	b183      	cbz	r3, d6528 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6506:	9b03      	ldr	r3, [sp, #12]
   d6508:	9305      	str	r3, [sp, #20]
   d650a:	a904      	add	r1, sp, #16
   d650c:	a806      	add	r0, sp, #24
   d650e:	f7ff fcc6 	bl	d5e9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6512:	a905      	add	r1, sp, #20
   d6514:	4630      	mov	r0, r6
   d6516:	f7ff fe99 	bl	d624c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d651a:	a806      	add	r0, sp, #24
   d651c:	f7ff fcc6 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6520:	a804      	add	r0, sp, #16
   d6522:	f7ff fcc3 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6526:	e013      	b.n	d6550 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6528:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d652c:	a905      	add	r1, sp, #20
   d652e:	a803      	add	r0, sp, #12
   d6530:	9205      	str	r2, [sp, #20]
   d6532:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6536:	f7ff fefd 	bl	d6334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d653a:	a805      	add	r0, sp, #20
   d653c:	f7ff fe5c 	bl	d61f8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6540:	a805      	add	r0, sp, #20
   d6542:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6544:	f7ff fe93 	bl	d626e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6548:	a806      	add	r0, sp, #24
   d654a:	f7ff fcaf 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d654e:	e7da      	b.n	d6506 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6550:	4630      	mov	r0, r6
   d6552:	b00b      	add	sp, #44	; 0x2c
   d6554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6558:	000d66cd 	.word	0x000d66cd

000d655c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d655c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d655e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6560:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6562:	d006      	beq.n	d6572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6564:	2a03      	cmp	r2, #3
   d6566:	d017      	beq.n	d6598 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6568:	2a01      	cmp	r2, #1
   d656a:	d122      	bne.n	d65b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d656c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d656e:	6003      	str	r3, [r0, #0]
	      break;
   d6570:	e01f      	b.n	d65b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6572:	2018      	movs	r0, #24
   d6574:	680e      	ldr	r6, [r1, #0]
   d6576:	f7fd fd90 	bl	d409a <_Znwj>
   d657a:	4605      	mov	r5, r0
   d657c:	b150      	cbz	r0, d6594 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d657e:	4631      	mov	r1, r6
   d6580:	f7ff fec8 	bl	d6314 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6584:	6930      	ldr	r0, [r6, #16]
   d6586:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d658a:	b108      	cbz	r0, d6590 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d658c:	f002 ffd4 	bl	d9538 <strdup>
   d6590:	6128      	str	r0, [r5, #16]
   d6592:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6594:	6025      	str	r5, [r4, #0]
   d6596:	e00c      	b.n	d65b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6598:	6804      	ldr	r4, [r0, #0]
   d659a:	b154      	cbz	r4, d65b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d659c:	f104 0010 	add.w	r0, r4, #16
   d65a0:	f7ff fe2a 	bl	d61f8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65a4:	4620      	mov	r0, r4
   d65a6:	f7ff fd54 	bl	d6052 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d65aa:	2118      	movs	r1, #24
   d65ac:	4620      	mov	r0, r4
   d65ae:	f000 fd59 	bl	d7064 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d65b2:	2000      	movs	r0, #0
   d65b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d65b6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d65b8:	2300      	movs	r3, #0
   d65ba:	6083      	str	r3, [r0, #8]
   d65bc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d65be:	4604      	mov	r4, r0
   d65c0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d65c2:	b12b      	cbz	r3, d65d0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d65c4:	2202      	movs	r2, #2
   d65c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d65c8:	68eb      	ldr	r3, [r5, #12]
   d65ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d65cc:	68ab      	ldr	r3, [r5, #8]
   d65ce:	60a3      	str	r3, [r4, #8]
	}
    }
   d65d0:	4620      	mov	r0, r4
   d65d2:	bd38      	pop	{r3, r4, r5, pc}

000d65d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d65d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d65d6:	b570      	push	{r4, r5, r6, lr}
   d65d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d65da:	d006      	beq.n	d65ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d65dc:	2a03      	cmp	r2, #3
   d65de:	d011      	beq.n	d6604 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d65e0:	2a01      	cmp	r2, #1
   d65e2:	d118      	bne.n	d6616 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d65e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d65e6:	6003      	str	r3, [r0, #0]
	      break;
   d65e8:	e015      	b.n	d6616 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d65ea:	2014      	movs	r0, #20
   d65ec:	680e      	ldr	r6, [r1, #0]
   d65ee:	f7fd fd54 	bl	d409a <_Znwj>
   d65f2:	4605      	mov	r5, r0
   d65f4:	b120      	cbz	r0, d6600 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d65f6:	4631      	mov	r1, r6
   d65f8:	f7ff ffdd 	bl	d65b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d65fc:	7c33      	ldrb	r3, [r6, #16]
   d65fe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6600:	6025      	str	r5, [r4, #0]
   d6602:	e008      	b.n	d6616 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6604:	6804      	ldr	r4, [r0, #0]
   d6606:	b134      	cbz	r4, d6616 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6608:	4620      	mov	r0, r4
   d660a:	f7ff fd22 	bl	d6052 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d660e:	2114      	movs	r1, #20
   d6610:	4620      	mov	r0, r4
   d6612:	f000 fd27 	bl	d7064 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6616:	2000      	movs	r0, #0
   d6618:	bd70      	pop	{r4, r5, r6, pc}
	...

000d661c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d661c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d661e:	2300      	movs	r3, #0
   d6620:	b087      	sub	sp, #28
   d6622:	460c      	mov	r4, r1
   d6624:	f3bf 8f5f 	dmb	sy
   d6628:	e850 6f00 	ldrex	r6, [r0]
   d662c:	e840 3200 	strex	r2, r3, [r0]
   d6630:	2a00      	cmp	r2, #0
   d6632:	d1f9      	bne.n	d6628 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6634:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6638:	2e00      	cmp	r6, #0
   d663a:	d03f      	beq.n	d66bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d663c:	4618      	mov	r0, r3
   d663e:	f7ff f9b3 	bl	d59a8 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6642:	4607      	mov	r7, r0
   d6644:	b120      	cbz	r0, d6650 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6646:	4621      	mov	r1, r4
   d6648:	4630      	mov	r0, r6
   d664a:	f7ff fe53 	bl	d62f4 <_ZNKSt8functionIFvRKbEEclES1_>
   d664e:	e02e      	b.n	d66ae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6650:	4631      	mov	r1, r6
   d6652:	a801      	add	r0, sp, #4
   d6654:	f7ff ffaf 	bl	d65b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6658:	7823      	ldrb	r3, [r4, #0]
   d665a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d665e:	2010      	movs	r0, #16
   d6660:	f7fd fd1b 	bl	d409a <_Znwj>
   d6664:	4605      	mov	r5, r0
   d6666:	b1d0      	cbz	r0, d669e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6668:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d666a:	2014      	movs	r0, #20
   d666c:	f7fd fd15 	bl	d409a <_Znwj>
   d6670:	4604      	mov	r4, r0
   d6672:	b178      	cbz	r0, d6694 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6674:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6676:	4601      	mov	r1, r0
   d6678:	a801      	add	r0, sp, #4
   d667a:	f7ff fcf9 	bl	d6070 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d667e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6680:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6682:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6684:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6686:	9203      	str	r2, [sp, #12]
   d6688:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d668a:	60e3      	str	r3, [r4, #12]
   d668c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6690:	9204      	str	r2, [sp, #16]
   d6692:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6694:	4b0a      	ldr	r3, [pc, #40]	; (d66c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6696:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6698:	4b0a      	ldr	r3, [pc, #40]	; (d66c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d669a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d669c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d669e:	a801      	add	r0, sp, #4
   d66a0:	f7ff fcd7 	bl	d6052 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d66a4:	2200      	movs	r2, #0
   d66a6:	4629      	mov	r1, r5
   d66a8:	4807      	ldr	r0, [pc, #28]	; (d66c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d66aa:	f7ff f985 	bl	d59b8 <application_thread_invoke>
   d66ae:	4630      	mov	r0, r6
   d66b0:	f7ff fccf 	bl	d6052 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d66b4:	2110      	movs	r1, #16
   d66b6:	4630      	mov	r0, r6
   d66b8:	f000 fcd4 	bl	d7064 <_ZdlPvj>
        }
    }
   d66bc:	b007      	add	sp, #28
   d66be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d66c0:	000d6307 	.word	0x000d6307
   d66c4:	000d65d5 	.word	0x000d65d5
   d66c8:	000d6a3d 	.word	0x000d6a3d

000d66cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d66cc:	b530      	push	{r4, r5, lr}
   d66ce:	b085      	sub	sp, #20
   d66d0:	4604      	mov	r4, r0
   d66d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d66d4:	4668      	mov	r0, sp
   d66d6:	4611      	mov	r1, r2
   d66d8:	f7ff fdc9 	bl	d626e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d66dc:	b17c      	cbz	r4, d66fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d66de:	b224      	sxth	r4, r4
   d66e0:	4628      	mov	r0, r5
   d66e2:	b10d      	cbz	r5, d66e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d66e4:	f002 ff28 	bl	d9538 <strdup>
   d66e8:	9002      	str	r0, [sp, #8]
   d66ea:	a902      	add	r1, sp, #8
   d66ec:	4668      	mov	r0, sp
   d66ee:	f8ad 400c 	strh.w	r4, [sp, #12]
   d66f2:	f7ff fe1f 	bl	d6334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d66f6:	a802      	add	r0, sp, #8
   d66f8:	f7ff fd7e 	bl	d61f8 <_ZN8particle5ErrorD1Ev>
   d66fc:	e01d      	b.n	d673a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d66fe:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6700:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6704:	f04f 0201 	mov.w	r2, #1
   d6708:	e8d0 3f4f 	ldrexb	r3, [r0]
   d670c:	42a3      	cmp	r3, r4
   d670e:	d103      	bne.n	d6718 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6710:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6714:	2900      	cmp	r1, #0
   d6716:	d1f7      	bne.n	d6708 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6718:	d002      	beq.n	d6720 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d671a:	f88d 3008 	strb.w	r3, [sp, #8]
   d671e:	e00c      	b.n	d673a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6720:	f110 010c 	adds.w	r1, r0, #12
   d6724:	f04f 0301 	mov.w	r3, #1
   d6728:	bf18      	it	ne
   d672a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d672c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6730:	3004      	adds	r0, #4
   d6732:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6736:	f7ff ff71 	bl	d661c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d673a:	a801      	add	r0, sp, #4
   d673c:	f7ff fbb6 	bl	d5eac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6740:	b005      	add	sp, #20
   d6742:	bd30      	pop	{r4, r5, pc}

000d6744 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6744:	4770      	bx	lr

000d6746 <_ZN9IPAddressD0Ev>:
   d6746:	b510      	push	{r4, lr}
   d6748:	2118      	movs	r1, #24
   d674a:	4604      	mov	r4, r0
   d674c:	f000 fc8a 	bl	d7064 <_ZdlPvj>
   d6750:	4620      	mov	r0, r4
   d6752:	bd10      	pop	{r4, pc}

000d6754 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6754:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6756:	7d03      	ldrb	r3, [r0, #20]
   d6758:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d675a:	b08d      	sub	sp, #52	; 0x34
   d675c:	460e      	mov	r6, r1
   d675e:	f100 0704 	add.w	r7, r0, #4
   d6762:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6766:	d002      	beq.n	d676e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6768:	f100 0508 	add.w	r5, r0, #8
   d676c:	e018      	b.n	d67a0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d676e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6770:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6772:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6776:	232f      	movs	r3, #47	; 0x2f
   d6778:	462a      	mov	r2, r5
   d677a:	200a      	movs	r0, #10
   d677c:	f7ff f824 	bl	d57c8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6780:	4628      	mov	r0, r5
   d6782:	f002 fef4 	bl	d956e <strlen>
   d6786:	6833      	ldr	r3, [r6, #0]
   d6788:	4602      	mov	r2, r0
   d678a:	68db      	ldr	r3, [r3, #12]
   d678c:	4629      	mov	r1, r5
   d678e:	4630      	mov	r0, r6
   d6790:	4798      	blx	r3
   d6792:	e00f      	b.n	d67b4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6794:	b124      	cbz	r4, d67a0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6796:	212e      	movs	r1, #46	; 0x2e
   d6798:	4630      	mov	r0, r6
   d679a:	f7ff fbd1 	bl	d5f40 <_ZN5Print5printEc>
   d679e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d67a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d67a4:	220a      	movs	r2, #10
   d67a6:	4630      	mov	r0, r6
   d67a8:	f7ff fbe3 	bl	d5f72 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d67ac:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d67ae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d67b0:	d1f0      	bne.n	d6794 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d67b2:	4620      	mov	r0, r4
    }
    return n;
}
   d67b4:	b00d      	add	sp, #52	; 0x34
   d67b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d67b8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d67b8:	b510      	push	{r4, lr}
   d67ba:	4b05      	ldr	r3, [pc, #20]	; (d67d0 <_ZN9IPAddressC1Ev+0x18>)
   d67bc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d67be:	2211      	movs	r2, #17
   d67c0:	f840 3b04 	str.w	r3, [r0], #4
   d67c4:	2100      	movs	r1, #0
   d67c6:	f002 fe86 	bl	d94d6 <memset>
{
    clear();
}
   d67ca:	4620      	mov	r0, r4
   d67cc:	bd10      	pop	{r4, pc}
   d67ce:	bf00      	nop
   d67d0:	000d9c4c 	.word	0x000d9c4c

000d67d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d67d4:	4603      	mov	r3, r0
   d67d6:	4a07      	ldr	r2, [pc, #28]	; (d67f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d67d8:	b510      	push	{r4, lr}
   d67da:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d67de:	f101 0210 	add.w	r2, r1, #16
   d67e2:	f851 4b04 	ldr.w	r4, [r1], #4
   d67e6:	f843 4b04 	str.w	r4, [r3], #4
   d67ea:	4291      	cmp	r1, r2
   d67ec:	d1f9      	bne.n	d67e2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d67ee:	780a      	ldrb	r2, [r1, #0]
   d67f0:	701a      	strb	r2, [r3, #0]
}
   d67f2:	bd10      	pop	{r4, pc}
   d67f4:	000d9c4c 	.word	0x000d9c4c

000d67f8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d67f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d67fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d67fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6802:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6806:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d680a:	2304      	movs	r3, #4
   d680c:	6041      	str	r1, [r0, #4]
   d680e:	7503      	strb	r3, [r0, #20]
   d6810:	bd10      	pop	{r4, pc}

000d6812 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6812:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6814:	780d      	ldrb	r5, [r1, #0]
   d6816:	788b      	ldrb	r3, [r1, #2]
   d6818:	784a      	ldrb	r2, [r1, #1]
   d681a:	78c9      	ldrb	r1, [r1, #3]
   d681c:	9100      	str	r1, [sp, #0]
   d681e:	4629      	mov	r1, r5
   d6820:	f7ff ffea 	bl	d67f8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6824:	b003      	add	sp, #12
   d6826:	bd30      	pop	{r4, r5, pc}

000d6828 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6828:	7441      	strb	r1, [r0, #17]
   d682a:	4770      	bx	lr

000d682c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d682c:	4770      	bx	lr

000d682e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d682e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6830:	2100      	movs	r1, #0
   d6832:	7c00      	ldrb	r0, [r0, #16]
   d6834:	f7ff f888 	bl	d5948 <HAL_USB_USART_Receive_Data>
}
   d6838:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d683c:	bf28      	it	cs
   d683e:	f04f 30ff 	movcs.w	r0, #4294967295
   d6842:	bd08      	pop	{r3, pc}

000d6844 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6844:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6846:	2101      	movs	r1, #1
   d6848:	7c00      	ldrb	r0, [r0, #16]
   d684a:	f7ff f87d 	bl	d5948 <HAL_USB_USART_Receive_Data>
}
   d684e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6852:	bf28      	it	cs
   d6854:	f04f 30ff 	movcs.w	r0, #4294967295
   d6858:	bd08      	pop	{r3, pc}

000d685a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d685a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d685c:	7c00      	ldrb	r0, [r0, #16]
   d685e:	f7ff f86b 	bl	d5938 <HAL_USB_USART_Available_Data_For_Write>
}
   d6862:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6866:	bd08      	pop	{r3, pc}

000d6868 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6868:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d686a:	7c00      	ldrb	r0, [r0, #16]
   d686c:	f7ff f85c 	bl	d5928 <HAL_USB_USART_Available_Data>
}
   d6870:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6874:	bd08      	pop	{r3, pc}

000d6876 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6876:	7c00      	ldrb	r0, [r0, #16]
   d6878:	f7ff b876 	b.w	d5968 <HAL_USB_USART_Flush_Data>

000d687c <_ZN9USBSerialD0Ev>:
   d687c:	b510      	push	{r4, lr}
   d687e:	2114      	movs	r1, #20
   d6880:	4604      	mov	r4, r0
   d6882:	f000 fbef 	bl	d7064 <_ZdlPvj>
   d6886:	4620      	mov	r0, r4
   d6888:	bd10      	pop	{r4, pc}

000d688a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d688a:	b538      	push	{r3, r4, r5, lr}
   d688c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d688e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6890:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6892:	f7ff f851 	bl	d5938 <HAL_USB_USART_Available_Data_For_Write>
   d6896:	2800      	cmp	r0, #0
   d6898:	dc01      	bgt.n	d689e <_ZN9USBSerial5writeEh+0x14>
   d689a:	7c60      	ldrb	r0, [r4, #17]
   d689c:	b128      	cbz	r0, d68aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d689e:	4629      	mov	r1, r5
   d68a0:	7c20      	ldrb	r0, [r4, #16]
   d68a2:	f7ff f859 	bl	d5958 <HAL_USB_USART_Send_Data>
   d68a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d68aa:	bd38      	pop	{r3, r4, r5, pc}

000d68ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d68ac:	b510      	push	{r4, lr}
   d68ae:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d68b0:	2300      	movs	r3, #0
   d68b2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d68b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d68b8:	60a3      	str	r3, [r4, #8]
   d68ba:	4b05      	ldr	r3, [pc, #20]	; (d68d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d68bc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d68be:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d68c0:	4608      	mov	r0, r1
{
  _serial = serial;
   d68c2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d68c4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d68c6:	4611      	mov	r1, r2
   d68c8:	f7ff f81e 	bl	d5908 <HAL_USB_USART_Init>
}
   d68cc:	4620      	mov	r0, r4
   d68ce:	bd10      	pop	{r4, pc}
   d68d0:	000d9c60 	.word	0x000d9c60

000d68d4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d68d4:	2200      	movs	r2, #0
   d68d6:	7c00      	ldrb	r0, [r0, #16]
   d68d8:	f7ff b81e 	b.w	d5918 <HAL_USB_USART_Begin>

000d68dc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d68dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d68de:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d68e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d68e2:	2100      	movs	r1, #0
   d68e4:	f002 fdf7 	bl	d94d6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d68e8:	4620      	mov	r0, r4
   d68ea:	bd10      	pop	{r4, pc}

000d68ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d68ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d68ee:	4d0e      	ldr	r5, [pc, #56]	; (d6928 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d68f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d68f2:	a801      	add	r0, sp, #4
   d68f4:	f7ff fff2 	bl	d68dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d68f8:	6829      	ldr	r1, [r5, #0]
   d68fa:	f011 0401 	ands.w	r4, r1, #1
   d68fe:	d110      	bne.n	d6922 <_Z16_fetch_usbserialv+0x36>
   d6900:	4628      	mov	r0, r5
   d6902:	f7fd fbd0 	bl	d40a6 <__cxa_guard_acquire>
   d6906:	b160      	cbz	r0, d6922 <_Z16_fetch_usbserialv+0x36>
   d6908:	aa01      	add	r2, sp, #4
   d690a:	4621      	mov	r1, r4
   d690c:	4807      	ldr	r0, [pc, #28]	; (d692c <_Z16_fetch_usbserialv+0x40>)
   d690e:	f7ff ffcd 	bl	d68ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6912:	4628      	mov	r0, r5
   d6914:	f7fd fbcc 	bl	d40b0 <__cxa_guard_release>
   d6918:	4a05      	ldr	r2, [pc, #20]	; (d6930 <_Z16_fetch_usbserialv+0x44>)
   d691a:	4906      	ldr	r1, [pc, #24]	; (d6934 <_Z16_fetch_usbserialv+0x48>)
   d691c:	4803      	ldr	r0, [pc, #12]	; (d692c <_Z16_fetch_usbserialv+0x40>)
   d691e:	f000 fb93 	bl	d7048 <__aeabi_atexit>
	return _usbserial;
}
   d6922:	4802      	ldr	r0, [pc, #8]	; (d692c <_Z16_fetch_usbserialv+0x40>)
   d6924:	b007      	add	sp, #28
   d6926:	bd30      	pop	{r4, r5, pc}
   d6928:	2003e414 	.word	0x2003e414
   d692c:	2003e418 	.word	0x2003e418
   d6930:	2003e34c 	.word	0x2003e34c
   d6934:	000d682d 	.word	0x000d682d

000d6938 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6938:	4770      	bx	lr

000d693a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d693a:	7441      	strb	r1, [r0, #17]
   d693c:	4770      	bx	lr

000d693e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d693e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6940:	7c00      	ldrb	r0, [r0, #16]
   d6942:	f7fe ff81 	bl	d5848 <HAL_USART_Available_Data_For_Write>
}
   d6946:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d694a:	bd08      	pop	{r3, pc}

000d694c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d694c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d694e:	7c00      	ldrb	r0, [r0, #16]
   d6950:	f7fe ff52 	bl	d57f8 <HAL_USART_Available_Data>
}
   d6954:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6958:	bd08      	pop	{r3, pc}

000d695a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d695a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d695c:	7c00      	ldrb	r0, [r0, #16]
   d695e:	f7fe ff5b 	bl	d5818 <HAL_USART_Peek_Data>
}
   d6962:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6966:	bf28      	it	cs
   d6968:	f04f 30ff 	movcs.w	r0, #4294967295
   d696c:	bd08      	pop	{r3, pc}

000d696e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d696e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6970:	7c00      	ldrb	r0, [r0, #16]
   d6972:	f7fe ff49 	bl	d5808 <HAL_USART_Read_Data>
}
   d6976:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d697a:	bf28      	it	cs
   d697c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6980:	bd08      	pop	{r3, pc}

000d6982 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6982:	7c00      	ldrb	r0, [r0, #16]
   d6984:	f7fe bf50 	b.w	d5828 <HAL_USART_Flush_Data>

000d6988 <_ZN11USARTSerialD0Ev>:
   d6988:	b510      	push	{r4, lr}
   d698a:	2114      	movs	r1, #20
   d698c:	4604      	mov	r4, r0
   d698e:	f000 fb69 	bl	d7064 <_ZdlPvj>
   d6992:	4620      	mov	r0, r4
   d6994:	bd10      	pop	{r4, pc}

000d6996 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6996:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6998:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d699a:	4604      	mov	r4, r0
   d699c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d699e:	b925      	cbnz	r5, d69aa <_ZN11USARTSerial5writeEh+0x14>
   d69a0:	7c00      	ldrb	r0, [r0, #16]
   d69a2:	f7fe ff51 	bl	d5848 <HAL_USART_Available_Data_For_Write>
   d69a6:	2800      	cmp	r0, #0
   d69a8:	dd05      	ble.n	d69b6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d69aa:	4631      	mov	r1, r6
   d69ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d69ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d69b2:	f7fe bf19 	b.w	d57e8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d69b6:	4628      	mov	r0, r5
   d69b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d69bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d69bc:	b510      	push	{r4, lr}
   d69be:	4604      	mov	r4, r0
   d69c0:	4608      	mov	r0, r1
   d69c2:	4611      	mov	r1, r2
   d69c4:	2200      	movs	r2, #0
   d69c6:	6062      	str	r2, [r4, #4]
   d69c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d69cc:	60a2      	str	r2, [r4, #8]
   d69ce:	4a05      	ldr	r2, [pc, #20]	; (d69e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d69d0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d69d2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d69d4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d69d6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d69d8:	461a      	mov	r2, r3
   d69da:	f7fe fefd 	bl	d57d8 <HAL_USART_Init>
}
   d69de:	4620      	mov	r0, r4
   d69e0:	bd10      	pop	{r4, pc}
   d69e2:	bf00      	nop
   d69e4:	000d9c90 	.word	0x000d9c90

000d69e8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d69e8:	7c00      	ldrb	r0, [r0, #16]
   d69ea:	f7fe bf25 	b.w	d5838 <HAL_USART_Is_Enabled>
	...

000d69f0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d69f0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d69f2:	4d0c      	ldr	r5, [pc, #48]	; (d6a24 <_Z22__fetch_global_Serial1v+0x34>)
   d69f4:	6829      	ldr	r1, [r5, #0]
   d69f6:	f011 0401 	ands.w	r4, r1, #1
   d69fa:	d111      	bne.n	d6a20 <_Z22__fetch_global_Serial1v+0x30>
   d69fc:	4628      	mov	r0, r5
   d69fe:	f7fd fb52 	bl	d40a6 <__cxa_guard_acquire>
   d6a02:	b168      	cbz	r0, d6a20 <_Z22__fetch_global_Serial1v+0x30>
   d6a04:	4a08      	ldr	r2, [pc, #32]	; (d6a28 <_Z22__fetch_global_Serial1v+0x38>)
   d6a06:	4b09      	ldr	r3, [pc, #36]	; (d6a2c <_Z22__fetch_global_Serial1v+0x3c>)
   d6a08:	4809      	ldr	r0, [pc, #36]	; (d6a30 <_Z22__fetch_global_Serial1v+0x40>)
   d6a0a:	4621      	mov	r1, r4
   d6a0c:	f7ff ffd6 	bl	d69bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6a10:	4628      	mov	r0, r5
   d6a12:	f7fd fb4d 	bl	d40b0 <__cxa_guard_release>
   d6a16:	4a07      	ldr	r2, [pc, #28]	; (d6a34 <_Z22__fetch_global_Serial1v+0x44>)
   d6a18:	4907      	ldr	r1, [pc, #28]	; (d6a38 <_Z22__fetch_global_Serial1v+0x48>)
   d6a1a:	4805      	ldr	r0, [pc, #20]	; (d6a30 <_Z22__fetch_global_Serial1v+0x40>)
   d6a1c:	f000 fb14 	bl	d7048 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6a20:	4803      	ldr	r0, [pc, #12]	; (d6a30 <_Z22__fetch_global_Serial1v+0x40>)
   d6a22:	bd38      	pop	{r3, r4, r5, pc}
   d6a24:	2003e4c4 	.word	0x2003e4c4
   d6a28:	2003e4c8 	.word	0x2003e4c8
   d6a2c:	2003e440 	.word	0x2003e440
   d6a30:	2003e42c 	.word	0x2003e42c
   d6a34:	2003e34c 	.word	0x2003e34c
   d6a38:	000d6939 	.word	0x000d6939

000d6a3c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6a3c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a3e:	6883      	ldr	r3, [r0, #8]
   d6a40:	4604      	mov	r4, r0
   d6a42:	b90b      	cbnz	r3, d6a48 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6a44:	f000 fb21 	bl	d708a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a48:	68c3      	ldr	r3, [r0, #12]
   d6a4a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6a4c:	68a3      	ldr	r3, [r4, #8]
   d6a4e:	b11b      	cbz	r3, d6a58 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a50:	2203      	movs	r2, #3
   d6a52:	4621      	mov	r1, r4
   d6a54:	4620      	mov	r0, r4
   d6a56:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6a58:	4620      	mov	r0, r4
   d6a5a:	2110      	movs	r1, #16
}
   d6a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6a60:	f000 bb00 	b.w	d7064 <_ZdlPvj>

000d6a64 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6a64:	4770      	bx	lr

000d6a66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a68:	4606      	mov	r6, r0
   d6a6a:	4615      	mov	r5, r2
   d6a6c:	460c      	mov	r4, r1
   d6a6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a70:	42bc      	cmp	r4, r7
   d6a72:	d006      	beq.n	d6a82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6a74:	6833      	ldr	r3, [r6, #0]
   d6a76:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6a7a:	689b      	ldr	r3, [r3, #8]
   d6a7c:	4630      	mov	r0, r6
   d6a7e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6a80:	e7f6      	b.n	d6a70 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6a82:	4628      	mov	r0, r5
   d6a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a86 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6a86:	2200      	movs	r2, #0
   d6a88:	7c00      	ldrb	r0, [r0, #16]
   d6a8a:	f7fe befd 	b.w	d5888 <HAL_I2C_Write_Data>

000d6a8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6a8e:	2100      	movs	r1, #0
   d6a90:	7c00      	ldrb	r0, [r0, #16]
   d6a92:	f7fe bf01 	b.w	d5898 <HAL_I2C_Available_Data>

000d6a96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6a96:	2100      	movs	r1, #0
   d6a98:	7c00      	ldrb	r0, [r0, #16]
   d6a9a:	f7fe bf05 	b.w	d58a8 <HAL_I2C_Read_Data>

000d6a9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6a9e:	2100      	movs	r1, #0
   d6aa0:	7c00      	ldrb	r0, [r0, #16]
   d6aa2:	f7fe bf09 	b.w	d58b8 <HAL_I2C_Peek_Data>

000d6aa6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6aa6:	2100      	movs	r1, #0
   d6aa8:	7c00      	ldrb	r0, [r0, #16]
   d6aaa:	f7fe bf0d 	b.w	d58c8 <HAL_I2C_Flush_Data>

000d6aae <_ZN7TwoWireD0Ev>:
   d6aae:	b510      	push	{r4, lr}
   d6ab0:	2114      	movs	r1, #20
   d6ab2:	4604      	mov	r4, r0
   d6ab4:	f000 fad6 	bl	d7064 <_ZdlPvj>
   d6ab8:	4620      	mov	r0, r4
   d6aba:	bd10      	pop	{r4, pc}

000d6abc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6abc:	b510      	push	{r4, lr}
   d6abe:	4604      	mov	r4, r0
   d6ac0:	2300      	movs	r3, #0
   d6ac2:	6063      	str	r3, [r4, #4]
   d6ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ac8:	60a3      	str	r3, [r4, #8]
   d6aca:	4b04      	ldr	r3, [pc, #16]	; (d6adc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6acc:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6ace:	4608      	mov	r0, r1
   d6ad0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6ad2:	4611      	mov	r1, r2
   d6ad4:	f7fe ff08 	bl	d58e8 <HAL_I2C_Init>
}
   d6ad8:	4620      	mov	r0, r4
   d6ada:	bd10      	pop	{r4, pc}
   d6adc:	000d9cc0 	.word	0x000d9cc0

000d6ae0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6ae0:	2300      	movs	r3, #0
   d6ae2:	461a      	mov	r2, r3
   d6ae4:	4619      	mov	r1, r3
   d6ae6:	7c00      	ldrb	r0, [r0, #16]
   d6ae8:	f7fe beb6 	b.w	d5858 <HAL_I2C_Begin>

000d6aec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6aec:	b570      	push	{r4, r5, r6, lr}
   d6aee:	460c      	mov	r4, r1
   d6af0:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6af2:	2514      	movs	r5, #20
   d6af4:	4606      	mov	r6, r0
   d6af6:	462a      	mov	r2, r5
   d6af8:	2100      	movs	r1, #0
   d6afa:	a801      	add	r0, sp, #4
   d6afc:	f002 fceb 	bl	d94d6 <memset>
   d6b00:	7823      	ldrb	r3, [r4, #0]
   d6b02:	f88d 3008 	strb.w	r3, [sp, #8]
   d6b06:	6863      	ldr	r3, [r4, #4]
   d6b08:	9303      	str	r3, [sp, #12]
   d6b0a:	68e3      	ldr	r3, [r4, #12]
   d6b0c:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6b0e:	2200      	movs	r2, #0
   d6b10:	7a23      	ldrb	r3, [r4, #8]
   d6b12:	7c30      	ldrb	r0, [r6, #16]
   d6b14:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6b18:	a901      	add	r1, sp, #4
   d6b1a:	9305      	str	r3, [sp, #20]
   d6b1c:	f7fe feec 	bl	d58f8 <HAL_I2C_Request_Data_Ex>
}
   d6b20:	b006      	add	sp, #24
   d6b22:	bd70      	pop	{r4, r5, r6, pc}

000d6b24 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6b24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6b26:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6b28:	f88d 1000 	strb.w	r1, [sp]
   d6b2c:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6b30:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6b32:	bf18      	it	ne
   d6b34:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6b36:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d6b38:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6b3a:	f88d 3008 	strb.w	r3, [sp, #8]
   d6b3e:	f7ff ffd5 	bl	d6aec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6b42:	b005      	add	sp, #20
   d6b44:	f85d fb04 	ldr.w	pc, [sp], #4

000d6b48 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d6b48:	2301      	movs	r3, #1
   d6b4a:	f7ff bfeb 	b.w	d6b24 <_ZN7TwoWire11requestFromEhjh>

000d6b4e <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6b4e:	2200      	movs	r2, #0
   d6b50:	7c00      	ldrb	r0, [r0, #16]
   d6b52:	f7fe be89 	b.w	d5868 <HAL_I2C_Begin_Transmission>

000d6b56 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6b56:	b2c9      	uxtb	r1, r1
   d6b58:	f7ff bff9 	b.w	d6b4e <_ZN7TwoWire17beginTransmissionEh>

000d6b5c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6b5c:	2200      	movs	r2, #0
   d6b5e:	7c00      	ldrb	r0, [r0, #16]
   d6b60:	f7fe be8a 	b.w	d5878 <HAL_I2C_End_Transmission>

000d6b64 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6b64:	2101      	movs	r1, #1
   d6b66:	f7ff bff9 	b.w	d6b5c <_ZN7TwoWire15endTransmissionEh>

000d6b6a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6b6a:	2100      	movs	r1, #0
   d6b6c:	7c00      	ldrb	r0, [r0, #16]
   d6b6e:	f7fe beb3 	b.w	d58d8 <HAL_I2C_Is_Enabled>

000d6b72 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6b72:	2200      	movs	r2, #0
   d6b74:	4611      	mov	r1, r2
   d6b76:	6840      	ldr	r0, [r0, #4]
   d6b78:	f7fe bf72 	b.w	d5a60 <network_listening>

000d6b7c <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6b7c:	2200      	movs	r2, #0
   d6b7e:	4611      	mov	r1, r2
   d6b80:	6840      	ldr	r0, [r0, #4]
   d6b82:	f7fe bf7d 	b.w	d5a80 <network_get_listen_timeout>

000d6b86 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6b86:	2200      	movs	r2, #0
   d6b88:	6840      	ldr	r0, [r0, #4]
   d6b8a:	f7fe bf71 	b.w	d5a70 <network_set_listen_timeout>

000d6b8e <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6b8e:	2200      	movs	r2, #0
   d6b90:	f081 0101 	eor.w	r1, r1, #1
   d6b94:	6840      	ldr	r0, [r0, #4]
   d6b96:	f7fe bf5b 	b.w	d5a50 <network_listen>

000d6b9a <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6b9a:	2300      	movs	r3, #0
   d6b9c:	461a      	mov	r2, r3
   d6b9e:	2101      	movs	r1, #1
   d6ba0:	6840      	ldr	r0, [r0, #4]
   d6ba2:	f7fe bf4d 	b.w	d5a40 <network_off>

000d6ba6 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6ba6:	2300      	movs	r3, #0
   d6ba8:	461a      	mov	r2, r3
   d6baa:	4619      	mov	r1, r3
   d6bac:	6840      	ldr	r0, [r0, #4]
   d6bae:	f7fe bf3f 	b.w	d5a30 <network_on>

000d6bb2 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6bb2:	2200      	movs	r2, #0
   d6bb4:	4611      	mov	r1, r2
   d6bb6:	6840      	ldr	r0, [r0, #4]
   d6bb8:	f7fe bf32 	b.w	d5a20 <network_ready>

000d6bbc <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6bbc:	2200      	movs	r2, #0
   d6bbe:	4611      	mov	r1, r2
   d6bc0:	6840      	ldr	r0, [r0, #4]
   d6bc2:	f7fe bf1d 	b.w	d5a00 <network_connecting>

000d6bc6 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6bc6:	2200      	movs	r2, #0
   d6bc8:	2102      	movs	r1, #2
   d6bca:	6840      	ldr	r0, [r0, #4]
   d6bcc:	f7fe bf20 	b.w	d5a10 <network_disconnect>

000d6bd0 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6bd0:	2300      	movs	r3, #0
   d6bd2:	461a      	mov	r2, r3
   d6bd4:	6840      	ldr	r0, [r0, #4]
   d6bd6:	f7fe bf0b 	b.w	d59f0 <network_connect>

000d6bda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6bda:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6bdc:	4605      	mov	r5, r0
   d6bde:	b188      	cbz	r0, d6c04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6be0:	6804      	ldr	r4, [r0, #0]
   d6be2:	b14c      	cbz	r4, d6bf8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6be4:	68a3      	ldr	r3, [r4, #8]
   d6be6:	b11b      	cbz	r3, d6bf0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6be8:	2203      	movs	r2, #3
   d6bea:	4621      	mov	r1, r4
   d6bec:	4620      	mov	r0, r4
   d6bee:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6bf0:	2110      	movs	r1, #16
   d6bf2:	4620      	mov	r0, r4
   d6bf4:	f000 fa36 	bl	d7064 <_ZdlPvj>
   d6bf8:	4628      	mov	r0, r5
   d6bfa:	2114      	movs	r1, #20
      }
   d6bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c00:	f000 ba30 	b.w	d7064 <_ZdlPvj>
   d6c04:	bd38      	pop	{r3, r4, r5, pc}

000d6c06 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6c06:	b110      	cbz	r0, d6c0e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6c08:	6803      	ldr	r3, [r0, #0]
   d6c0a:	685b      	ldr	r3, [r3, #4]
   d6c0c:	4718      	bx	r3
   d6c0e:	4770      	bx	lr

000d6c10 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6c10:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6c12:	6803      	ldr	r3, [r0, #0]
   d6c14:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6c16:	b1bb      	cbz	r3, d6c48 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6c18:	6858      	ldr	r0, [r3, #4]
   d6c1a:	f7fe fdad 	bl	d5778 <os_thread_is_current>
   d6c1e:	b978      	cbnz	r0, d6c40 <_ZN6ThreadD1Ev+0x30>
   d6c20:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6c22:	7c5a      	ldrb	r2, [r3, #17]
   d6c24:	b912      	cbnz	r2, d6c2c <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6c26:	6858      	ldr	r0, [r3, #4]
   d6c28:	f7fe fdae 	bl	d5788 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6c2c:	6823      	ldr	r3, [r4, #0]
   d6c2e:	6858      	ldr	r0, [r3, #4]
   d6c30:	f7fe fdb2 	bl	d5798 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c34:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6c36:	2300      	movs	r3, #0
   d6c38:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6c3a:	b128      	cbz	r0, d6c48 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6c3c:	f7ff ffcd 	bl	d6bda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c40:	6820      	ldr	r0, [r4, #0]
   d6c42:	b108      	cbz	r0, d6c48 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6c44:	f7ff ffc9 	bl	d6bda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6c48:	4620      	mov	r0, r4
   d6c4a:	bd10      	pop	{r4, pc}

000d6c4c <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6c4c:	b538      	push	{r3, r4, r5, lr}
   d6c4e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c50:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6c54:	b108      	cbz	r0, d6c5a <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6c56:	f7fd fa24 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6c5a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6c5e:	b108      	cbz	r0, d6c64 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6c60:	f7fe fdaa 	bl	d57b8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c64:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6c68:	b135      	cbz	r5, d6c78 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6c6a:	4628      	mov	r0, r5
   d6c6c:	f7ff ffd0 	bl	d6c10 <_ZN6ThreadD1Ev>
   d6c70:	2104      	movs	r1, #4
   d6c72:	4628      	mov	r0, r5
   d6c74:	f000 f9f6 	bl	d7064 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6c78:	6820      	ldr	r0, [r4, #0]
   d6c7a:	b108      	cbz	r0, d6c80 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6c7c:	f7ff ffc3 	bl	d6c06 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6c80:	4620      	mov	r0, r4
   d6c82:	bd38      	pop	{r3, r4, r5, pc}

000d6c84 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6c84:	b510      	push	{r4, lr}
   d6c86:	4b04      	ldr	r3, [pc, #16]	; (d6c98 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6c88:	4604      	mov	r4, r0
   d6c8a:	f840 3b08 	str.w	r3, [r0], #8
   d6c8e:	f7ff ffdd 	bl	d6c4c <_ZN5spark11MeshPublishD1Ev>
   d6c92:	4620      	mov	r0, r4
   d6c94:	bd10      	pop	{r4, pc}
   d6c96:	bf00      	nop
   d6c98:	000d9ce8 	.word	0x000d9ce8

000d6c9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6c9c:	b538      	push	{r3, r4, r5, lr}
   d6c9e:	4c0e      	ldr	r4, [pc, #56]	; (d6cd8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6ca0:	4b0e      	ldr	r3, [pc, #56]	; (d6cdc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6ca2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6ca4:	2500      	movs	r5, #0
   d6ca6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6ca8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6cac:	6063      	str	r3, [r4, #4]
   d6cae:	60a5      	str	r5, [r4, #8]
   d6cb0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6cb4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6cb8:	f7fe fd76 	bl	d57a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6cbc:	4b08      	ldr	r3, [pc, #32]	; (d6ce0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6cbe:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6cc2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6cc6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6cc8:	4620      	mov	r0, r4
   d6cca:	4a06      	ldr	r2, [pc, #24]	; (d6ce4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6ccc:	4906      	ldr	r1, [pc, #24]	; (d6ce8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6cd2:	f000 b9b9 	b.w	d7048 <__aeabi_atexit>
   d6cd6:	bf00      	nop
   d6cd8:	2003e54c 	.word	0x2003e54c
   d6cdc:	000d9d50 	.word	0x000d9d50
   d6ce0:	000d9ce8 	.word	0x000d9ce8
   d6ce4:	2003e34c 	.word	0x2003e34c
   d6ce8:	000d6c85 	.word	0x000d6c85

000d6cec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6cec:	2200      	movs	r2, #0
   d6cee:	4611      	mov	r1, r2
   d6cf0:	6840      	ldr	r0, [r0, #4]
   d6cf2:	f7fe be95 	b.w	d5a20 <network_ready>

000d6cf6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6cf6:	2200      	movs	r2, #0
   d6cf8:	4611      	mov	r1, r2
   d6cfa:	6840      	ldr	r0, [r0, #4]
   d6cfc:	f7fe beb0 	b.w	d5a60 <network_listening>

000d6d00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6d00:	2200      	movs	r2, #0
   d6d02:	4611      	mov	r1, r2
   d6d04:	6840      	ldr	r0, [r0, #4]
   d6d06:	f7fe bebb 	b.w	d5a80 <network_get_listen_timeout>

000d6d0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6d0a:	2200      	movs	r2, #0
   d6d0c:	6840      	ldr	r0, [r0, #4]
   d6d0e:	f7fe beaf 	b.w	d5a70 <network_set_listen_timeout>

000d6d12 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d12:	2200      	movs	r2, #0
   d6d14:	f081 0101 	eor.w	r1, r1, #1
   d6d18:	6840      	ldr	r0, [r0, #4]
   d6d1a:	f7fe be99 	b.w	d5a50 <network_listen>

000d6d1e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6d1e:	2300      	movs	r3, #0
   d6d20:	461a      	mov	r2, r3
   d6d22:	4619      	mov	r1, r3
   d6d24:	6840      	ldr	r0, [r0, #4]
   d6d26:	f7fe be8b 	b.w	d5a40 <network_off>

000d6d2a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6d2a:	2300      	movs	r3, #0
   d6d2c:	461a      	mov	r2, r3
   d6d2e:	4619      	mov	r1, r3
   d6d30:	6840      	ldr	r0, [r0, #4]
   d6d32:	f7fe be7d 	b.w	d5a30 <network_on>

000d6d36 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d36:	2200      	movs	r2, #0
   d6d38:	4611      	mov	r1, r2
   d6d3a:	6840      	ldr	r0, [r0, #4]
   d6d3c:	f7fe be60 	b.w	d5a00 <network_connecting>

000d6d40 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d40:	2200      	movs	r2, #0
   d6d42:	2102      	movs	r1, #2
   d6d44:	6840      	ldr	r0, [r0, #4]
   d6d46:	f7fe be63 	b.w	d5a10 <network_disconnect>

000d6d4a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d4a:	2300      	movs	r3, #0
   d6d4c:	461a      	mov	r2, r3
   d6d4e:	6840      	ldr	r0, [r0, #4]
   d6d50:	f7fe be4e 	b.w	d59f0 <network_connect>

000d6d54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6d54:	4b02      	ldr	r3, [pc, #8]	; (d6d60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6d56:	2204      	movs	r2, #4
   d6d58:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6d5a:	4a02      	ldr	r2, [pc, #8]	; (d6d64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6d5c:	601a      	str	r2, [r3, #0]
   d6d5e:	4770      	bx	lr
   d6d60:	2003e720 	.word	0x2003e720
   d6d64:	000d9d1c 	.word	0x000d9d1c

000d6d68 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6d68:	2300      	movs	r3, #0
   d6d6a:	461a      	mov	r2, r3
   d6d6c:	6840      	ldr	r0, [r0, #4]
   d6d6e:	f7fe be3f 	b.w	d59f0 <network_connect>

000d6d72 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6d72:	2200      	movs	r2, #0
   d6d74:	2102      	movs	r1, #2
   d6d76:	6840      	ldr	r0, [r0, #4]
   d6d78:	f7fe be4a 	b.w	d5a10 <network_disconnect>

000d6d7c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6d7c:	2200      	movs	r2, #0
   d6d7e:	4611      	mov	r1, r2
   d6d80:	6840      	ldr	r0, [r0, #4]
   d6d82:	f7fe be3d 	b.w	d5a00 <network_connecting>

000d6d86 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6d86:	2200      	movs	r2, #0
   d6d88:	4611      	mov	r1, r2
   d6d8a:	6840      	ldr	r0, [r0, #4]
   d6d8c:	f7fe be48 	b.w	d5a20 <network_ready>

000d6d90 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6d90:	2300      	movs	r3, #0
   d6d92:	461a      	mov	r2, r3
   d6d94:	4619      	mov	r1, r3
   d6d96:	6840      	ldr	r0, [r0, #4]
   d6d98:	f7fe be4a 	b.w	d5a30 <network_on>

000d6d9c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6d9c:	2300      	movs	r3, #0
   d6d9e:	461a      	mov	r2, r3
   d6da0:	4619      	mov	r1, r3
   d6da2:	6840      	ldr	r0, [r0, #4]
   d6da4:	f7fe be4c 	b.w	d5a40 <network_off>

000d6da8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6da8:	2200      	movs	r2, #0
   d6daa:	f081 0101 	eor.w	r1, r1, #1
   d6dae:	6840      	ldr	r0, [r0, #4]
   d6db0:	f7fe be4e 	b.w	d5a50 <network_listen>

000d6db4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6db4:	2200      	movs	r2, #0
   d6db6:	6840      	ldr	r0, [r0, #4]
   d6db8:	f7fe be5a 	b.w	d5a70 <network_set_listen_timeout>

000d6dbc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6dbc:	2200      	movs	r2, #0
   d6dbe:	4611      	mov	r1, r2
   d6dc0:	6840      	ldr	r0, [r0, #4]
   d6dc2:	f7fe be5d 	b.w	d5a80 <network_get_listen_timeout>

000d6dc6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6dc6:	2200      	movs	r2, #0
   d6dc8:	4611      	mov	r1, r2
   d6dca:	6840      	ldr	r0, [r0, #4]
   d6dcc:	f7fe be48 	b.w	d5a60 <network_listening>

000d6dd0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6dd4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6dd6:	b095      	sub	sp, #84	; 0x54
   d6dd8:	4616      	mov	r6, r2
   d6dda:	460d      	mov	r5, r1
   d6ddc:	4607      	mov	r7, r0
    IPAddress addr;
   d6dde:	f7ff fceb 	bl	d67b8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6de2:	4621      	mov	r1, r4
   d6de4:	2220      	movs	r2, #32
   d6de6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6de8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6dea:	f002 fb74 	bl	d94d6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6dee:	2340      	movs	r3, #64	; 0x40
   d6df0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6df2:	4621      	mov	r1, r4
   d6df4:	466b      	mov	r3, sp
   d6df6:	aa0c      	add	r2, sp, #48	; 0x30
   d6df8:	4630      	mov	r0, r6
   d6dfa:	f7fe fc25 	bl	d5648 <netdb_getaddrinfo>
    if (!r) {
   d6dfe:	4604      	mov	r4, r0
   d6e00:	2800      	cmp	r0, #0
   d6e02:	d144      	bne.n	d6e8e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6e04:	4602      	mov	r2, r0
   d6e06:	2101      	movs	r1, #1
   d6e08:	6868      	ldr	r0, [r5, #4]
   d6e0a:	f7fe fe09 	bl	d5a20 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e0e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6e10:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e12:	4622      	mov	r2, r4
   d6e14:	6868      	ldr	r0, [r5, #4]
   d6e16:	f7fe fe03 	bl	d5a20 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e1a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6e1c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6e1e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e20:	2e00      	cmp	r6, #0
   d6e22:	d034      	beq.n	d6e8e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6e24:	2900      	cmp	r1, #0
   d6e26:	d132      	bne.n	d6e8e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6e28:	6873      	ldr	r3, [r6, #4]
   d6e2a:	2b02      	cmp	r3, #2
   d6e2c:	d002      	beq.n	d6e34 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6e2e:	2b0a      	cmp	r3, #10
   d6e30:	d009      	beq.n	d6e46 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6e32:	e02a      	b.n	d6e8a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6e34:	f1b8 0f00 	cmp.w	r8, #0
   d6e38:	d027      	beq.n	d6e8a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6e3a:	6971      	ldr	r1, [r6, #20]
   d6e3c:	4638      	mov	r0, r7
   d6e3e:	3104      	adds	r1, #4
   d6e40:	f7ff fce7 	bl	d6812 <_ZN9IPAddressaSEPKh>
   d6e44:	e020      	b.n	d6e88 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6e46:	f1b9 0f00 	cmp.w	r9, #0
   d6e4a:	d01e      	beq.n	d6e8a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6e4c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6e4e:	2211      	movs	r2, #17
   d6e50:	a801      	add	r0, sp, #4
   d6e52:	f002 fb40 	bl	d94d6 <memset>
                    a.v = 6;
   d6e56:	2306      	movs	r3, #6
   d6e58:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6e5c:	ad01      	add	r5, sp, #4
   d6e5e:	f104 0308 	add.w	r3, r4, #8
   d6e62:	3418      	adds	r4, #24
   d6e64:	6818      	ldr	r0, [r3, #0]
   d6e66:	6859      	ldr	r1, [r3, #4]
   d6e68:	462a      	mov	r2, r5
   d6e6a:	c203      	stmia	r2!, {r0, r1}
   d6e6c:	3308      	adds	r3, #8
   d6e6e:	42a3      	cmp	r3, r4
   d6e70:	4615      	mov	r5, r2
   d6e72:	d1f7      	bne.n	d6e64 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6e74:	a901      	add	r1, sp, #4
   d6e76:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6e78:	ad07      	add	r5, sp, #28
   d6e7a:	f7ff fcab 	bl	d67d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e80:	1d3c      	adds	r4, r7, #4
   d6e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6e84:	682b      	ldr	r3, [r5, #0]
   d6e86:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6e88:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6e8a:	69f6      	ldr	r6, [r6, #28]
   d6e8c:	e7c8      	b.n	d6e20 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6e8e:	9800      	ldr	r0, [sp, #0]
   d6e90:	f7fe fbd2 	bl	d5638 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6e94:	4638      	mov	r0, r7
   d6e96:	b015      	add	sp, #84	; 0x54
   d6e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6e9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6e9c:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6e9e:	4a03      	ldr	r2, [pc, #12]	; (d6eac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6ea0:	601a      	str	r2, [r3, #0]
   d6ea2:	2200      	movs	r2, #0
   d6ea4:	605a      	str	r2, [r3, #4]
   d6ea6:	4770      	bx	lr
   d6ea8:	2003e728 	.word	0x2003e728
   d6eac:	000d9d50 	.word	0x000d9d50

000d6eb0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6eb0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6eb2:	4e18      	ldr	r6, [pc, #96]	; (d6f14 <pinAvailable+0x64>)
   d6eb4:	6831      	ldr	r1, [r6, #0]
   d6eb6:	f011 0501 	ands.w	r5, r1, #1
   d6eba:	4604      	mov	r4, r0
   d6ebc:	d10a      	bne.n	d6ed4 <pinAvailable+0x24>
   d6ebe:	4630      	mov	r0, r6
   d6ec0:	f7fd f8f1 	bl	d40a6 <__cxa_guard_acquire>
   d6ec4:	b130      	cbz	r0, d6ed4 <pinAvailable+0x24>
   d6ec6:	4629      	mov	r1, r5
   d6ec8:	4813      	ldr	r0, [pc, #76]	; (d6f18 <pinAvailable+0x68>)
   d6eca:	f7fe fe75 	bl	d5bb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6ece:	4630      	mov	r0, r6
   d6ed0:	f7fd f8ee 	bl	d40b0 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6ed4:	4810      	ldr	r0, [pc, #64]	; (d6f18 <pinAvailable+0x68>)
   d6ed6:	f7fe ff19 	bl	d5d0c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6eda:	b128      	cbz	r0, d6ee8 <pinAvailable+0x38>
   d6edc:	f1a4 030b 	sub.w	r3, r4, #11
   d6ee0:	2b02      	cmp	r3, #2
   d6ee2:	d801      	bhi.n	d6ee8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6ee4:	2000      	movs	r0, #0
   d6ee6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6ee8:	f000 f888 	bl	d6ffc <_Z19__fetch_global_Wirev>
   d6eec:	f7ff fe3d 	bl	d6b6a <_ZN7TwoWire9isEnabledEv>
   d6ef0:	b108      	cbz	r0, d6ef6 <pinAvailable+0x46>
   d6ef2:	2c01      	cmp	r4, #1
   d6ef4:	d9f6      	bls.n	d6ee4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6ef6:	f7ff fd7b 	bl	d69f0 <_Z22__fetch_global_Serial1v>
   d6efa:	f7ff fd75 	bl	d69e8 <_ZN11USARTSerial9isEnabledEv>
   d6efe:	b118      	cbz	r0, d6f08 <pinAvailable+0x58>
   d6f00:	f1a4 0309 	sub.w	r3, r4, #9
   d6f04:	2b01      	cmp	r3, #1
   d6f06:	d9ed      	bls.n	d6ee4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6f08:	2c23      	cmp	r4, #35	; 0x23
   d6f0a:	bf8c      	ite	hi
   d6f0c:	2000      	movhi	r0, #0
   d6f0e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6f10:	bd70      	pop	{r4, r5, r6, pc}
   d6f12:	bf00      	nop
   d6f14:	2003e3cc 	.word	0x2003e3cc
   d6f18:	2003e3d0 	.word	0x2003e3d0

000d6f1c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6f1c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6f1e:	b538      	push	{r3, r4, r5, lr}
   d6f20:	4604      	mov	r4, r0
   d6f22:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6f24:	d80a      	bhi.n	d6f3c <pinMode+0x20>
   d6f26:	29ff      	cmp	r1, #255	; 0xff
   d6f28:	d008      	beq.n	d6f3c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6f2a:	f7ff ffc1 	bl	d6eb0 <pinAvailable>
   d6f2e:	b128      	cbz	r0, d6f3c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6f30:	4629      	mov	r1, r5
   d6f32:	4620      	mov	r0, r4
}
   d6f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6f38:	f7fe bb9e 	b.w	d5678 <HAL_Pin_Mode>
   d6f3c:	bd38      	pop	{r3, r4, r5, pc}

000d6f3e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6f3e:	b538      	push	{r3, r4, r5, lr}
   d6f40:	4604      	mov	r4, r0
   d6f42:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6f44:	f7fe fba0 	bl	d5688 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6f48:	28ff      	cmp	r0, #255	; 0xff
   d6f4a:	d010      	beq.n	d6f6e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6f4c:	2806      	cmp	r0, #6
   d6f4e:	d804      	bhi.n	d6f5a <digitalWrite+0x1c>
   d6f50:	234d      	movs	r3, #77	; 0x4d
   d6f52:	fa23 f000 	lsr.w	r0, r3, r0
   d6f56:	07c3      	lsls	r3, r0, #31
   d6f58:	d409      	bmi.n	d6f6e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6f5a:	4620      	mov	r0, r4
   d6f5c:	f7ff ffa8 	bl	d6eb0 <pinAvailable>
   d6f60:	b128      	cbz	r0, d6f6e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6f62:	4629      	mov	r1, r5
   d6f64:	4620      	mov	r0, r4
}
   d6f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6f6a:	f7fe bb95 	b.w	d5698 <HAL_GPIO_Write>
   d6f6e:	bd38      	pop	{r3, r4, r5, pc}

000d6f70 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6f70:	b510      	push	{r4, lr}
   d6f72:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6f74:	f7fe fb88 	bl	d5688 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6f78:	3804      	subs	r0, #4
   d6f7a:	b2c0      	uxtb	r0, r0
   d6f7c:	2801      	cmp	r0, #1
   d6f7e:	d908      	bls.n	d6f92 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6f80:	4620      	mov	r0, r4
   d6f82:	f7ff ff95 	bl	d6eb0 <pinAvailable>
   d6f86:	b120      	cbz	r0, d6f92 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6f88:	4620      	mov	r0, r4
}
   d6f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6f8e:	f7fe bb8b 	b.w	d56a8 <HAL_GPIO_Read>
}
   d6f92:	2000      	movs	r0, #0
   d6f94:	bd10      	pop	{r4, pc}

000d6f96 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6f96:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6f98:	b510      	push	{r4, lr}
   d6f9a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6f9c:	bf9c      	itt	ls
   d6f9e:	340e      	addls	r4, #14
   d6fa0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	f7ff ff84 	bl	d6eb0 <pinAvailable>
   d6fa8:	b150      	cbz	r0, d6fc0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6faa:	2103      	movs	r1, #3
   d6fac:	4620      	mov	r0, r4
   d6fae:	f7fe fb5b 	bl	d5668 <HAL_Validate_Pin_Function>
   d6fb2:	2803      	cmp	r0, #3
   d6fb4:	d104      	bne.n	d6fc0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6fb6:	4620      	mov	r0, r4
}
   d6fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6fbc:	f7fe bb7c 	b.w	d56b8 <HAL_ADC_Read>
}
   d6fc0:	2000      	movs	r0, #0
   d6fc2:	bd10      	pop	{r4, pc}

000d6fc4 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d6fc4:	f7fe bb80 	b.w	d56c8 <HAL_Pulse_In>

000d6fc8 <_Z17acquireWireBufferv>:
   d6fc8:	b570      	push	{r4, r5, r6, lr}
   d6fca:	4604      	mov	r4, r0
   d6fcc:	2514      	movs	r5, #20
   d6fce:	462a      	mov	r2, r5
   d6fd0:	4e09      	ldr	r6, [pc, #36]	; (d6ff8 <_Z17acquireWireBufferv+0x30>)
   d6fd2:	2100      	movs	r1, #0
   d6fd4:	f002 fa7f 	bl	d94d6 <memset>
   d6fd8:	8025      	strh	r5, [r4, #0]
   d6fda:	2520      	movs	r5, #32
   d6fdc:	4631      	mov	r1, r6
   d6fde:	60a5      	str	r5, [r4, #8]
   d6fe0:	6125      	str	r5, [r4, #16]
   d6fe2:	4628      	mov	r0, r5
   d6fe4:	f000 f840 	bl	d7068 <_ZnajRKSt9nothrow_t>
   d6fe8:	4631      	mov	r1, r6
   d6fea:	6060      	str	r0, [r4, #4]
   d6fec:	4628      	mov	r0, r5
   d6fee:	f000 f83b 	bl	d7068 <_ZnajRKSt9nothrow_t>
   d6ff2:	60e0      	str	r0, [r4, #12]
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	bd70      	pop	{r4, r5, r6, pc}
   d6ff8:	000d9d7c 	.word	0x000d9d7c

000d6ffc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6ffc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ffe:	4d0e      	ldr	r5, [pc, #56]	; (d7038 <_Z19__fetch_global_Wirev+0x3c>)
   d7000:	6829      	ldr	r1, [r5, #0]
   d7002:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7006:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7008:	d113      	bne.n	d7032 <_Z19__fetch_global_Wirev+0x36>
   d700a:	4628      	mov	r0, r5
   d700c:	f7fd f84b 	bl	d40a6 <__cxa_guard_acquire>
   d7010:	b178      	cbz	r0, d7032 <_Z19__fetch_global_Wirev+0x36>
   d7012:	a801      	add	r0, sp, #4
   d7014:	f7ff ffd8 	bl	d6fc8 <_Z17acquireWireBufferv>
   d7018:	aa01      	add	r2, sp, #4
   d701a:	4621      	mov	r1, r4
   d701c:	4807      	ldr	r0, [pc, #28]	; (d703c <_Z19__fetch_global_Wirev+0x40>)
   d701e:	f7ff fd4d 	bl	d6abc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7022:	4628      	mov	r0, r5
   d7024:	f7fd f844 	bl	d40b0 <__cxa_guard_release>
   d7028:	4a05      	ldr	r2, [pc, #20]	; (d7040 <_Z19__fetch_global_Wirev+0x44>)
   d702a:	4906      	ldr	r1, [pc, #24]	; (d7044 <_Z19__fetch_global_Wirev+0x48>)
   d702c:	4803      	ldr	r0, [pc, #12]	; (d703c <_Z19__fetch_global_Wirev+0x40>)
   d702e:	f000 f80b 	bl	d7048 <__aeabi_atexit>
	return wire;
}
   d7032:	4802      	ldr	r0, [pc, #8]	; (d703c <_Z19__fetch_global_Wirev+0x40>)
   d7034:	b007      	add	sp, #28
   d7036:	bd30      	pop	{r4, r5, pc}
   d7038:	2003e734 	.word	0x2003e734
   d703c:	2003e738 	.word	0x2003e738
   d7040:	2003e34c 	.word	0x2003e34c
   d7044:	000d6a65 	.word	0x000d6a65

000d7048 <__aeabi_atexit>:
   d7048:	460b      	mov	r3, r1
   d704a:	4601      	mov	r1, r0
   d704c:	4618      	mov	r0, r3
   d704e:	f002 ba29 	b.w	d94a4 <__cxa_atexit>
	...

000d7054 <_ZSt15get_new_handlerv>:
   d7054:	4b02      	ldr	r3, [pc, #8]	; (d7060 <_ZSt15get_new_handlerv+0xc>)
   d7056:	6818      	ldr	r0, [r3, #0]
   d7058:	f3bf 8f5f 	dmb	sy
   d705c:	4770      	bx	lr
   d705e:	bf00      	nop
   d7060:	2003e74c 	.word	0x2003e74c

000d7064 <_ZdlPvj>:
   d7064:	f7fd b81b 	b.w	d409e <_ZdlPv>

000d7068 <_ZnajRKSt9nothrow_t>:
   d7068:	f000 b800 	b.w	d706c <_ZnwjRKSt9nothrow_t>

000d706c <_ZnwjRKSt9nothrow_t>:
   d706c:	b510      	push	{r4, lr}
   d706e:	2800      	cmp	r0, #0
   d7070:	bf14      	ite	ne
   d7072:	4604      	movne	r4, r0
   d7074:	2401      	moveq	r4, #1
   d7076:	4620      	mov	r0, r4
   d7078:	f7fe fd22 	bl	d5ac0 <malloc>
   d707c:	b920      	cbnz	r0, d7088 <_ZnwjRKSt9nothrow_t+0x1c>
   d707e:	f7ff ffe9 	bl	d7054 <_ZSt15get_new_handlerv>
   d7082:	b108      	cbz	r0, d7088 <_ZnwjRKSt9nothrow_t+0x1c>
   d7084:	4780      	blx	r0
   d7086:	e7f6      	b.n	d7076 <_ZnwjRKSt9nothrow_t+0xa>
   d7088:	bd10      	pop	{r4, pc}

000d708a <_ZSt25__throw_bad_function_callv>:
   d708a:	b508      	push	{r3, lr}
   d708c:	f7fe fd38 	bl	d5b00 <abort>

000d7090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7090:	4b18      	ldr	r3, [pc, #96]	; (d70f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7092:	681a      	ldr	r2, [r3, #0]
   d7094:	07d1      	lsls	r1, r2, #31
   d7096:	bf5c      	itt	pl
   d7098:	2201      	movpl	r2, #1
   d709a:	601a      	strpl	r2, [r3, #0]
   d709c:	4b16      	ldr	r3, [pc, #88]	; (d70f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d709e:	681a      	ldr	r2, [r3, #0]
   d70a0:	07d2      	lsls	r2, r2, #31
   d70a2:	bf5c      	itt	pl
   d70a4:	2201      	movpl	r2, #1
   d70a6:	601a      	strpl	r2, [r3, #0]
   d70a8:	4b14      	ldr	r3, [pc, #80]	; (d70fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d70aa:	681a      	ldr	r2, [r3, #0]
   d70ac:	07d0      	lsls	r0, r2, #31
   d70ae:	bf5c      	itt	pl
   d70b0:	2201      	movpl	r2, #1
   d70b2:	601a      	strpl	r2, [r3, #0]
   d70b4:	4b12      	ldr	r3, [pc, #72]	; (d7100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d70b6:	681a      	ldr	r2, [r3, #0]
   d70b8:	07d1      	lsls	r1, r2, #31
   d70ba:	bf5c      	itt	pl
   d70bc:	2201      	movpl	r2, #1
   d70be:	601a      	strpl	r2, [r3, #0]
   d70c0:	4b10      	ldr	r3, [pc, #64]	; (d7104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d70c2:	681a      	ldr	r2, [r3, #0]
   d70c4:	07d2      	lsls	r2, r2, #31
   d70c6:	bf5c      	itt	pl
   d70c8:	2201      	movpl	r2, #1
   d70ca:	601a      	strpl	r2, [r3, #0]
   d70cc:	4b0e      	ldr	r3, [pc, #56]	; (d7108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d70ce:	681a      	ldr	r2, [r3, #0]
   d70d0:	07d0      	lsls	r0, r2, #31
   d70d2:	bf5c      	itt	pl
   d70d4:	2201      	movpl	r2, #1
   d70d6:	601a      	strpl	r2, [r3, #0]
   d70d8:	4b0c      	ldr	r3, [pc, #48]	; (d710c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d70da:	681a      	ldr	r2, [r3, #0]
   d70dc:	07d1      	lsls	r1, r2, #31
   d70de:	bf5c      	itt	pl
   d70e0:	2201      	movpl	r2, #1
   d70e2:	601a      	strpl	r2, [r3, #0]
   d70e4:	4b0a      	ldr	r3, [pc, #40]	; (d7110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d70e6:	681a      	ldr	r2, [r3, #0]
   d70e8:	07d2      	lsls	r2, r2, #31
   d70ea:	bf5c      	itt	pl
   d70ec:	2201      	movpl	r2, #1
   d70ee:	601a      	strpl	r2, [r3, #0]
   d70f0:	4770      	bx	lr
   d70f2:	bf00      	nop
   d70f4:	2003e76c 	.word	0x2003e76c
   d70f8:	2003e768 	.word	0x2003e768
   d70fc:	2003e764 	.word	0x2003e764
   d7100:	2003e760 	.word	0x2003e760
   d7104:	2003e75c 	.word	0x2003e75c
   d7108:	2003e758 	.word	0x2003e758
   d710c:	2003e754 	.word	0x2003e754
   d7110:	2003e750 	.word	0x2003e750

000d7114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7114:	4b24      	ldr	r3, [pc, #144]	; (d71a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7116:	681a      	ldr	r2, [r3, #0]
   d7118:	07d0      	lsls	r0, r2, #31
   d711a:	bf5c      	itt	pl
   d711c:	2201      	movpl	r2, #1
   d711e:	601a      	strpl	r2, [r3, #0]
   d7120:	4b22      	ldr	r3, [pc, #136]	; (d71ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7122:	681a      	ldr	r2, [r3, #0]
   d7124:	07d1      	lsls	r1, r2, #31
   d7126:	bf5c      	itt	pl
   d7128:	2201      	movpl	r2, #1
   d712a:	601a      	strpl	r2, [r3, #0]
   d712c:	4b20      	ldr	r3, [pc, #128]	; (d71b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d712e:	681a      	ldr	r2, [r3, #0]
   d7130:	07d2      	lsls	r2, r2, #31
   d7132:	bf5c      	itt	pl
   d7134:	2201      	movpl	r2, #1
   d7136:	601a      	strpl	r2, [r3, #0]
   d7138:	4b1e      	ldr	r3, [pc, #120]	; (d71b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d713a:	681a      	ldr	r2, [r3, #0]
   d713c:	07d0      	lsls	r0, r2, #31
   d713e:	bf5c      	itt	pl
   d7140:	2201      	movpl	r2, #1
   d7142:	601a      	strpl	r2, [r3, #0]
   d7144:	4b1c      	ldr	r3, [pc, #112]	; (d71b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7146:	681a      	ldr	r2, [r3, #0]
   d7148:	07d1      	lsls	r1, r2, #31
   d714a:	bf5c      	itt	pl
   d714c:	2201      	movpl	r2, #1
   d714e:	601a      	strpl	r2, [r3, #0]
   d7150:	4b1a      	ldr	r3, [pc, #104]	; (d71bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7152:	681a      	ldr	r2, [r3, #0]
   d7154:	07d2      	lsls	r2, r2, #31
   d7156:	bf5c      	itt	pl
   d7158:	2201      	movpl	r2, #1
   d715a:	601a      	strpl	r2, [r3, #0]
   d715c:	4b18      	ldr	r3, [pc, #96]	; (d71c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d715e:	681a      	ldr	r2, [r3, #0]
   d7160:	07d0      	lsls	r0, r2, #31
   d7162:	bf5c      	itt	pl
   d7164:	2201      	movpl	r2, #1
   d7166:	601a      	strpl	r2, [r3, #0]
   d7168:	4b16      	ldr	r3, [pc, #88]	; (d71c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d716a:	681a      	ldr	r2, [r3, #0]
   d716c:	07d1      	lsls	r1, r2, #31
   d716e:	bf5c      	itt	pl
   d7170:	2201      	movpl	r2, #1
   d7172:	601a      	strpl	r2, [r3, #0]
   d7174:	4b14      	ldr	r3, [pc, #80]	; (d71c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7176:	681a      	ldr	r2, [r3, #0]
   d7178:	07d2      	lsls	r2, r2, #31
   d717a:	bf5c      	itt	pl
   d717c:	2201      	movpl	r2, #1
   d717e:	601a      	strpl	r2, [r3, #0]
   d7180:	4b12      	ldr	r3, [pc, #72]	; (d71cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7182:	681a      	ldr	r2, [r3, #0]
   d7184:	07d0      	lsls	r0, r2, #31
   d7186:	bf5c      	itt	pl
   d7188:	2201      	movpl	r2, #1
   d718a:	601a      	strpl	r2, [r3, #0]
   d718c:	4b10      	ldr	r3, [pc, #64]	; (d71d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d718e:	681a      	ldr	r2, [r3, #0]
   d7190:	07d1      	lsls	r1, r2, #31
   d7192:	bf5c      	itt	pl
   d7194:	2201      	movpl	r2, #1
   d7196:	601a      	strpl	r2, [r3, #0]
   d7198:	4b0e      	ldr	r3, [pc, #56]	; (d71d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d719a:	681a      	ldr	r2, [r3, #0]
   d719c:	07d2      	lsls	r2, r2, #31
   d719e:	bf5c      	itt	pl
   d71a0:	2201      	movpl	r2, #1
   d71a2:	601a      	strpl	r2, [r3, #0]
   d71a4:	4770      	bx	lr
   d71a6:	bf00      	nop
   d71a8:	2003e79c 	.word	0x2003e79c
   d71ac:	2003e798 	.word	0x2003e798
   d71b0:	2003e794 	.word	0x2003e794
   d71b4:	2003e790 	.word	0x2003e790
   d71b8:	2003e78c 	.word	0x2003e78c
   d71bc:	2003e788 	.word	0x2003e788
   d71c0:	2003e784 	.word	0x2003e784
   d71c4:	2003e780 	.word	0x2003e780
   d71c8:	2003e77c 	.word	0x2003e77c
   d71cc:	2003e778 	.word	0x2003e778
   d71d0:	2003e774 	.word	0x2003e774
   d71d4:	2003e770 	.word	0x2003e770

000d71d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d71d8:	4b24      	ldr	r3, [pc, #144]	; (d726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d71da:	681a      	ldr	r2, [r3, #0]
   d71dc:	07d0      	lsls	r0, r2, #31
   d71de:	bf5c      	itt	pl
   d71e0:	2201      	movpl	r2, #1
   d71e2:	601a      	strpl	r2, [r3, #0]
   d71e4:	4b22      	ldr	r3, [pc, #136]	; (d7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d71e6:	681a      	ldr	r2, [r3, #0]
   d71e8:	07d1      	lsls	r1, r2, #31
   d71ea:	bf5c      	itt	pl
   d71ec:	2201      	movpl	r2, #1
   d71ee:	601a      	strpl	r2, [r3, #0]
   d71f0:	4b20      	ldr	r3, [pc, #128]	; (d7274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d71f2:	681a      	ldr	r2, [r3, #0]
   d71f4:	07d2      	lsls	r2, r2, #31
   d71f6:	bf5c      	itt	pl
   d71f8:	2201      	movpl	r2, #1
   d71fa:	601a      	strpl	r2, [r3, #0]
   d71fc:	4b1e      	ldr	r3, [pc, #120]	; (d7278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d71fe:	681a      	ldr	r2, [r3, #0]
   d7200:	07d0      	lsls	r0, r2, #31
   d7202:	bf5c      	itt	pl
   d7204:	2201      	movpl	r2, #1
   d7206:	601a      	strpl	r2, [r3, #0]
   d7208:	4b1c      	ldr	r3, [pc, #112]	; (d727c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d720a:	681a      	ldr	r2, [r3, #0]
   d720c:	07d1      	lsls	r1, r2, #31
   d720e:	bf5c      	itt	pl
   d7210:	2201      	movpl	r2, #1
   d7212:	601a      	strpl	r2, [r3, #0]
   d7214:	4b1a      	ldr	r3, [pc, #104]	; (d7280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7216:	681a      	ldr	r2, [r3, #0]
   d7218:	07d2      	lsls	r2, r2, #31
   d721a:	bf5c      	itt	pl
   d721c:	2201      	movpl	r2, #1
   d721e:	601a      	strpl	r2, [r3, #0]
   d7220:	4b18      	ldr	r3, [pc, #96]	; (d7284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7222:	681a      	ldr	r2, [r3, #0]
   d7224:	07d0      	lsls	r0, r2, #31
   d7226:	bf5c      	itt	pl
   d7228:	2201      	movpl	r2, #1
   d722a:	601a      	strpl	r2, [r3, #0]
   d722c:	4b16      	ldr	r3, [pc, #88]	; (d7288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d722e:	681a      	ldr	r2, [r3, #0]
   d7230:	07d1      	lsls	r1, r2, #31
   d7232:	bf5c      	itt	pl
   d7234:	2201      	movpl	r2, #1
   d7236:	601a      	strpl	r2, [r3, #0]
   d7238:	4b14      	ldr	r3, [pc, #80]	; (d728c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d723a:	681a      	ldr	r2, [r3, #0]
   d723c:	07d2      	lsls	r2, r2, #31
   d723e:	bf5c      	itt	pl
   d7240:	2201      	movpl	r2, #1
   d7242:	601a      	strpl	r2, [r3, #0]
   d7244:	4b12      	ldr	r3, [pc, #72]	; (d7290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7246:	681a      	ldr	r2, [r3, #0]
   d7248:	07d0      	lsls	r0, r2, #31
   d724a:	bf5c      	itt	pl
   d724c:	2201      	movpl	r2, #1
   d724e:	601a      	strpl	r2, [r3, #0]
   d7250:	4b10      	ldr	r3, [pc, #64]	; (d7294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7252:	681a      	ldr	r2, [r3, #0]
   d7254:	07d1      	lsls	r1, r2, #31
   d7256:	bf5c      	itt	pl
   d7258:	2201      	movpl	r2, #1
   d725a:	601a      	strpl	r2, [r3, #0]
   d725c:	4b0e      	ldr	r3, [pc, #56]	; (d7298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d725e:	681a      	ldr	r2, [r3, #0]
   d7260:	07d2      	lsls	r2, r2, #31
   d7262:	bf5c      	itt	pl
   d7264:	2201      	movpl	r2, #1
   d7266:	601a      	strpl	r2, [r3, #0]
   d7268:	4770      	bx	lr
   d726a:	bf00      	nop
   d726c:	2003e7cc 	.word	0x2003e7cc
   d7270:	2003e7c8 	.word	0x2003e7c8
   d7274:	2003e7c4 	.word	0x2003e7c4
   d7278:	2003e7c0 	.word	0x2003e7c0
   d727c:	2003e7bc 	.word	0x2003e7bc
   d7280:	2003e7b8 	.word	0x2003e7b8
   d7284:	2003e7b4 	.word	0x2003e7b4
   d7288:	2003e7b0 	.word	0x2003e7b0
   d728c:	2003e7ac 	.word	0x2003e7ac
   d7290:	2003e7a8 	.word	0x2003e7a8
   d7294:	2003e7a4 	.word	0x2003e7a4
   d7298:	2003e7a0 	.word	0x2003e7a0

000d729c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d729c:	4b18      	ldr	r3, [pc, #96]	; (d7300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d729e:	681a      	ldr	r2, [r3, #0]
   d72a0:	07d1      	lsls	r1, r2, #31
   d72a2:	bf5c      	itt	pl
   d72a4:	2201      	movpl	r2, #1
   d72a6:	601a      	strpl	r2, [r3, #0]
   d72a8:	4b16      	ldr	r3, [pc, #88]	; (d7304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d72aa:	681a      	ldr	r2, [r3, #0]
   d72ac:	07d2      	lsls	r2, r2, #31
   d72ae:	bf5c      	itt	pl
   d72b0:	2201      	movpl	r2, #1
   d72b2:	601a      	strpl	r2, [r3, #0]
   d72b4:	4b14      	ldr	r3, [pc, #80]	; (d7308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d72b6:	681a      	ldr	r2, [r3, #0]
   d72b8:	07d0      	lsls	r0, r2, #31
   d72ba:	bf5c      	itt	pl
   d72bc:	2201      	movpl	r2, #1
   d72be:	601a      	strpl	r2, [r3, #0]
   d72c0:	4b12      	ldr	r3, [pc, #72]	; (d730c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d72c2:	681a      	ldr	r2, [r3, #0]
   d72c4:	07d1      	lsls	r1, r2, #31
   d72c6:	bf5c      	itt	pl
   d72c8:	2201      	movpl	r2, #1
   d72ca:	601a      	strpl	r2, [r3, #0]
   d72cc:	4b10      	ldr	r3, [pc, #64]	; (d7310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d72ce:	681a      	ldr	r2, [r3, #0]
   d72d0:	07d2      	lsls	r2, r2, #31
   d72d2:	bf5c      	itt	pl
   d72d4:	2201      	movpl	r2, #1
   d72d6:	601a      	strpl	r2, [r3, #0]
   d72d8:	4b0e      	ldr	r3, [pc, #56]	; (d7314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d72da:	681a      	ldr	r2, [r3, #0]
   d72dc:	07d0      	lsls	r0, r2, #31
   d72de:	bf5c      	itt	pl
   d72e0:	2201      	movpl	r2, #1
   d72e2:	601a      	strpl	r2, [r3, #0]
   d72e4:	4b0c      	ldr	r3, [pc, #48]	; (d7318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d72e6:	681a      	ldr	r2, [r3, #0]
   d72e8:	07d1      	lsls	r1, r2, #31
   d72ea:	bf5c      	itt	pl
   d72ec:	2201      	movpl	r2, #1
   d72ee:	601a      	strpl	r2, [r3, #0]
   d72f0:	4b0a      	ldr	r3, [pc, #40]	; (d731c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d72f2:	681a      	ldr	r2, [r3, #0]
   d72f4:	07d2      	lsls	r2, r2, #31
   d72f6:	bf5c      	itt	pl
   d72f8:	2201      	movpl	r2, #1
   d72fa:	601a      	strpl	r2, [r3, #0]
   d72fc:	4770      	bx	lr
   d72fe:	bf00      	nop
   d7300:	2003e7ec 	.word	0x2003e7ec
   d7304:	2003e7e8 	.word	0x2003e7e8
   d7308:	2003e7e4 	.word	0x2003e7e4
   d730c:	2003e7e0 	.word	0x2003e7e0
   d7310:	2003e7dc 	.word	0x2003e7dc
   d7314:	2003e7d8 	.word	0x2003e7d8
   d7318:	2003e7d4 	.word	0x2003e7d4
   d731c:	2003e7d0 	.word	0x2003e7d0

000d7320 <pow>:
   d7320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7324:	ed2d 8b02 	vpush	{d8}
   d7328:	f8df a324 	ldr.w	sl, [pc, #804]	; d7650 <pow+0x330>
   d732c:	b08b      	sub	sp, #44	; 0x2c
   d732e:	ec57 6b10 	vmov	r6, r7, d0
   d7332:	ec55 4b11 	vmov	r4, r5, d1
   d7336:	f000 f98f 	bl	d7658 <__ieee754_pow>
   d733a:	f99a 8000 	ldrsb.w	r8, [sl]
   d733e:	eeb0 8a40 	vmov.f32	s16, s0
   d7342:	eef0 8a60 	vmov.f32	s17, s1
   d7346:	f1b8 3fff 	cmp.w	r8, #4294967295
   d734a:	d048      	beq.n	d73de <pow+0xbe>
   d734c:	4622      	mov	r2, r4
   d734e:	462b      	mov	r3, r5
   d7350:	4620      	mov	r0, r4
   d7352:	4629      	mov	r1, r5
   d7354:	f001 fd6e 	bl	d8e34 <__aeabi_dcmpun>
   d7358:	4683      	mov	fp, r0
   d735a:	2800      	cmp	r0, #0
   d735c:	d13f      	bne.n	d73de <pow+0xbe>
   d735e:	4632      	mov	r2, r6
   d7360:	463b      	mov	r3, r7
   d7362:	4630      	mov	r0, r6
   d7364:	4639      	mov	r1, r7
   d7366:	f001 fd65 	bl	d8e34 <__aeabi_dcmpun>
   d736a:	4681      	mov	r9, r0
   d736c:	2800      	cmp	r0, #0
   d736e:	f040 8090 	bne.w	d7492 <pow+0x172>
   d7372:	4630      	mov	r0, r6
   d7374:	4639      	mov	r1, r7
   d7376:	2200      	movs	r2, #0
   d7378:	2300      	movs	r3, #0
   d737a:	f001 fd29 	bl	d8dd0 <__aeabi_dcmpeq>
   d737e:	2800      	cmp	r0, #0
   d7380:	d036      	beq.n	d73f0 <pow+0xd0>
   d7382:	2200      	movs	r2, #0
   d7384:	2300      	movs	r3, #0
   d7386:	4620      	mov	r0, r4
   d7388:	4629      	mov	r1, r5
   d738a:	f001 fd21 	bl	d8dd0 <__aeabi_dcmpeq>
   d738e:	4683      	mov	fp, r0
   d7390:	b1b8      	cbz	r0, d73c2 <pow+0xa2>
   d7392:	ed9f 7ba5 	vldr	d7, [pc, #660]	; d7628 <pow+0x308>
   d7396:	2201      	movs	r2, #1
   d7398:	4ba9      	ldr	r3, [pc, #676]	; (d7640 <pow+0x320>)
   d739a:	f8cd 9020 	str.w	r9, [sp, #32]
   d739e:	9200      	str	r2, [sp, #0]
   d73a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d73a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d73a8:	ed8d 7b06 	vstr	d7, [sp, #24]
   d73ac:	9301      	str	r3, [sp, #4]
   d73ae:	f1b8 0f00 	cmp.w	r8, #0
   d73b2:	d05b      	beq.n	d746c <pow+0x14c>
   d73b4:	ed9f 0b9e 	vldr	d0, [pc, #632]	; d7630 <pow+0x310>
   d73b8:	b00b      	add	sp, #44	; 0x2c
   d73ba:	ecbd 8b02 	vpop	{d8}
   d73be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d73c2:	ec45 4b10 	vmov	d0, r4, r5
   d73c6:	f000 ffa7 	bl	d8318 <finite>
   d73ca:	b140      	cbz	r0, d73de <pow+0xbe>
   d73cc:	2200      	movs	r2, #0
   d73ce:	2300      	movs	r3, #0
   d73d0:	4620      	mov	r0, r4
   d73d2:	4629      	mov	r1, r5
   d73d4:	f001 fd06 	bl	d8de4 <__aeabi_dcmplt>
   d73d8:	2800      	cmp	r0, #0
   d73da:	f040 80c5 	bne.w	d7568 <pow+0x248>
   d73de:	eeb0 0a48 	vmov.f32	s0, s16
   d73e2:	eef0 0a68 	vmov.f32	s1, s17
   d73e6:	b00b      	add	sp, #44	; 0x2c
   d73e8:	ecbd 8b02 	vpop	{d8}
   d73ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d73f0:	eeb0 0a48 	vmov.f32	s0, s16
   d73f4:	eef0 0a68 	vmov.f32	s1, s17
   d73f8:	f000 ff8e 	bl	d8318 <finite>
   d73fc:	4680      	mov	r8, r0
   d73fe:	2800      	cmp	r0, #0
   d7400:	d061      	beq.n	d74c6 <pow+0x1a6>
   d7402:	f04f 0800 	mov.w	r8, #0
   d7406:	f04f 0900 	mov.w	r9, #0
   d740a:	ec51 0b18 	vmov	r0, r1, d8
   d740e:	4642      	mov	r2, r8
   d7410:	464b      	mov	r3, r9
   d7412:	f001 fcdd 	bl	d8dd0 <__aeabi_dcmpeq>
   d7416:	2800      	cmp	r0, #0
   d7418:	d0e1      	beq.n	d73de <pow+0xbe>
   d741a:	ec47 6b10 	vmov	d0, r6, r7
   d741e:	f000 ff7b 	bl	d8318 <finite>
   d7422:	2800      	cmp	r0, #0
   d7424:	d0db      	beq.n	d73de <pow+0xbe>
   d7426:	ec45 4b10 	vmov	d0, r4, r5
   d742a:	f000 ff75 	bl	d8318 <finite>
   d742e:	2800      	cmp	r0, #0
   d7430:	d0d5      	beq.n	d73de <pow+0xbe>
   d7432:	f99a 3000 	ldrsb.w	r3, [sl]
   d7436:	4a82      	ldr	r2, [pc, #520]	; (d7640 <pow+0x320>)
   d7438:	9201      	str	r2, [sp, #4]
   d743a:	2104      	movs	r1, #4
   d743c:	2200      	movs	r2, #0
   d743e:	2b02      	cmp	r3, #2
   d7440:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7444:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7448:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d744c:	9100      	str	r1, [sp, #0]
   d744e:	9208      	str	r2, [sp, #32]
   d7450:	d003      	beq.n	d745a <pow+0x13a>
   d7452:	4668      	mov	r0, sp
   d7454:	f000 ff68 	bl	d8328 <matherr>
   d7458:	b970      	cbnz	r0, d7478 <pow+0x158>
   d745a:	f7fe fb61 	bl	d5b20 <__errno>
   d745e:	2322      	movs	r3, #34	; 0x22
   d7460:	6003      	str	r3, [r0, #0]
   d7462:	e009      	b.n	d7478 <pow+0x158>
   d7464:	ed9f 7b70 	vldr	d7, [pc, #448]	; d7628 <pow+0x308>
   d7468:	ed8d 7b06 	vstr	d7, [sp, #24]
   d746c:	4668      	mov	r0, sp
   d746e:	f000 ff5b 	bl	d8328 <matherr>
   d7472:	2800      	cmp	r0, #0
   d7474:	f000 808e 	beq.w	d7594 <pow+0x274>
   d7478:	9b08      	ldr	r3, [sp, #32]
   d747a:	b11b      	cbz	r3, d7484 <pow+0x164>
   d747c:	f7fe fb50 	bl	d5b20 <__errno>
   d7480:	9b08      	ldr	r3, [sp, #32]
   d7482:	6003      	str	r3, [r0, #0]
   d7484:	ed9d 0b06 	vldr	d0, [sp, #24]
   d7488:	b00b      	add	sp, #44	; 0x2c
   d748a:	ecbd 8b02 	vpop	{d8}
   d748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7492:	2200      	movs	r2, #0
   d7494:	2300      	movs	r3, #0
   d7496:	4620      	mov	r0, r4
   d7498:	4629      	mov	r1, r5
   d749a:	f001 fc99 	bl	d8dd0 <__aeabi_dcmpeq>
   d749e:	2800      	cmp	r0, #0
   d74a0:	d09d      	beq.n	d73de <pow+0xbe>
   d74a2:	ed9f 0b63 	vldr	d0, [pc, #396]	; d7630 <pow+0x310>
   d74a6:	4b66      	ldr	r3, [pc, #408]	; (d7640 <pow+0x320>)
   d74a8:	f8cd b020 	str.w	fp, [sp, #32]
   d74ac:	2201      	movs	r2, #1
   d74ae:	f1b8 0f02 	cmp.w	r8, #2
   d74b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d74b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d74ba:	ed8d 0b06 	vstr	d0, [sp, #24]
   d74be:	e88d 000c 	stmia.w	sp, {r2, r3}
   d74c2:	d1d3      	bne.n	d746c <pow+0x14c>
   d74c4:	e78f      	b.n	d73e6 <pow+0xc6>
   d74c6:	ec47 6b10 	vmov	d0, r6, r7
   d74ca:	f000 ff25 	bl	d8318 <finite>
   d74ce:	2800      	cmp	r0, #0
   d74d0:	d097      	beq.n	d7402 <pow+0xe2>
   d74d2:	ec45 4b10 	vmov	d0, r4, r5
   d74d6:	f000 ff1f 	bl	d8318 <finite>
   d74da:	2800      	cmp	r0, #0
   d74dc:	d091      	beq.n	d7402 <pow+0xe2>
   d74de:	ec53 2b18 	vmov	r2, r3, d8
   d74e2:	ee18 0a10 	vmov	r0, s16
   d74e6:	4619      	mov	r1, r3
   d74e8:	f001 fca4 	bl	d8e34 <__aeabi_dcmpun>
   d74ec:	2800      	cmp	r0, #0
   d74ee:	d17c      	bne.n	d75ea <pow+0x2ca>
   d74f0:	2303      	movs	r3, #3
   d74f2:	f99a 8000 	ldrsb.w	r8, [sl]
   d74f6:	9300      	str	r3, [sp, #0]
   d74f8:	4b51      	ldr	r3, [pc, #324]	; (d7640 <pow+0x320>)
   d74fa:	9008      	str	r0, [sp, #32]
   d74fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7500:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7504:	9301      	str	r3, [sp, #4]
   d7506:	f1b8 0f00 	cmp.w	r8, #0
   d750a:	d148      	bne.n	d759e <pow+0x27e>
   d750c:	f8df 9144 	ldr.w	r9, [pc, #324]	; d7654 <pow+0x334>
   d7510:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d7514:	2200      	movs	r2, #0
   d7516:	2300      	movs	r3, #0
   d7518:	4630      	mov	r0, r6
   d751a:	4639      	mov	r1, r7
   d751c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7520:	f001 fc60 	bl	d8de4 <__aeabi_dcmplt>
   d7524:	2800      	cmp	r0, #0
   d7526:	d094      	beq.n	d7452 <pow+0x132>
   d7528:	2200      	movs	r2, #0
   d752a:	4b46      	ldr	r3, [pc, #280]	; (d7644 <pow+0x324>)
   d752c:	4620      	mov	r0, r4
   d752e:	4629      	mov	r1, r5
   d7530:	f001 f9e6 	bl	d8900 <__aeabi_dmul>
   d7534:	4604      	mov	r4, r0
   d7536:	460d      	mov	r5, r1
   d7538:	ec45 4b10 	vmov	d0, r4, r5
   d753c:	f000 ff00 	bl	d8340 <rint>
   d7540:	4620      	mov	r0, r4
   d7542:	ec53 2b10 	vmov	r2, r3, d0
   d7546:	4629      	mov	r1, r5
   d7548:	f001 fc42 	bl	d8dd0 <__aeabi_dcmpeq>
   d754c:	2800      	cmp	r0, #0
   d754e:	d149      	bne.n	d75e4 <pow+0x2c4>
   d7550:	4b3d      	ldr	r3, [pc, #244]	; (d7648 <pow+0x328>)
   d7552:	f99a 8000 	ldrsb.w	r8, [sl]
   d7556:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d755a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d755e:	f1b8 0f02 	cmp.w	r8, #2
   d7562:	f47f af76 	bne.w	d7452 <pow+0x132>
   d7566:	e778      	b.n	d745a <pow+0x13a>
   d7568:	4a35      	ldr	r2, [pc, #212]	; (d7640 <pow+0x320>)
   d756a:	f99a 3000 	ldrsb.w	r3, [sl]
   d756e:	f8cd b020 	str.w	fp, [sp, #32]
   d7572:	2101      	movs	r1, #1
   d7574:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7578:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d757c:	e88d 0006 	stmia.w	sp, {r1, r2}
   d7580:	2b00      	cmp	r3, #0
   d7582:	f43f af6f 	beq.w	d7464 <pow+0x144>
   d7586:	4931      	ldr	r1, [pc, #196]	; (d764c <pow+0x32c>)
   d7588:	2000      	movs	r0, #0
   d758a:	2b02      	cmp	r3, #2
   d758c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7590:	f47f af6c 	bne.w	d746c <pow+0x14c>
   d7594:	f7fe fac4 	bl	d5b20 <__errno>
   d7598:	2321      	movs	r3, #33	; 0x21
   d759a:	6003      	str	r3, [r0, #0]
   d759c:	e76c      	b.n	d7478 <pow+0x158>
   d759e:	ed9f 7b26 	vldr	d7, [pc, #152]	; d7638 <pow+0x318>
   d75a2:	2200      	movs	r2, #0
   d75a4:	2300      	movs	r3, #0
   d75a6:	4630      	mov	r0, r6
   d75a8:	4639      	mov	r1, r7
   d75aa:	ed8d 7b06 	vstr	d7, [sp, #24]
   d75ae:	f001 fc19 	bl	d8de4 <__aeabi_dcmplt>
   d75b2:	2800      	cmp	r0, #0
   d75b4:	d0d3      	beq.n	d755e <pow+0x23e>
   d75b6:	2200      	movs	r2, #0
   d75b8:	4b22      	ldr	r3, [pc, #136]	; (d7644 <pow+0x324>)
   d75ba:	4620      	mov	r0, r4
   d75bc:	4629      	mov	r1, r5
   d75be:	f001 f99f 	bl	d8900 <__aeabi_dmul>
   d75c2:	4604      	mov	r4, r0
   d75c4:	460d      	mov	r5, r1
   d75c6:	ec45 4b10 	vmov	d0, r4, r5
   d75ca:	f000 feb9 	bl	d8340 <rint>
   d75ce:	4620      	mov	r0, r4
   d75d0:	ec53 2b10 	vmov	r2, r3, d0
   d75d4:	4629      	mov	r1, r5
   d75d6:	f001 fbfb 	bl	d8dd0 <__aeabi_dcmpeq>
   d75da:	b918      	cbnz	r0, d75e4 <pow+0x2c4>
   d75dc:	4b1b      	ldr	r3, [pc, #108]	; (d764c <pow+0x32c>)
   d75de:	2200      	movs	r2, #0
   d75e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d75e4:	f99a 8000 	ldrsb.w	r8, [sl]
   d75e8:	e7b9      	b.n	d755e <pow+0x23e>
   d75ea:	4b15      	ldr	r3, [pc, #84]	; (d7640 <pow+0x320>)
   d75ec:	f99a 9000 	ldrsb.w	r9, [sl]
   d75f0:	f8cd 8020 	str.w	r8, [sp, #32]
   d75f4:	2201      	movs	r2, #1
   d75f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d75fa:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d75fe:	e88d 000c 	stmia.w	sp, {r2, r3}
   d7602:	f1b9 0f00 	cmp.w	r9, #0
   d7606:	f43f af2d 	beq.w	d7464 <pow+0x144>
   d760a:	2200      	movs	r2, #0
   d760c:	2300      	movs	r3, #0
   d760e:	4610      	mov	r0, r2
   d7610:	4619      	mov	r1, r3
   d7612:	f001 fa9f 	bl	d8b54 <__aeabi_ddiv>
   d7616:	f1b9 0f02 	cmp.w	r9, #2
   d761a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d761e:	d0b9      	beq.n	d7594 <pow+0x274>
   d7620:	e724      	b.n	d746c <pow+0x14c>
   d7622:	bf00      	nop
   d7624:	f3af 8000 	nop.w
	...
   d7634:	3ff00000 	.word	0x3ff00000
   d7638:	00000000 	.word	0x00000000
   d763c:	7ff00000 	.word	0x7ff00000
   d7640:	000d9d80 	.word	0x000d9d80
   d7644:	3fe00000 	.word	0x3fe00000
   d7648:	c7efffff 	.word	0xc7efffff
   d764c:	fff00000 	.word	0xfff00000
   d7650:	2003e2e4 	.word	0x2003e2e4
   d7654:	47efffff 	.word	0x47efffff

000d7658 <__ieee754_pow>:
   d7658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d765c:	ec51 0b11 	vmov	r0, r1, d1
   d7660:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d7664:	ea58 0400 	orrs.w	r4, r8, r0
   d7668:	b093      	sub	sp, #76	; 0x4c
   d766a:	d03c      	beq.n	d76e6 <__ieee754_pow+0x8e>
   d766c:	ec53 2b10 	vmov	r2, r3, d0
   d7670:	4e6d      	ldr	r6, [pc, #436]	; (d7828 <__ieee754_pow+0x1d0>)
   d7672:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d7676:	42b4      	cmp	r4, r6
   d7678:	ee10 aa10 	vmov	sl, s0
   d767c:	461d      	mov	r5, r3
   d767e:	dc2b      	bgt.n	d76d8 <__ieee754_pow+0x80>
   d7680:	4689      	mov	r9, r1
   d7682:	ee11 ea10 	vmov	lr, s2
   d7686:	d026      	beq.n	d76d6 <__ieee754_pow+0x7e>
   d7688:	45b0      	cmp	r8, r6
   d768a:	dc25      	bgt.n	d76d8 <__ieee754_pow+0x80>
   d768c:	4e66      	ldr	r6, [pc, #408]	; (d7828 <__ieee754_pow+0x1d0>)
   d768e:	45b0      	cmp	r8, r6
   d7690:	d077      	beq.n	d7782 <__ieee754_pow+0x12a>
   d7692:	2d00      	cmp	r5, #0
   d7694:	4616      	mov	r6, r2
   d7696:	461f      	mov	r7, r3
   d7698:	e9cd 0100 	strd	r0, r1, [sp]
   d769c:	db75      	blt.n	d778a <__ieee754_pow+0x132>
   d769e:	f04f 0b00 	mov.w	fp, #0
   d76a2:	f1be 0f00 	cmp.w	lr, #0
   d76a6:	d12d      	bne.n	d7704 <__ieee754_pow+0xac>
   d76a8:	4b5f      	ldr	r3, [pc, #380]	; (d7828 <__ieee754_pow+0x1d0>)
   d76aa:	4598      	cmp	r8, r3
   d76ac:	f000 8089 	beq.w	d77c2 <__ieee754_pow+0x16a>
   d76b0:	4b5e      	ldr	r3, [pc, #376]	; (d782c <__ieee754_pow+0x1d4>)
   d76b2:	4598      	cmp	r8, r3
   d76b4:	d05e      	beq.n	d7774 <__ieee754_pow+0x11c>
   d76b6:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
   d76ba:	f000 83de 	beq.w	d7e7a <__ieee754_pow+0x822>
   d76be:	4b5c      	ldr	r3, [pc, #368]	; (d7830 <__ieee754_pow+0x1d8>)
   d76c0:	4599      	cmp	r9, r3
   d76c2:	d11f      	bne.n	d7704 <__ieee754_pow+0xac>
   d76c4:	2d00      	cmp	r5, #0
   d76c6:	db1d      	blt.n	d7704 <__ieee754_pow+0xac>
   d76c8:	ec47 6b10 	vmov	d0, r6, r7
   d76cc:	b013      	add	sp, #76	; 0x4c
   d76ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76d2:	f000 bd49 	b.w	d8168 <__ieee754_sqrt>
   d76d6:	b15a      	cbz	r2, d76f0 <__ieee754_pow+0x98>
   d76d8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d76dc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d76e0:	ea54 030a 	orrs.w	r3, r4, sl
   d76e4:	d106      	bne.n	d76f4 <__ieee754_pow+0x9c>
   d76e6:	ed9f 0b4a 	vldr	d0, [pc, #296]	; d7810 <__ieee754_pow+0x1b8>
   d76ea:	b013      	add	sp, #76	; 0x4c
   d76ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d76f0:	45a0      	cmp	r8, r4
   d76f2:	ddcb      	ble.n	d768c <__ieee754_pow+0x34>
   d76f4:	484f      	ldr	r0, [pc, #316]	; (d7834 <__ieee754_pow+0x1dc>)
   d76f6:	b013      	add	sp, #76	; 0x4c
   d76f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d76fc:	f000 be18 	b.w	d8330 <nan>
   d7700:	f04f 0b00 	mov.w	fp, #0
   d7704:	ec47 6b10 	vmov	d0, r6, r7
   d7708:	f000 fdfe 	bl	d8308 <fabs>
   d770c:	ec51 0b10 	vmov	r0, r1, d0
   d7710:	f1ba 0f00 	cmp.w	sl, #0
   d7714:	d01e      	beq.n	d7754 <__ieee754_pow+0xfc>
   d7716:	0fed      	lsrs	r5, r5, #31
   d7718:	f105 3aff 	add.w	sl, r5, #4294967295
   d771c:	ea5b 030a 	orrs.w	r3, fp, sl
   d7720:	d063      	beq.n	d77ea <__ieee754_pow+0x192>
   d7722:	4b45      	ldr	r3, [pc, #276]	; (d7838 <__ieee754_pow+0x1e0>)
   d7724:	4598      	cmp	r8, r3
   d7726:	f340 808d 	ble.w	d7844 <__ieee754_pow+0x1ec>
   d772a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d772e:	4598      	cmp	r8, r3
   d7730:	f340 8438 	ble.w	d7fa4 <__ieee754_pow+0x94c>
   d7734:	4b41      	ldr	r3, [pc, #260]	; (d783c <__ieee754_pow+0x1e4>)
   d7736:	429c      	cmp	r4, r3
   d7738:	dd62      	ble.n	d7800 <__ieee754_pow+0x1a8>
   d773a:	f1b9 0f00 	cmp.w	r9, #0
   d773e:	dd62      	ble.n	d7806 <__ieee754_pow+0x1ae>
   d7740:	a335      	add	r3, pc, #212	; (adr r3, d7818 <__ieee754_pow+0x1c0>)
   d7742:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7746:	4610      	mov	r0, r2
   d7748:	4619      	mov	r1, r3
   d774a:	f001 f8d9 	bl	d8900 <__aeabi_dmul>
   d774e:	ec41 0b10 	vmov	d0, r0, r1
   d7752:	e7ca      	b.n	d76ea <__ieee754_pow+0x92>
   d7754:	b124      	cbz	r4, d7760 <__ieee754_pow+0x108>
   d7756:	4b35      	ldr	r3, [pc, #212]	; (d782c <__ieee754_pow+0x1d4>)
   d7758:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   d775c:	429a      	cmp	r2, r3
   d775e:	d1da      	bne.n	d7716 <__ieee754_pow+0xbe>
   d7760:	f1b9 0f00 	cmp.w	r9, #0
   d7764:	f2c0 83cb 	blt.w	d7efe <__ieee754_pow+0x8a6>
   d7768:	2d00      	cmp	r5, #0
   d776a:	f2c0 8374 	blt.w	d7e56 <__ieee754_pow+0x7fe>
   d776e:	ec41 0b10 	vmov	d0, r0, r1
   d7772:	e7ba      	b.n	d76ea <__ieee754_pow+0x92>
   d7774:	f1b9 0f00 	cmp.w	r9, #0
   d7778:	f2c0 847a 	blt.w	d8070 <__ieee754_pow+0xa18>
   d777c:	ec47 6b10 	vmov	d0, r6, r7
   d7780:	e7b3      	b.n	d76ea <__ieee754_pow+0x92>
   d7782:	f1be 0f00 	cmp.w	lr, #0
   d7786:	d084      	beq.n	d7692 <__ieee754_pow+0x3a>
   d7788:	e7a6      	b.n	d76d8 <__ieee754_pow+0x80>
   d778a:	4b2d      	ldr	r3, [pc, #180]	; (d7840 <__ieee754_pow+0x1e8>)
   d778c:	4598      	cmp	r8, r3
   d778e:	dc29      	bgt.n	d77e4 <__ieee754_pow+0x18c>
   d7790:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   d7794:	4598      	cmp	r8, r3
   d7796:	dd82      	ble.n	d769e <__ieee754_pow+0x46>
   d7798:	ea4f 5328 	mov.w	r3, r8, asr #20
   d779c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d77a0:	2b14      	cmp	r3, #20
   d77a2:	f340 847f 	ble.w	d80a4 <__ieee754_pow+0xa4c>
   d77a6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   d77aa:	fa2e f203 	lsr.w	r2, lr, r3
   d77ae:	fa02 f303 	lsl.w	r3, r2, r3
   d77b2:	459e      	cmp	lr, r3
   d77b4:	f47f af73 	bne.w	d769e <__ieee754_pow+0x46>
   d77b8:	f002 0201 	and.w	r2, r2, #1
   d77bc:	f1c2 0b02 	rsb	fp, r2, #2
   d77c0:	e76f      	b.n	d76a2 <__ieee754_pow+0x4a>
   d77c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   d77c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d77ca:	ea53 030a 	orrs.w	r3, r3, sl
   d77ce:	d08a      	beq.n	d76e6 <__ieee754_pow+0x8e>
   d77d0:	4b1a      	ldr	r3, [pc, #104]	; (d783c <__ieee754_pow+0x1e4>)
   d77d2:	429c      	cmp	r4, r3
   d77d4:	f340 8385 	ble.w	d7ee2 <__ieee754_pow+0x88a>
   d77d8:	f1b9 0f00 	cmp.w	r9, #0
   d77dc:	db13      	blt.n	d7806 <__ieee754_pow+0x1ae>
   d77de:	ed9d 0b00 	vldr	d0, [sp]
   d77e2:	e782      	b.n	d76ea <__ieee754_pow+0x92>
   d77e4:	f04f 0b02 	mov.w	fp, #2
   d77e8:	e75b      	b.n	d76a2 <__ieee754_pow+0x4a>
   d77ea:	4632      	mov	r2, r6
   d77ec:	463b      	mov	r3, r7
   d77ee:	4610      	mov	r0, r2
   d77f0:	4619      	mov	r1, r3
   d77f2:	f000 fed1 	bl	d8598 <__aeabi_dsub>
   d77f6:	4602      	mov	r2, r0
   d77f8:	460b      	mov	r3, r1
   d77fa:	f001 f9ab 	bl	d8b54 <__aeabi_ddiv>
   d77fe:	e7b6      	b.n	d776e <__ieee754_pow+0x116>
   d7800:	f1b9 0f00 	cmp.w	r9, #0
   d7804:	db9c      	blt.n	d7740 <__ieee754_pow+0xe8>
   d7806:	ed9f 0b06 	vldr	d0, [pc, #24]	; d7820 <__ieee754_pow+0x1c8>
   d780a:	e76e      	b.n	d76ea <__ieee754_pow+0x92>
   d780c:	f3af 8000 	nop.w
   d7810:	00000000 	.word	0x00000000
   d7814:	3ff00000 	.word	0x3ff00000
   d7818:	8800759c 	.word	0x8800759c
   d781c:	7e37e43c 	.word	0x7e37e43c
	...
   d7828:	7ff00000 	.word	0x7ff00000
   d782c:	3ff00000 	.word	0x3ff00000
   d7830:	3fe00000 	.word	0x3fe00000
   d7834:	000d9d84 	.word	0x000d9d84
   d7838:	41e00000 	.word	0x41e00000
   d783c:	3fefffff 	.word	0x3fefffff
   d7840:	433fffff 	.word	0x433fffff
   d7844:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   d7848:	f04f 0200 	mov.w	r2, #0
   d784c:	da05      	bge.n	d785a <__ieee754_pow+0x202>
   d784e:	4bd6      	ldr	r3, [pc, #856]	; (d7ba8 <__ieee754_pow+0x550>)
   d7850:	f001 f856 	bl	d8900 <__aeabi_dmul>
   d7854:	f06f 0234 	mvn.w	r2, #52	; 0x34
   d7858:	460c      	mov	r4, r1
   d785a:	1523      	asrs	r3, r4, #20
   d785c:	4ed3      	ldr	r6, [pc, #844]	; (d7bac <__ieee754_pow+0x554>)
   d785e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   d7862:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7866:	4413      	add	r3, r2
   d7868:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
   d786c:	42b4      	cmp	r4, r6
   d786e:	461a      	mov	r2, r3
   d7870:	930d      	str	r3, [sp, #52]	; 0x34
   d7872:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   d7876:	f340 8349 	ble.w	d7f0c <__ieee754_pow+0x8b4>
   d787a:	4bcd      	ldr	r3, [pc, #820]	; (d7bb0 <__ieee754_pow+0x558>)
   d787c:	429c      	cmp	r4, r3
   d787e:	f340 842d 	ble.w	d80dc <__ieee754_pow+0xa84>
   d7882:	ed9f 7bb3 	vldr	d7, [pc, #716]	; d7b50 <__ieee754_pow+0x4f8>
   d7886:	ed8d 7b08 	vstr	d7, [sp, #32]
   d788a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d788e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; d7b58 <__ieee754_pow+0x500>
   d7892:	4613      	mov	r3, r2
   d7894:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7898:	3301      	adds	r3, #1
   d789a:	930d      	str	r3, [sp, #52]	; 0x34
   d789c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d78a0:	f04f 0800 	mov.w	r8, #0
   d78a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d78a8:	4629      	mov	r1, r5
   d78aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d78ae:	f000 fe73 	bl	d8598 <__aeabi_dsub>
   d78b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d78b6:	4606      	mov	r6, r0
   d78b8:	460f      	mov	r7, r1
   d78ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d78be:	f000 fe6d 	bl	d859c <__adddf3>
   d78c2:	4602      	mov	r2, r0
   d78c4:	460b      	mov	r3, r1
   d78c6:	2000      	movs	r0, #0
   d78c8:	49ba      	ldr	r1, [pc, #744]	; (d7bb4 <__ieee754_pow+0x55c>)
   d78ca:	f001 f943 	bl	d8b54 <__aeabi_ddiv>
   d78ce:	4603      	mov	r3, r0
   d78d0:	460c      	mov	r4, r1
   d78d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   d78d6:	4602      	mov	r2, r0
   d78d8:	460b      	mov	r3, r1
   d78da:	4630      	mov	r0, r6
   d78dc:	4639      	mov	r1, r7
   d78de:	f001 f80f 	bl	d8900 <__aeabi_dmul>
   d78e2:	106b      	asrs	r3, r5, #1
   d78e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   d78e8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   d78ec:	eb03 0508 	add.w	r5, r3, r8
   d78f0:	460a      	mov	r2, r1
   d78f2:	2300      	movs	r3, #0
   d78f4:	4601      	mov	r1, r0
   d78f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d78fa:	9302      	str	r3, [sp, #8]
   d78fc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   d7900:	2400      	movs	r4, #0
   d7902:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7906:	462b      	mov	r3, r5
   d7908:	4622      	mov	r2, r4
   d790a:	4640      	mov	r0, r8
   d790c:	4649      	mov	r1, r9
   d790e:	f000 fff7 	bl	d8900 <__aeabi_dmul>
   d7912:	4602      	mov	r2, r0
   d7914:	460b      	mov	r3, r1
   d7916:	4630      	mov	r0, r6
   d7918:	4639      	mov	r1, r7
   d791a:	f000 fe3d 	bl	d8598 <__aeabi_dsub>
   d791e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7922:	4606      	mov	r6, r0
   d7924:	460f      	mov	r7, r1
   d7926:	4620      	mov	r0, r4
   d7928:	4629      	mov	r1, r5
   d792a:	f000 fe35 	bl	d8598 <__aeabi_dsub>
   d792e:	4602      	mov	r2, r0
   d7930:	460b      	mov	r3, r1
   d7932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7936:	f000 fe2f 	bl	d8598 <__aeabi_dsub>
   d793a:	4642      	mov	r2, r8
   d793c:	464b      	mov	r3, r9
   d793e:	f000 ffdf 	bl	d8900 <__aeabi_dmul>
   d7942:	4602      	mov	r2, r0
   d7944:	460b      	mov	r3, r1
   d7946:	4630      	mov	r0, r6
   d7948:	4639      	mov	r1, r7
   d794a:	f000 fe25 	bl	d8598 <__aeabi_dsub>
   d794e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   d7952:	f000 ffd5 	bl	d8900 <__aeabi_dmul>
   d7956:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   d795a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d795e:	4622      	mov	r2, r4
   d7960:	462b      	mov	r3, r5
   d7962:	4620      	mov	r0, r4
   d7964:	4629      	mov	r1, r5
   d7966:	f000 ffcb 	bl	d8900 <__aeabi_dmul>
   d796a:	a37d      	add	r3, pc, #500	; (adr r3, d7b60 <__ieee754_pow+0x508>)
   d796c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7970:	4604      	mov	r4, r0
   d7972:	460d      	mov	r5, r1
   d7974:	f000 ffc4 	bl	d8900 <__aeabi_dmul>
   d7978:	a37b      	add	r3, pc, #492	; (adr r3, d7b68 <__ieee754_pow+0x510>)
   d797a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d797e:	f000 fe0d 	bl	d859c <__adddf3>
   d7982:	4622      	mov	r2, r4
   d7984:	462b      	mov	r3, r5
   d7986:	f000 ffbb 	bl	d8900 <__aeabi_dmul>
   d798a:	a379      	add	r3, pc, #484	; (adr r3, d7b70 <__ieee754_pow+0x518>)
   d798c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7990:	f000 fe04 	bl	d859c <__adddf3>
   d7994:	4622      	mov	r2, r4
   d7996:	462b      	mov	r3, r5
   d7998:	f000 ffb2 	bl	d8900 <__aeabi_dmul>
   d799c:	a376      	add	r3, pc, #472	; (adr r3, d7b78 <__ieee754_pow+0x520>)
   d799e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79a2:	f000 fdfb 	bl	d859c <__adddf3>
   d79a6:	4622      	mov	r2, r4
   d79a8:	462b      	mov	r3, r5
   d79aa:	f000 ffa9 	bl	d8900 <__aeabi_dmul>
   d79ae:	a374      	add	r3, pc, #464	; (adr r3, d7b80 <__ieee754_pow+0x528>)
   d79b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79b4:	f000 fdf2 	bl	d859c <__adddf3>
   d79b8:	4622      	mov	r2, r4
   d79ba:	462b      	mov	r3, r5
   d79bc:	f000 ffa0 	bl	d8900 <__aeabi_dmul>
   d79c0:	a371      	add	r3, pc, #452	; (adr r3, d7b88 <__ieee754_pow+0x530>)
   d79c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79c6:	f000 fde9 	bl	d859c <__adddf3>
   d79ca:	4622      	mov	r2, r4
   d79cc:	4606      	mov	r6, r0
   d79ce:	460f      	mov	r7, r1
   d79d0:	462b      	mov	r3, r5
   d79d2:	4620      	mov	r0, r4
   d79d4:	4629      	mov	r1, r5
   d79d6:	f000 ff93 	bl	d8900 <__aeabi_dmul>
   d79da:	4602      	mov	r2, r0
   d79dc:	460b      	mov	r3, r1
   d79de:	4630      	mov	r0, r6
   d79e0:	4639      	mov	r1, r7
   d79e2:	f000 ff8d 	bl	d8900 <__aeabi_dmul>
   d79e6:	4642      	mov	r2, r8
   d79e8:	4604      	mov	r4, r0
   d79ea:	460d      	mov	r5, r1
   d79ec:	464b      	mov	r3, r9
   d79ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d79f2:	f000 fdd3 	bl	d859c <__adddf3>
   d79f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d79fa:	f000 ff81 	bl	d8900 <__aeabi_dmul>
   d79fe:	4622      	mov	r2, r4
   d7a00:	462b      	mov	r3, r5
   d7a02:	f000 fdcb 	bl	d859c <__adddf3>
   d7a06:	4642      	mov	r2, r8
   d7a08:	4606      	mov	r6, r0
   d7a0a:	460f      	mov	r7, r1
   d7a0c:	464b      	mov	r3, r9
   d7a0e:	4640      	mov	r0, r8
   d7a10:	4649      	mov	r1, r9
   d7a12:	f000 ff75 	bl	d8900 <__aeabi_dmul>
   d7a16:	2200      	movs	r2, #0
   d7a18:	4b67      	ldr	r3, [pc, #412]	; (d7bb8 <__ieee754_pow+0x560>)
   d7a1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d7a1e:	f000 fdbd 	bl	d859c <__adddf3>
   d7a22:	4632      	mov	r2, r6
   d7a24:	463b      	mov	r3, r7
   d7a26:	f000 fdb9 	bl	d859c <__adddf3>
   d7a2a:	9802      	ldr	r0, [sp, #8]
   d7a2c:	460d      	mov	r5, r1
   d7a2e:	4604      	mov	r4, r0
   d7a30:	4622      	mov	r2, r4
   d7a32:	462b      	mov	r3, r5
   d7a34:	4640      	mov	r0, r8
   d7a36:	4649      	mov	r1, r9
   d7a38:	f000 ff62 	bl	d8900 <__aeabi_dmul>
   d7a3c:	2200      	movs	r2, #0
   d7a3e:	4680      	mov	r8, r0
   d7a40:	4689      	mov	r9, r1
   d7a42:	4b5d      	ldr	r3, [pc, #372]	; (d7bb8 <__ieee754_pow+0x560>)
   d7a44:	4620      	mov	r0, r4
   d7a46:	4629      	mov	r1, r5
   d7a48:	f000 fda6 	bl	d8598 <__aeabi_dsub>
   d7a4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7a50:	f000 fda2 	bl	d8598 <__aeabi_dsub>
   d7a54:	4602      	mov	r2, r0
   d7a56:	460b      	mov	r3, r1
   d7a58:	4630      	mov	r0, r6
   d7a5a:	4639      	mov	r1, r7
   d7a5c:	f000 fd9c 	bl	d8598 <__aeabi_dsub>
   d7a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7a64:	f000 ff4c 	bl	d8900 <__aeabi_dmul>
   d7a68:	4622      	mov	r2, r4
   d7a6a:	4606      	mov	r6, r0
   d7a6c:	460f      	mov	r7, r1
   d7a6e:	462b      	mov	r3, r5
   d7a70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7a74:	f000 ff44 	bl	d8900 <__aeabi_dmul>
   d7a78:	4602      	mov	r2, r0
   d7a7a:	460b      	mov	r3, r1
   d7a7c:	4630      	mov	r0, r6
   d7a7e:	4639      	mov	r1, r7
   d7a80:	f000 fd8c 	bl	d859c <__adddf3>
   d7a84:	4606      	mov	r6, r0
   d7a86:	460f      	mov	r7, r1
   d7a88:	4602      	mov	r2, r0
   d7a8a:	460b      	mov	r3, r1
   d7a8c:	4640      	mov	r0, r8
   d7a8e:	4649      	mov	r1, r9
   d7a90:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7a94:	f000 fd82 	bl	d859c <__adddf3>
   d7a98:	9802      	ldr	r0, [sp, #8]
   d7a9a:	a33d      	add	r3, pc, #244	; (adr r3, d7b90 <__ieee754_pow+0x538>)
   d7a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7aa0:	4604      	mov	r4, r0
   d7aa2:	460d      	mov	r5, r1
   d7aa4:	f000 ff2c 	bl	d8900 <__aeabi_dmul>
   d7aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7aac:	4680      	mov	r8, r0
   d7aae:	4689      	mov	r9, r1
   d7ab0:	4620      	mov	r0, r4
   d7ab2:	4629      	mov	r1, r5
   d7ab4:	f000 fd70 	bl	d8598 <__aeabi_dsub>
   d7ab8:	4602      	mov	r2, r0
   d7aba:	460b      	mov	r3, r1
   d7abc:	4630      	mov	r0, r6
   d7abe:	4639      	mov	r1, r7
   d7ac0:	f000 fd6a 	bl	d8598 <__aeabi_dsub>
   d7ac4:	a334      	add	r3, pc, #208	; (adr r3, d7b98 <__ieee754_pow+0x540>)
   d7ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7aca:	f000 ff19 	bl	d8900 <__aeabi_dmul>
   d7ace:	a334      	add	r3, pc, #208	; (adr r3, d7ba0 <__ieee754_pow+0x548>)
   d7ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ad4:	4606      	mov	r6, r0
   d7ad6:	460f      	mov	r7, r1
   d7ad8:	4620      	mov	r0, r4
   d7ada:	4629      	mov	r1, r5
   d7adc:	f000 ff10 	bl	d8900 <__aeabi_dmul>
   d7ae0:	4602      	mov	r2, r0
   d7ae2:	460b      	mov	r3, r1
   d7ae4:	4630      	mov	r0, r6
   d7ae6:	4639      	mov	r1, r7
   d7ae8:	f000 fd58 	bl	d859c <__adddf3>
   d7aec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   d7af0:	f000 fd54 	bl	d859c <__adddf3>
   d7af4:	4606      	mov	r6, r0
   d7af6:	980d      	ldr	r0, [sp, #52]	; 0x34
   d7af8:	460f      	mov	r7, r1
   d7afa:	f000 fe9b 	bl	d8834 <__aeabi_i2d>
   d7afe:	4632      	mov	r2, r6
   d7b00:	4604      	mov	r4, r0
   d7b02:	460d      	mov	r5, r1
   d7b04:	463b      	mov	r3, r7
   d7b06:	4640      	mov	r0, r8
   d7b08:	4649      	mov	r1, r9
   d7b0a:	f000 fd47 	bl	d859c <__adddf3>
   d7b0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7b12:	f000 fd43 	bl	d859c <__adddf3>
   d7b16:	4622      	mov	r2, r4
   d7b18:	462b      	mov	r3, r5
   d7b1a:	f000 fd3f 	bl	d859c <__adddf3>
   d7b1e:	9802      	ldr	r0, [sp, #8]
   d7b20:	4622      	mov	r2, r4
   d7b22:	462b      	mov	r3, r5
   d7b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7b28:	f000 fd36 	bl	d8598 <__aeabi_dsub>
   d7b2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d7b30:	f000 fd32 	bl	d8598 <__aeabi_dsub>
   d7b34:	4642      	mov	r2, r8
   d7b36:	464b      	mov	r3, r9
   d7b38:	f000 fd2e 	bl	d8598 <__aeabi_dsub>
   d7b3c:	4602      	mov	r2, r0
   d7b3e:	460b      	mov	r3, r1
   d7b40:	4630      	mov	r0, r6
   d7b42:	4639      	mov	r1, r7
   d7b44:	f000 fd28 	bl	d8598 <__aeabi_dsub>
   d7b48:	4680      	mov	r8, r0
   d7b4a:	4689      	mov	r9, r1
   d7b4c:	e036      	b.n	d7bbc <__ieee754_pow+0x564>
   d7b4e:	bf00      	nop
	...
   d7b5c:	3ff00000 	.word	0x3ff00000
   d7b60:	4a454eef 	.word	0x4a454eef
   d7b64:	3fca7e28 	.word	0x3fca7e28
   d7b68:	93c9db65 	.word	0x93c9db65
   d7b6c:	3fcd864a 	.word	0x3fcd864a
   d7b70:	a91d4101 	.word	0xa91d4101
   d7b74:	3fd17460 	.word	0x3fd17460
   d7b78:	518f264d 	.word	0x518f264d
   d7b7c:	3fd55555 	.word	0x3fd55555
   d7b80:	db6fabff 	.word	0xdb6fabff
   d7b84:	3fdb6db6 	.word	0x3fdb6db6
   d7b88:	33333303 	.word	0x33333303
   d7b8c:	3fe33333 	.word	0x3fe33333
   d7b90:	e0000000 	.word	0xe0000000
   d7b94:	3feec709 	.word	0x3feec709
   d7b98:	dc3a03fd 	.word	0xdc3a03fd
   d7b9c:	3feec709 	.word	0x3feec709
   d7ba0:	145b01f5 	.word	0x145b01f5
   d7ba4:	be3e2fe0 	.word	0xbe3e2fe0
   d7ba8:	43400000 	.word	0x43400000
   d7bac:	0003988e 	.word	0x0003988e
   d7bb0:	000bb679 	.word	0x000bb679
   d7bb4:	3ff00000 	.word	0x3ff00000
   d7bb8:	40080000 	.word	0x40080000
   d7bbc:	f10b 33ff 	add.w	r3, fp, #4294967295
   d7bc0:	ea53 030a 	orrs.w	r3, r3, sl
   d7bc4:	f000 8188 	beq.w	d7ed8 <__ieee754_pow+0x880>
   d7bc8:	ed9f 7bd7 	vldr	d7, [pc, #860]	; d7f28 <__ieee754_pow+0x8d0>
   d7bcc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7bd0:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7bd4:	4653      	mov	r3, sl
   d7bd6:	465c      	mov	r4, fp
   d7bd8:	e9cd 3400 	strd	r3, r4, [sp]
   d7bdc:	2300      	movs	r3, #0
   d7bde:	9300      	str	r3, [sp, #0]
   d7be0:	e9dd 4500 	ldrd	r4, r5, [sp]
   d7be4:	4650      	mov	r0, sl
   d7be6:	4622      	mov	r2, r4
   d7be8:	462b      	mov	r3, r5
   d7bea:	4659      	mov	r1, fp
   d7bec:	f000 fcd4 	bl	d8598 <__aeabi_dsub>
   d7bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7bf4:	f000 fe84 	bl	d8900 <__aeabi_dmul>
   d7bf8:	4652      	mov	r2, sl
   d7bfa:	4606      	mov	r6, r0
   d7bfc:	460f      	mov	r7, r1
   d7bfe:	465b      	mov	r3, fp
   d7c00:	4640      	mov	r0, r8
   d7c02:	4649      	mov	r1, r9
   d7c04:	f000 fe7c 	bl	d8900 <__aeabi_dmul>
   d7c08:	4602      	mov	r2, r0
   d7c0a:	460b      	mov	r3, r1
   d7c0c:	4630      	mov	r0, r6
   d7c0e:	4639      	mov	r1, r7
   d7c10:	f000 fcc4 	bl	d859c <__adddf3>
   d7c14:	4622      	mov	r2, r4
   d7c16:	4680      	mov	r8, r0
   d7c18:	4689      	mov	r9, r1
   d7c1a:	462b      	mov	r3, r5
   d7c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d7c20:	e9cd 8904 	strd	r8, r9, [sp, #16]
   d7c24:	f000 fe6c 	bl	d8900 <__aeabi_dmul>
   d7c28:	460b      	mov	r3, r1
   d7c2a:	4602      	mov	r2, r0
   d7c2c:	4606      	mov	r6, r0
   d7c2e:	460f      	mov	r7, r1
   d7c30:	4640      	mov	r0, r8
   d7c32:	4649      	mov	r1, r9
   d7c34:	f000 fcb2 	bl	d859c <__adddf3>
   d7c38:	4bd5      	ldr	r3, [pc, #852]	; (d7f90 <__ieee754_pow+0x938>)
   d7c3a:	4299      	cmp	r1, r3
   d7c3c:	4604      	mov	r4, r0
   d7c3e:	460d      	mov	r5, r1
   d7c40:	468a      	mov	sl, r1
   d7c42:	f340 8123 	ble.w	d7e8c <__ieee754_pow+0x834>
   d7c46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7c4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7c4e:	4303      	orrs	r3, r0
   d7c50:	f040 8218 	bne.w	d8084 <__ieee754_pow+0xa2c>
   d7c54:	a3b6      	add	r3, pc, #728	; (adr r3, d7f30 <__ieee754_pow+0x8d8>)
   d7c56:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7c5e:	f000 fc9d 	bl	d859c <__adddf3>
   d7c62:	4632      	mov	r2, r6
   d7c64:	4680      	mov	r8, r0
   d7c66:	4689      	mov	r9, r1
   d7c68:	463b      	mov	r3, r7
   d7c6a:	4620      	mov	r0, r4
   d7c6c:	4629      	mov	r1, r5
   d7c6e:	f000 fc93 	bl	d8598 <__aeabi_dsub>
   d7c72:	4602      	mov	r2, r0
   d7c74:	460b      	mov	r3, r1
   d7c76:	4640      	mov	r0, r8
   d7c78:	4649      	mov	r1, r9
   d7c7a:	f001 f8d1 	bl	d8e20 <__aeabi_dcmpgt>
   d7c7e:	2800      	cmp	r0, #0
   d7c80:	f040 8200 	bne.w	d8084 <__ieee754_pow+0xa2c>
   d7c84:	46a8      	mov	r8, r5
   d7c86:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7c8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7c8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7c92:	fa42 f303 	asr.w	r3, r2, r3
   d7c96:	4453      	add	r3, sl
   d7c98:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7c9c:	4dbd      	ldr	r5, [pc, #756]	; (d7f94 <__ieee754_pow+0x93c>)
   d7c9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7ca2:	4115      	asrs	r5, r2
   d7ca4:	f3c3 0b13 	ubfx	fp, r3, #0, #20
   d7ca8:	2000      	movs	r0, #0
   d7caa:	f1c2 0414 	rsb	r4, r2, #20
   d7cae:	ea23 0105 	bic.w	r1, r3, r5
   d7cb2:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
   d7cb6:	f1ba 0f00 	cmp.w	sl, #0
   d7cba:	4602      	mov	r2, r0
   d7cbc:	460b      	mov	r3, r1
   d7cbe:	fa4b fb04 	asr.w	fp, fp, r4
   d7cc2:	4630      	mov	r0, r6
   d7cc4:	4639      	mov	r1, r7
   d7cc6:	bfb8      	it	lt
   d7cc8:	f1cb 0b00 	rsblt	fp, fp, #0
   d7ccc:	f000 fc64 	bl	d8598 <__aeabi_dsub>
   d7cd0:	4602      	mov	r2, r0
   d7cd2:	460b      	mov	r3, r1
   d7cd4:	4606      	mov	r6, r0
   d7cd6:	460f      	mov	r7, r1
   d7cd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7cdc:	f000 fc5e 	bl	d859c <__adddf3>
   d7ce0:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
   d7ce4:	2400      	movs	r4, #0
   d7ce6:	a394      	add	r3, pc, #592	; (adr r3, d7f38 <__ieee754_pow+0x8e0>)
   d7ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cec:	4620      	mov	r0, r4
   d7cee:	460d      	mov	r5, r1
   d7cf0:	f000 fe06 	bl	d8900 <__aeabi_dmul>
   d7cf4:	4632      	mov	r2, r6
   d7cf6:	4680      	mov	r8, r0
   d7cf8:	4689      	mov	r9, r1
   d7cfa:	463b      	mov	r3, r7
   d7cfc:	4620      	mov	r0, r4
   d7cfe:	4629      	mov	r1, r5
   d7d00:	f000 fc4a 	bl	d8598 <__aeabi_dsub>
   d7d04:	4602      	mov	r2, r0
   d7d06:	460b      	mov	r3, r1
   d7d08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7d0c:	f000 fc44 	bl	d8598 <__aeabi_dsub>
   d7d10:	a38b      	add	r3, pc, #556	; (adr r3, d7f40 <__ieee754_pow+0x8e8>)
   d7d12:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d16:	f000 fdf3 	bl	d8900 <__aeabi_dmul>
   d7d1a:	a38b      	add	r3, pc, #556	; (adr r3, d7f48 <__ieee754_pow+0x8f0>)
   d7d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d20:	4606      	mov	r6, r0
   d7d22:	460f      	mov	r7, r1
   d7d24:	4620      	mov	r0, r4
   d7d26:	4629      	mov	r1, r5
   d7d28:	f000 fdea 	bl	d8900 <__aeabi_dmul>
   d7d2c:	4602      	mov	r2, r0
   d7d2e:	460b      	mov	r3, r1
   d7d30:	4630      	mov	r0, r6
   d7d32:	4639      	mov	r1, r7
   d7d34:	f000 fc32 	bl	d859c <__adddf3>
   d7d38:	4606      	mov	r6, r0
   d7d3a:	460f      	mov	r7, r1
   d7d3c:	4602      	mov	r2, r0
   d7d3e:	460b      	mov	r3, r1
   d7d40:	4640      	mov	r0, r8
   d7d42:	4649      	mov	r1, r9
   d7d44:	f000 fc2a 	bl	d859c <__adddf3>
   d7d48:	4642      	mov	r2, r8
   d7d4a:	464b      	mov	r3, r9
   d7d4c:	4604      	mov	r4, r0
   d7d4e:	460d      	mov	r5, r1
   d7d50:	f000 fc22 	bl	d8598 <__aeabi_dsub>
   d7d54:	4602      	mov	r2, r0
   d7d56:	460b      	mov	r3, r1
   d7d58:	4630      	mov	r0, r6
   d7d5a:	4639      	mov	r1, r7
   d7d5c:	f000 fc1c 	bl	d8598 <__aeabi_dsub>
   d7d60:	4622      	mov	r2, r4
   d7d62:	4680      	mov	r8, r0
   d7d64:	4689      	mov	r9, r1
   d7d66:	462b      	mov	r3, r5
   d7d68:	4620      	mov	r0, r4
   d7d6a:	4629      	mov	r1, r5
   d7d6c:	f000 fdc8 	bl	d8900 <__aeabi_dmul>
   d7d70:	a377      	add	r3, pc, #476	; (adr r3, d7f50 <__ieee754_pow+0x8f8>)
   d7d72:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d76:	4606      	mov	r6, r0
   d7d78:	460f      	mov	r7, r1
   d7d7a:	f000 fdc1 	bl	d8900 <__aeabi_dmul>
   d7d7e:	a376      	add	r3, pc, #472	; (adr r3, d7f58 <__ieee754_pow+0x900>)
   d7d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d84:	f000 fc08 	bl	d8598 <__aeabi_dsub>
   d7d88:	4632      	mov	r2, r6
   d7d8a:	463b      	mov	r3, r7
   d7d8c:	f000 fdb8 	bl	d8900 <__aeabi_dmul>
   d7d90:	a373      	add	r3, pc, #460	; (adr r3, d7f60 <__ieee754_pow+0x908>)
   d7d92:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d96:	f000 fc01 	bl	d859c <__adddf3>
   d7d9a:	4632      	mov	r2, r6
   d7d9c:	463b      	mov	r3, r7
   d7d9e:	f000 fdaf 	bl	d8900 <__aeabi_dmul>
   d7da2:	a371      	add	r3, pc, #452	; (adr r3, d7f68 <__ieee754_pow+0x910>)
   d7da4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7da8:	f000 fbf6 	bl	d8598 <__aeabi_dsub>
   d7dac:	4632      	mov	r2, r6
   d7dae:	463b      	mov	r3, r7
   d7db0:	f000 fda6 	bl	d8900 <__aeabi_dmul>
   d7db4:	a36e      	add	r3, pc, #440	; (adr r3, d7f70 <__ieee754_pow+0x918>)
   d7db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7dba:	f000 fbef 	bl	d859c <__adddf3>
   d7dbe:	4632      	mov	r2, r6
   d7dc0:	463b      	mov	r3, r7
   d7dc2:	f000 fd9d 	bl	d8900 <__aeabi_dmul>
   d7dc6:	4602      	mov	r2, r0
   d7dc8:	460b      	mov	r3, r1
   d7dca:	4620      	mov	r0, r4
   d7dcc:	4629      	mov	r1, r5
   d7dce:	f000 fbe3 	bl	d8598 <__aeabi_dsub>
   d7dd2:	4606      	mov	r6, r0
   d7dd4:	460f      	mov	r7, r1
   d7dd6:	4602      	mov	r2, r0
   d7dd8:	460b      	mov	r3, r1
   d7dda:	4620      	mov	r0, r4
   d7ddc:	4629      	mov	r1, r5
   d7dde:	f000 fd8f 	bl	d8900 <__aeabi_dmul>
   d7de2:	2200      	movs	r2, #0
   d7de4:	e9cd 0100 	strd	r0, r1, [sp]
   d7de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7dec:	4630      	mov	r0, r6
   d7dee:	4639      	mov	r1, r7
   d7df0:	f000 fbd2 	bl	d8598 <__aeabi_dsub>
   d7df4:	4602      	mov	r2, r0
   d7df6:	460b      	mov	r3, r1
   d7df8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7dfc:	f000 feaa 	bl	d8b54 <__aeabi_ddiv>
   d7e00:	4642      	mov	r2, r8
   d7e02:	4606      	mov	r6, r0
   d7e04:	460f      	mov	r7, r1
   d7e06:	464b      	mov	r3, r9
   d7e08:	4620      	mov	r0, r4
   d7e0a:	4629      	mov	r1, r5
   d7e0c:	f000 fd78 	bl	d8900 <__aeabi_dmul>
   d7e10:	4642      	mov	r2, r8
   d7e12:	464b      	mov	r3, r9
   d7e14:	f000 fbc2 	bl	d859c <__adddf3>
   d7e18:	4602      	mov	r2, r0
   d7e1a:	460b      	mov	r3, r1
   d7e1c:	4630      	mov	r0, r6
   d7e1e:	4639      	mov	r1, r7
   d7e20:	f000 fbba 	bl	d8598 <__aeabi_dsub>
   d7e24:	4622      	mov	r2, r4
   d7e26:	462b      	mov	r3, r5
   d7e28:	f000 fbb6 	bl	d8598 <__aeabi_dsub>
   d7e2c:	4602      	mov	r2, r0
   d7e2e:	460b      	mov	r3, r1
   d7e30:	2000      	movs	r0, #0
   d7e32:	4959      	ldr	r1, [pc, #356]	; (d7f98 <__ieee754_pow+0x940>)
   d7e34:	f000 fbb0 	bl	d8598 <__aeabi_dsub>
   d7e38:	448a      	add	sl, r1
   d7e3a:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
   d7e3e:	4602      	mov	r2, r0
   d7e40:	460b      	mov	r3, r1
   d7e42:	f2c0 815b 	blt.w	d80fc <__ieee754_pow+0xaa4>
   d7e46:	4651      	mov	r1, sl
   d7e48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   d7e4c:	f000 fd58 	bl	d8900 <__aeabi_dmul>
   d7e50:	ec41 0b10 	vmov	d0, r0, r1
   d7e54:	e449      	b.n	d76ea <__ieee754_pow+0x92>
   d7e56:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   d7e5a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   d7e5e:	ea54 030b 	orrs.w	r3, r4, fp
   d7e62:	f000 8137 	beq.w	d80d4 <__ieee754_pow+0xa7c>
   d7e66:	f1bb 0f01 	cmp.w	fp, #1
   d7e6a:	f47f ac80 	bne.w	d776e <__ieee754_pow+0x116>
   d7e6e:	4602      	mov	r2, r0
   d7e70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7e74:	ec43 2b10 	vmov	d0, r2, r3
   d7e78:	e437      	b.n	d76ea <__ieee754_pow+0x92>
   d7e7a:	4632      	mov	r2, r6
   d7e7c:	463b      	mov	r3, r7
   d7e7e:	4630      	mov	r0, r6
   d7e80:	4639      	mov	r1, r7
   d7e82:	f000 fd3d 	bl	d8900 <__aeabi_dmul>
   d7e86:	ec41 0b10 	vmov	d0, r0, r1
   d7e8a:	e42e      	b.n	d76ea <__ieee754_pow+0x92>
   d7e8c:	4b43      	ldr	r3, [pc, #268]	; (d7f9c <__ieee754_pow+0x944>)
   d7e8e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
   d7e92:	4598      	cmp	r8, r3
   d7e94:	f340 8115 	ble.w	d80c2 <__ieee754_pow+0xa6a>
   d7e98:	4b41      	ldr	r3, [pc, #260]	; (d7fa0 <__ieee754_pow+0x948>)
   d7e9a:	440b      	add	r3, r1
   d7e9c:	4303      	orrs	r3, r0
   d7e9e:	d10c      	bne.n	d7eba <__ieee754_pow+0x862>
   d7ea0:	4632      	mov	r2, r6
   d7ea2:	463b      	mov	r3, r7
   d7ea4:	f000 fb78 	bl	d8598 <__aeabi_dsub>
   d7ea8:	4602      	mov	r2, r0
   d7eaa:	460b      	mov	r3, r1
   d7eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   d7eb0:	f000 ffa2 	bl	d8df8 <__aeabi_dcmple>
   d7eb4:	2800      	cmp	r0, #0
   d7eb6:	f43f aee6 	beq.w	d7c86 <__ieee754_pow+0x62e>
   d7eba:	a32f      	add	r3, pc, #188	; (adr r3, d7f78 <__ieee754_pow+0x920>)
   d7ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d7ec4:	f000 fd1c 	bl	d8900 <__aeabi_dmul>
   d7ec8:	a32b      	add	r3, pc, #172	; (adr r3, d7f78 <__ieee754_pow+0x920>)
   d7eca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ece:	f000 fd17 	bl	d8900 <__aeabi_dmul>
   d7ed2:	ec41 0b10 	vmov	d0, r0, r1
   d7ed6:	e408      	b.n	d76ea <__ieee754_pow+0x92>
   d7ed8:	ed9f 7b29 	vldr	d7, [pc, #164]	; d7f80 <__ieee754_pow+0x928>
   d7edc:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7ee0:	e676      	b.n	d7bd0 <__ieee754_pow+0x578>
   d7ee2:	f1b9 0f00 	cmp.w	r9, #0
   d7ee6:	f6bf ac8e 	bge.w	d7806 <__ieee754_pow+0x1ae>
   d7eea:	e9dd 3400 	ldrd	r3, r4, [sp]
   d7eee:	ee00 3a10 	vmov	s0, r3
   d7ef2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   d7ef6:	ee00 3a90 	vmov	s1, r3
   d7efa:	f7ff bbf6 	b.w	d76ea <__ieee754_pow+0x92>
   d7efe:	4602      	mov	r2, r0
   d7f00:	460b      	mov	r3, r1
   d7f02:	2000      	movs	r0, #0
   d7f04:	4924      	ldr	r1, [pc, #144]	; (d7f98 <__ieee754_pow+0x940>)
   d7f06:	f000 fe25 	bl	d8b54 <__aeabi_ddiv>
   d7f0a:	e42d      	b.n	d7768 <__ieee754_pow+0x110>
   d7f0c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; d7f88 <__ieee754_pow+0x930>
   d7f10:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7f14:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d7f18:	ed9f 7b03 	vldr	d7, [pc, #12]	; d7f28 <__ieee754_pow+0x8d0>
   d7f1c:	f04f 0800 	mov.w	r8, #0
   d7f20:	ed8d 7b06 	vstr	d7, [sp, #24]
   d7f24:	e4be      	b.n	d78a4 <__ieee754_pow+0x24c>
   d7f26:	bf00      	nop
   d7f28:	00000000 	.word	0x00000000
   d7f2c:	3ff00000 	.word	0x3ff00000
   d7f30:	652b82fe 	.word	0x652b82fe
   d7f34:	3c971547 	.word	0x3c971547
   d7f38:	00000000 	.word	0x00000000
   d7f3c:	3fe62e43 	.word	0x3fe62e43
   d7f40:	fefa39ef 	.word	0xfefa39ef
   d7f44:	3fe62e42 	.word	0x3fe62e42
   d7f48:	0ca86c39 	.word	0x0ca86c39
   d7f4c:	be205c61 	.word	0xbe205c61
   d7f50:	72bea4d0 	.word	0x72bea4d0
   d7f54:	3e663769 	.word	0x3e663769
   d7f58:	c5d26bf1 	.word	0xc5d26bf1
   d7f5c:	3ebbbd41 	.word	0x3ebbbd41
   d7f60:	af25de2c 	.word	0xaf25de2c
   d7f64:	3f11566a 	.word	0x3f11566a
   d7f68:	16bebd93 	.word	0x16bebd93
   d7f6c:	3f66c16c 	.word	0x3f66c16c
   d7f70:	5555553e 	.word	0x5555553e
   d7f74:	3fc55555 	.word	0x3fc55555
   d7f78:	c2f8f359 	.word	0xc2f8f359
   d7f7c:	01a56e1f 	.word	0x01a56e1f
   d7f80:	00000000 	.word	0x00000000
   d7f84:	bff00000 	.word	0xbff00000
	...
   d7f90:	408fffff 	.word	0x408fffff
   d7f94:	000fffff 	.word	0x000fffff
   d7f98:	3ff00000 	.word	0x3ff00000
   d7f9c:	4090cbff 	.word	0x4090cbff
   d7fa0:	3f6f3400 	.word	0x3f6f3400
   d7fa4:	4b6c      	ldr	r3, [pc, #432]	; (d8158 <__ieee754_pow+0xb00>)
   d7fa6:	429c      	cmp	r4, r3
   d7fa8:	f77f ac2a 	ble.w	d7800 <__ieee754_pow+0x1a8>
   d7fac:	4b6b      	ldr	r3, [pc, #428]	; (d815c <__ieee754_pow+0xb04>)
   d7fae:	429c      	cmp	r4, r3
   d7fb0:	f73f abc3 	bgt.w	d773a <__ieee754_pow+0xe2>
   d7fb4:	2200      	movs	r2, #0
   d7fb6:	4b69      	ldr	r3, [pc, #420]	; (d815c <__ieee754_pow+0xb04>)
   d7fb8:	f000 faee 	bl	d8598 <__aeabi_dsub>
   d7fbc:	a356      	add	r3, pc, #344	; (adr r3, d8118 <__ieee754_pow+0xac0>)
   d7fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fc2:	4604      	mov	r4, r0
   d7fc4:	460d      	mov	r5, r1
   d7fc6:	f000 fc9b 	bl	d8900 <__aeabi_dmul>
   d7fca:	a355      	add	r3, pc, #340	; (adr r3, d8120 <__ieee754_pow+0xac8>)
   d7fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fd0:	4680      	mov	r8, r0
   d7fd2:	4689      	mov	r9, r1
   d7fd4:	4620      	mov	r0, r4
   d7fd6:	4629      	mov	r1, r5
   d7fd8:	f000 fc92 	bl	d8900 <__aeabi_dmul>
   d7fdc:	2200      	movs	r2, #0
   d7fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d7fe2:	4b5f      	ldr	r3, [pc, #380]	; (d8160 <__ieee754_pow+0xb08>)
   d7fe4:	4620      	mov	r0, r4
   d7fe6:	4629      	mov	r1, r5
   d7fe8:	f000 fc8a 	bl	d8900 <__aeabi_dmul>
   d7fec:	4602      	mov	r2, r0
   d7fee:	460b      	mov	r3, r1
   d7ff0:	a14d      	add	r1, pc, #308	; (adr r1, d8128 <__ieee754_pow+0xad0>)
   d7ff2:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7ff6:	f000 facf 	bl	d8598 <__aeabi_dsub>
   d7ffa:	4622      	mov	r2, r4
   d7ffc:	462b      	mov	r3, r5
   d7ffe:	f000 fc7f 	bl	d8900 <__aeabi_dmul>
   d8002:	4602      	mov	r2, r0
   d8004:	460b      	mov	r3, r1
   d8006:	2000      	movs	r0, #0
   d8008:	4956      	ldr	r1, [pc, #344]	; (d8164 <__ieee754_pow+0xb0c>)
   d800a:	f000 fac5 	bl	d8598 <__aeabi_dsub>
   d800e:	4622      	mov	r2, r4
   d8010:	462b      	mov	r3, r5
   d8012:	4606      	mov	r6, r0
   d8014:	460f      	mov	r7, r1
   d8016:	4620      	mov	r0, r4
   d8018:	4629      	mov	r1, r5
   d801a:	f000 fc71 	bl	d8900 <__aeabi_dmul>
   d801e:	4602      	mov	r2, r0
   d8020:	460b      	mov	r3, r1
   d8022:	4630      	mov	r0, r6
   d8024:	4639      	mov	r1, r7
   d8026:	f000 fc6b 	bl	d8900 <__aeabi_dmul>
   d802a:	a341      	add	r3, pc, #260	; (adr r3, d8130 <__ieee754_pow+0xad8>)
   d802c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8030:	f000 fc66 	bl	d8900 <__aeabi_dmul>
   d8034:	4602      	mov	r2, r0
   d8036:	460b      	mov	r3, r1
   d8038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d803c:	f000 faac 	bl	d8598 <__aeabi_dsub>
   d8040:	4602      	mov	r2, r0
   d8042:	460b      	mov	r3, r1
   d8044:	4604      	mov	r4, r0
   d8046:	460d      	mov	r5, r1
   d8048:	4640      	mov	r0, r8
   d804a:	4649      	mov	r1, r9
   d804c:	f000 faa6 	bl	d859c <__adddf3>
   d8050:	4642      	mov	r2, r8
   d8052:	464b      	mov	r3, r9
   d8054:	2000      	movs	r0, #0
   d8056:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d805a:	f000 fa9d 	bl	d8598 <__aeabi_dsub>
   d805e:	4602      	mov	r2, r0
   d8060:	460b      	mov	r3, r1
   d8062:	4620      	mov	r0, r4
   d8064:	4629      	mov	r1, r5
   d8066:	f000 fa97 	bl	d8598 <__aeabi_dsub>
   d806a:	4680      	mov	r8, r0
   d806c:	4689      	mov	r9, r1
   d806e:	e5a5      	b.n	d7bbc <__ieee754_pow+0x564>
   d8070:	4632      	mov	r2, r6
   d8072:	463b      	mov	r3, r7
   d8074:	2000      	movs	r0, #0
   d8076:	4939      	ldr	r1, [pc, #228]	; (d815c <__ieee754_pow+0xb04>)
   d8078:	f000 fd6c 	bl	d8b54 <__aeabi_ddiv>
   d807c:	ec41 0b10 	vmov	d0, r0, r1
   d8080:	f7ff bb33 	b.w	d76ea <__ieee754_pow+0x92>
   d8084:	a32c      	add	r3, pc, #176	; (adr r3, d8138 <__ieee754_pow+0xae0>)
   d8086:	e9d3 2300 	ldrd	r2, r3, [r3]
   d808a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   d808e:	f000 fc37 	bl	d8900 <__aeabi_dmul>
   d8092:	a329      	add	r3, pc, #164	; (adr r3, d8138 <__ieee754_pow+0xae0>)
   d8094:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8098:	f000 fc32 	bl	d8900 <__aeabi_dmul>
   d809c:	ec41 0b10 	vmov	d0, r0, r1
   d80a0:	f7ff bb23 	b.w	d76ea <__ieee754_pow+0x92>
   d80a4:	f1be 0f00 	cmp.w	lr, #0
   d80a8:	f47f ab2a 	bne.w	d7700 <__ieee754_pow+0xa8>
   d80ac:	f1c3 0314 	rsb	r3, r3, #20
   d80b0:	fa48 f203 	asr.w	r2, r8, r3
   d80b4:	fa02 f303 	lsl.w	r3, r2, r3
   d80b8:	4598      	cmp	r8, r3
   d80ba:	d027      	beq.n	d810c <__ieee754_pow+0xab4>
   d80bc:	46f3      	mov	fp, lr
   d80be:	f7ff baf7 	b.w	d76b0 <__ieee754_pow+0x58>
   d80c2:	4b28      	ldr	r3, [pc, #160]	; (d8164 <__ieee754_pow+0xb0c>)
   d80c4:	4598      	cmp	r8, r3
   d80c6:	f73f adde 	bgt.w	d7c86 <__ieee754_pow+0x62e>
   d80ca:	e9dd 3400 	ldrd	r3, r4, [sp]
   d80ce:	469a      	mov	sl, r3
   d80d0:	469b      	mov	fp, r3
   d80d2:	e607      	b.n	d7ce4 <__ieee754_pow+0x68c>
   d80d4:	4602      	mov	r2, r0
   d80d6:	460b      	mov	r3, r1
   d80d8:	f7ff bb89 	b.w	d77ee <__ieee754_pow+0x196>
   d80dc:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8140 <__ieee754_pow+0xae8>
   d80e0:	ed8d 7b08 	vstr	d7, [sp, #32]
   d80e4:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8148 <__ieee754_pow+0xaf0>
   d80e8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   d80ec:	ed9f 7b18 	vldr	d7, [pc, #96]	; d8150 <__ieee754_pow+0xaf8>
   d80f0:	f44f 2880 	mov.w	r8, #262144	; 0x40000
   d80f4:	ed8d 7b06 	vstr	d7, [sp, #24]
   d80f8:	f7ff bbd4 	b.w	d78a4 <__ieee754_pow+0x24c>
   d80fc:	4658      	mov	r0, fp
   d80fe:	ec43 2b10 	vmov	d0, r2, r3
   d8102:	f000 f9b1 	bl	d8468 <scalbn>
   d8106:	ec51 0b10 	vmov	r0, r1, d0
   d810a:	e69d      	b.n	d7e48 <__ieee754_pow+0x7f0>
   d810c:	f002 0201 	and.w	r2, r2, #1
   d8110:	f1c2 0b02 	rsb	fp, r2, #2
   d8114:	f7ff bacc 	b.w	d76b0 <__ieee754_pow+0x58>
   d8118:	60000000 	.word	0x60000000
   d811c:	3ff71547 	.word	0x3ff71547
   d8120:	f85ddf44 	.word	0xf85ddf44
   d8124:	3e54ae0b 	.word	0x3e54ae0b
   d8128:	55555555 	.word	0x55555555
   d812c:	3fd55555 	.word	0x3fd55555
   d8130:	652b82fe 	.word	0x652b82fe
   d8134:	3ff71547 	.word	0x3ff71547
   d8138:	8800759c 	.word	0x8800759c
   d813c:	7e37e43c 	.word	0x7e37e43c
   d8140:	40000000 	.word	0x40000000
   d8144:	3fe2b803 	.word	0x3fe2b803
   d8148:	43cfd006 	.word	0x43cfd006
   d814c:	3e4cfdeb 	.word	0x3e4cfdeb
   d8150:	00000000 	.word	0x00000000
   d8154:	3ff80000 	.word	0x3ff80000
   d8158:	3feffffe 	.word	0x3feffffe
   d815c:	3ff00000 	.word	0x3ff00000
   d8160:	3fd00000 	.word	0x3fd00000
   d8164:	3fe00000 	.word	0x3fe00000

000d8168 <__ieee754_sqrt>:
   d8168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d816c:	4965      	ldr	r1, [pc, #404]	; (d8304 <__ieee754_sqrt+0x19c>)
   d816e:	ec55 4b10 	vmov	r4, r5, d0
   d8172:	460e      	mov	r6, r1
   d8174:	4029      	ands	r1, r5
   d8176:	42b1      	cmp	r1, r6
   d8178:	f000 8097 	beq.w	d82aa <__ieee754_sqrt+0x142>
   d817c:	2d00      	cmp	r5, #0
   d817e:	462b      	mov	r3, r5
   d8180:	ee10 2a10 	vmov	r2, s0
   d8184:	dd74      	ble.n	d8270 <__ieee754_sqrt+0x108>
   d8186:	152f      	asrs	r7, r5, #20
   d8188:	d07f      	beq.n	d828a <__ieee754_sqrt+0x122>
   d818a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d818e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8192:	07f9      	lsls	r1, r7, #31
   d8194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8198:	d465      	bmi.n	d8266 <__ieee754_sqrt+0xfe>
   d819a:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d819e:	2600      	movs	r6, #0
   d81a0:	440b      	add	r3, r1
   d81a2:	107f      	asrs	r7, r7, #1
   d81a4:	0052      	lsls	r2, r2, #1
   d81a6:	46b6      	mov	lr, r6
   d81a8:	2016      	movs	r0, #22
   d81aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d81ae:	eb0e 0401 	add.w	r4, lr, r1
   d81b2:	429c      	cmp	r4, r3
   d81b4:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d81b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d81bc:	dc03      	bgt.n	d81c6 <__ieee754_sqrt+0x5e>
   d81be:	1b1b      	subs	r3, r3, r4
   d81c0:	eb04 0e01 	add.w	lr, r4, r1
   d81c4:	440e      	add	r6, r1
   d81c6:	3801      	subs	r0, #1
   d81c8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d81cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d81d0:	d1ed      	bne.n	d81ae <__ieee754_sqrt+0x46>
   d81d2:	4684      	mov	ip, r0
   d81d4:	2420      	movs	r4, #32
   d81d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d81da:	e009      	b.n	d81f0 <__ieee754_sqrt+0x88>
   d81dc:	d020      	beq.n	d8220 <__ieee754_sqrt+0xb8>
   d81de:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d81e2:	3c01      	subs	r4, #1
   d81e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d81e8:	442b      	add	r3, r5
   d81ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d81ee:	d020      	beq.n	d8232 <__ieee754_sqrt+0xca>
   d81f0:	459e      	cmp	lr, r3
   d81f2:	eb01 050c 	add.w	r5, r1, ip
   d81f6:	daf1      	bge.n	d81dc <__ieee754_sqrt+0x74>
   d81f8:	2d00      	cmp	r5, #0
   d81fa:	eb05 0c01 	add.w	ip, r5, r1
   d81fe:	db09      	blt.n	d8214 <__ieee754_sqrt+0xac>
   d8200:	46f0      	mov	r8, lr
   d8202:	4295      	cmp	r5, r2
   d8204:	ebce 0303 	rsb	r3, lr, r3
   d8208:	d900      	bls.n	d820c <__ieee754_sqrt+0xa4>
   d820a:	3b01      	subs	r3, #1
   d820c:	1b52      	subs	r2, r2, r5
   d820e:	4408      	add	r0, r1
   d8210:	46c6      	mov	lr, r8
   d8212:	e7e4      	b.n	d81de <__ieee754_sqrt+0x76>
   d8214:	f1bc 0f00 	cmp.w	ip, #0
   d8218:	dbf2      	blt.n	d8200 <__ieee754_sqrt+0x98>
   d821a:	f10e 0801 	add.w	r8, lr, #1
   d821e:	e7f0      	b.n	d8202 <__ieee754_sqrt+0x9a>
   d8220:	4295      	cmp	r5, r2
   d8222:	d81e      	bhi.n	d8262 <__ieee754_sqrt+0xfa>
   d8224:	2d00      	cmp	r5, #0
   d8226:	eb05 0c01 	add.w	ip, r5, r1
   d822a:	db50      	blt.n	d82ce <__ieee754_sqrt+0x166>
   d822c:	4698      	mov	r8, r3
   d822e:	2300      	movs	r3, #0
   d8230:	e7ec      	b.n	d820c <__ieee754_sqrt+0xa4>
   d8232:	4313      	orrs	r3, r2
   d8234:	d004      	beq.n	d8240 <__ieee754_sqrt+0xd8>
   d8236:	1c42      	adds	r2, r0, #1
   d8238:	d04d      	beq.n	d82d6 <__ieee754_sqrt+0x16e>
   d823a:	f000 0301 	and.w	r3, r0, #1
   d823e:	4418      	add	r0, r3
   d8240:	0840      	lsrs	r0, r0, #1
   d8242:	1071      	asrs	r1, r6, #1
   d8244:	07f3      	lsls	r3, r6, #31
   d8246:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d824a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d824e:	bf48      	it	mi
   d8250:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d8254:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d8258:	4602      	mov	r2, r0
   d825a:	ec43 2b10 	vmov	d0, r2, r3
   d825e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8262:	4673      	mov	r3, lr
   d8264:	e7bb      	b.n	d81de <__ieee754_sqrt+0x76>
   d8266:	005b      	lsls	r3, r3, #1
   d8268:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d826c:	0052      	lsls	r2, r2, #1
   d826e:	e794      	b.n	d819a <__ieee754_sqrt+0x32>
   d8270:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d8274:	4321      	orrs	r1, r4
   d8276:	d028      	beq.n	d82ca <__ieee754_sqrt+0x162>
   d8278:	bbad      	cbnz	r5, d82e6 <__ieee754_sqrt+0x17e>
   d827a:	462f      	mov	r7, r5
   d827c:	0ad3      	lsrs	r3, r2, #11
   d827e:	3f15      	subs	r7, #21
   d8280:	0552      	lsls	r2, r2, #21
   d8282:	2b00      	cmp	r3, #0
   d8284:	d0fa      	beq.n	d827c <__ieee754_sqrt+0x114>
   d8286:	02dd      	lsls	r5, r3, #11
   d8288:	d428      	bmi.n	d82dc <__ieee754_sqrt+0x174>
   d828a:	2100      	movs	r1, #0
   d828c:	e000      	b.n	d8290 <__ieee754_sqrt+0x128>
   d828e:	4601      	mov	r1, r0
   d8290:	005b      	lsls	r3, r3, #1
   d8292:	02dc      	lsls	r4, r3, #11
   d8294:	f101 0001 	add.w	r0, r1, #1
   d8298:	d5f9      	bpl.n	d828e <__ieee754_sqrt+0x126>
   d829a:	f1c0 0420 	rsb	r4, r0, #32
   d829e:	fa22 f404 	lsr.w	r4, r2, r4
   d82a2:	4323      	orrs	r3, r4
   d82a4:	1a7f      	subs	r7, r7, r1
   d82a6:	4082      	lsls	r2, r0
   d82a8:	e76f      	b.n	d818a <__ieee754_sqrt+0x22>
   d82aa:	ee10 2a10 	vmov	r2, s0
   d82ae:	462b      	mov	r3, r5
   d82b0:	ee10 0a10 	vmov	r0, s0
   d82b4:	4629      	mov	r1, r5
   d82b6:	f000 fb23 	bl	d8900 <__aeabi_dmul>
   d82ba:	4622      	mov	r2, r4
   d82bc:	462b      	mov	r3, r5
   d82be:	f000 f96d 	bl	d859c <__adddf3>
   d82c2:	ec41 0b10 	vmov	d0, r0, r1
   d82c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d82ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d82ce:	f1bc 0f00 	cmp.w	ip, #0
   d82d2:	daa2      	bge.n	d821a <__ieee754_sqrt+0xb2>
   d82d4:	e7aa      	b.n	d822c <__ieee754_sqrt+0xc4>
   d82d6:	3601      	adds	r6, #1
   d82d8:	4620      	mov	r0, r4
   d82da:	e7b2      	b.n	d8242 <__ieee754_sqrt+0xda>
   d82dc:	2420      	movs	r4, #32
   d82de:	f04f 31ff 	mov.w	r1, #4294967295
   d82e2:	2000      	movs	r0, #0
   d82e4:	e7db      	b.n	d829e <__ieee754_sqrt+0x136>
   d82e6:	ee10 2a10 	vmov	r2, s0
   d82ea:	462b      	mov	r3, r5
   d82ec:	4620      	mov	r0, r4
   d82ee:	4629      	mov	r1, r5
   d82f0:	f000 f952 	bl	d8598 <__aeabi_dsub>
   d82f4:	4602      	mov	r2, r0
   d82f6:	460b      	mov	r3, r1
   d82f8:	f000 fc2c 	bl	d8b54 <__aeabi_ddiv>
   d82fc:	ec41 0b10 	vmov	d0, r0, r1
   d8300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8304:	7ff00000 	.word	0x7ff00000

000d8308 <fabs>:
   d8308:	ec53 2b10 	vmov	r2, r3, d0
   d830c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   d8310:	ec43 2b10 	vmov	d0, r2, r3
   d8314:	4770      	bx	lr
   d8316:	bf00      	nop

000d8318 <finite>:
   d8318:	ee10 3a90 	vmov	r3, s1
   d831c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
   d8320:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8324:	0fc0      	lsrs	r0, r0, #31
   d8326:	4770      	bx	lr

000d8328 <matherr>:
   d8328:	2000      	movs	r0, #0
   d832a:	4770      	bx	lr
   d832c:	0000      	movs	r0, r0
	...

000d8330 <nan>:
   d8330:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8338 <nan+0x8>
   d8334:	4770      	bx	lr
   d8336:	bf00      	nop
   d8338:	00000000 	.word	0x00000000
   d833c:	7ff80000 	.word	0x7ff80000

000d8340 <rint>:
   d8340:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8342:	ec53 2b10 	vmov	r2, r3, d0
   d8346:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d834a:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d834e:	2813      	cmp	r0, #19
   d8350:	b083      	sub	sp, #12
   d8352:	4619      	mov	r1, r3
   d8354:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8358:	ee10 5a10 	vmov	r5, s0
   d835c:	dc2f      	bgt.n	d83be <rint+0x7e>
   d835e:	2800      	cmp	r0, #0
   d8360:	db49      	blt.n	d83f6 <rint+0xb6>
   d8362:	4e3f      	ldr	r6, [pc, #252]	; (d8460 <rint+0x120>)
   d8364:	4106      	asrs	r6, r0
   d8366:	ea03 0706 	and.w	r7, r3, r6
   d836a:	4317      	orrs	r7, r2
   d836c:	d02c      	beq.n	d83c8 <rint+0x88>
   d836e:	0876      	lsrs	r6, r6, #1
   d8370:	4033      	ands	r3, r6
   d8372:	431d      	orrs	r5, r3
   d8374:	d00c      	beq.n	d8390 <rint+0x50>
   d8376:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d837a:	2813      	cmp	r0, #19
   d837c:	ea21 0606 	bic.w	r6, r1, r6
   d8380:	fa43 f100 	asr.w	r1, r3, r0
   d8384:	ea41 0106 	orr.w	r1, r1, r6
   d8388:	bf0c      	ite	eq
   d838a:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d838e:	2500      	movne	r5, #0
   d8390:	4834      	ldr	r0, [pc, #208]	; (d8464 <rint+0x124>)
   d8392:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d8396:	462a      	mov	r2, r5
   d8398:	e9d4 4500 	ldrd	r4, r5, [r4]
   d839c:	4610      	mov	r0, r2
   d839e:	462b      	mov	r3, r5
   d83a0:	4622      	mov	r2, r4
   d83a2:	f000 f8fb 	bl	d859c <__adddf3>
   d83a6:	e9cd 0100 	strd	r0, r1, [sp]
   d83aa:	4622      	mov	r2, r4
   d83ac:	462b      	mov	r3, r5
   d83ae:	e9dd 0100 	ldrd	r0, r1, [sp]
   d83b2:	f000 f8f1 	bl	d8598 <__aeabi_dsub>
   d83b6:	ec41 0b10 	vmov	d0, r0, r1
   d83ba:	b003      	add	sp, #12
   d83bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d83be:	2833      	cmp	r0, #51	; 0x33
   d83c0:	dd06      	ble.n	d83d0 <rint+0x90>
   d83c2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d83c6:	d042      	beq.n	d844e <rint+0x10e>
   d83c8:	ec43 2b10 	vmov	d0, r2, r3
   d83cc:	b003      	add	sp, #12
   d83ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d83d0:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d83d4:	f04f 30ff 	mov.w	r0, #4294967295
   d83d8:	40f0      	lsrs	r0, r6
   d83da:	4202      	tst	r2, r0
   d83dc:	d0f4      	beq.n	d83c8 <rint+0x88>
   d83de:	0840      	lsrs	r0, r0, #1
   d83e0:	4202      	tst	r2, r0
   d83e2:	d0d5      	beq.n	d8390 <rint+0x50>
   d83e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d83e8:	ea25 0000 	bic.w	r0, r5, r0
   d83ec:	fa43 f606 	asr.w	r6, r3, r6
   d83f0:	ea46 0500 	orr.w	r5, r6, r0
   d83f4:	e7cc      	b.n	d8390 <rint+0x50>
   d83f6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d83fa:	4310      	orrs	r0, r2
   d83fc:	ee10 7a10 	vmov	r7, s0
   d8400:	d0e2      	beq.n	d83c8 <rint+0x88>
   d8402:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8406:	4307      	orrs	r7, r0
   d8408:	4278      	negs	r0, r7
   d840a:	4307      	orrs	r7, r0
   d840c:	4815      	ldr	r0, [pc, #84]	; (d8464 <rint+0x124>)
   d840e:	0c59      	lsrs	r1, r3, #17
   d8410:	0b3f      	lsrs	r7, r7, #12
   d8412:	0449      	lsls	r1, r1, #17
   d8414:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   d8418:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d841c:	ea47 0301 	orr.w	r3, r7, r1
   d8420:	e9d0 6700 	ldrd	r6, r7, [r0]
   d8424:	4619      	mov	r1, r3
   d8426:	4610      	mov	r0, r2
   d8428:	463b      	mov	r3, r7
   d842a:	4632      	mov	r2, r6
   d842c:	f000 f8b6 	bl	d859c <__adddf3>
   d8430:	e9cd 0100 	strd	r0, r1, [sp]
   d8434:	463b      	mov	r3, r7
   d8436:	4632      	mov	r2, r6
   d8438:	e9dd 0100 	ldrd	r0, r1, [sp]
   d843c:	f000 f8ac 	bl	d8598 <__aeabi_dsub>
   d8440:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8444:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d8448:	ec41 0b10 	vmov	d0, r0, r1
   d844c:	e7be      	b.n	d83cc <rint+0x8c>
   d844e:	ee10 0a10 	vmov	r0, s0
   d8452:	4619      	mov	r1, r3
   d8454:	f000 f8a2 	bl	d859c <__adddf3>
   d8458:	ec41 0b10 	vmov	d0, r0, r1
   d845c:	e7b6      	b.n	d83cc <rint+0x8c>
   d845e:	bf00      	nop
   d8460:	000fffff 	.word	0x000fffff
   d8464:	000d9d88 	.word	0x000d9d88

000d8468 <scalbn>:
   d8468:	ec53 2b10 	vmov	r2, r3, d0
   d846c:	b570      	push	{r4, r5, r6, lr}
   d846e:	f3c3 540a 	ubfx	r4, r3, #20, #11
   d8472:	4619      	mov	r1, r3
   d8474:	4605      	mov	r5, r0
   d8476:	bb14      	cbnz	r4, d84be <scalbn+0x56>
   d8478:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d847c:	4311      	orrs	r1, r2
   d847e:	d02a      	beq.n	d84d6 <scalbn+0x6e>
   d8480:	4619      	mov	r1, r3
   d8482:	2200      	movs	r2, #0
   d8484:	4b38      	ldr	r3, [pc, #224]	; (d8568 <scalbn+0x100>)
   d8486:	4e39      	ldr	r6, [pc, #228]	; (d856c <scalbn+0x104>)
   d8488:	ee10 0a10 	vmov	r0, s0
   d848c:	f000 fa38 	bl	d8900 <__aeabi_dmul>
   d8490:	42b5      	cmp	r5, r6
   d8492:	4602      	mov	r2, r0
   d8494:	460b      	mov	r3, r1
   d8496:	db1f      	blt.n	d84d8 <scalbn+0x70>
   d8498:	f3c1 540a 	ubfx	r4, r1, #20, #11
   d849c:	3c36      	subs	r4, #54	; 0x36
   d849e:	442c      	add	r4, r5
   d84a0:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d84a4:	4284      	cmp	r4, r0
   d84a6:	dc1f      	bgt.n	d84e8 <scalbn+0x80>
   d84a8:	2c00      	cmp	r4, #0
   d84aa:	dd2d      	ble.n	d8508 <scalbn+0xa0>
   d84ac:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d84b0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d84b4:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d84b8:	ec43 2b10 	vmov	d0, r2, r3
   d84bc:	bd70      	pop	{r4, r5, r6, pc}
   d84be:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d84c2:	4284      	cmp	r4, r0
   d84c4:	d1eb      	bne.n	d849e <scalbn+0x36>
   d84c6:	ee10 0a10 	vmov	r0, s0
   d84ca:	4619      	mov	r1, r3
   d84cc:	f000 f866 	bl	d859c <__adddf3>
   d84d0:	ec41 0b10 	vmov	d0, r0, r1
   d84d4:	bd70      	pop	{r4, r5, r6, pc}
   d84d6:	bd70      	pop	{r4, r5, r6, pc}
   d84d8:	a31f      	add	r3, pc, #124	; (adr r3, d8558 <scalbn+0xf0>)
   d84da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84de:	f000 fa0f 	bl	d8900 <__aeabi_dmul>
   d84e2:	ec41 0b10 	vmov	d0, r0, r1
   d84e6:	bd70      	pop	{r4, r5, r6, pc}
   d84e8:	ec43 2b11 	vmov	d1, r2, r3
   d84ec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; d8560 <scalbn+0xf8>
   d84f0:	f000 f840 	bl	d8574 <copysign>
   d84f4:	a31a      	add	r3, pc, #104	; (adr r3, d8560 <scalbn+0xf8>)
   d84f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84fa:	ec51 0b10 	vmov	r0, r1, d0
   d84fe:	f000 f9ff 	bl	d8900 <__aeabi_dmul>
   d8502:	ec41 0b10 	vmov	d0, r0, r1
   d8506:	bd70      	pop	{r4, r5, r6, pc}
   d8508:	f114 0f35 	cmn.w	r4, #53	; 0x35
   d850c:	da13      	bge.n	d8536 <scalbn+0xce>
   d850e:	f24c 3150 	movw	r1, #50000	; 0xc350
   d8512:	428d      	cmp	r5, r1
   d8514:	ec43 2b11 	vmov	d1, r2, r3
   d8518:	dce8      	bgt.n	d84ec <scalbn+0x84>
   d851a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; d8558 <scalbn+0xf0>
   d851e:	f000 f829 	bl	d8574 <copysign>
   d8522:	a30d      	add	r3, pc, #52	; (adr r3, d8558 <scalbn+0xf0>)
   d8524:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8528:	ec51 0b10 	vmov	r0, r1, d0
   d852c:	f000 f9e8 	bl	d8900 <__aeabi_dmul>
   d8530:	ec41 0b10 	vmov	d0, r0, r1
   d8534:	bd70      	pop	{r4, r5, r6, pc}
   d8536:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   d853a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   d853e:	3436      	adds	r4, #54	; 0x36
   d8540:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
   d8544:	4610      	mov	r0, r2
   d8546:	4619      	mov	r1, r3
   d8548:	2200      	movs	r2, #0
   d854a:	4b09      	ldr	r3, [pc, #36]	; (d8570 <scalbn+0x108>)
   d854c:	f000 f9d8 	bl	d8900 <__aeabi_dmul>
   d8550:	ec41 0b10 	vmov	d0, r0, r1
   d8554:	bd70      	pop	{r4, r5, r6, pc}
   d8556:	bf00      	nop
   d8558:	c2f8f359 	.word	0xc2f8f359
   d855c:	01a56e1f 	.word	0x01a56e1f
   d8560:	8800759c 	.word	0x8800759c
   d8564:	7e37e43c 	.word	0x7e37e43c
   d8568:	43500000 	.word	0x43500000
   d856c:	ffff3cb0 	.word	0xffff3cb0
   d8570:	3c900000 	.word	0x3c900000

000d8574 <copysign>:
   d8574:	ec53 2b10 	vmov	r2, r3, d0
   d8578:	ee11 0a90 	vmov	r0, s3
   d857c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   d8580:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   d8584:	ea41 0300 	orr.w	r3, r1, r0
   d8588:	ec43 2b10 	vmov	d0, r2, r3
   d858c:	4770      	bx	lr
   d858e:	bf00      	nop

000d8590 <__aeabi_drsub>:
   d8590:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8594:	e002      	b.n	d859c <__adddf3>
   d8596:	bf00      	nop

000d8598 <__aeabi_dsub>:
   d8598:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d859c <__adddf3>:
   d859c:	b530      	push	{r4, r5, lr}
   d859e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d85a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d85a6:	ea94 0f05 	teq	r4, r5
   d85aa:	bf08      	it	eq
   d85ac:	ea90 0f02 	teqeq	r0, r2
   d85b0:	bf1f      	itttt	ne
   d85b2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d85b6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d85ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d85be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d85c2:	f000 80e2 	beq.w	d878a <__adddf3+0x1ee>
   d85c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d85ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d85ce:	bfb8      	it	lt
   d85d0:	426d      	neglt	r5, r5
   d85d2:	dd0c      	ble.n	d85ee <__adddf3+0x52>
   d85d4:	442c      	add	r4, r5
   d85d6:	ea80 0202 	eor.w	r2, r0, r2
   d85da:	ea81 0303 	eor.w	r3, r1, r3
   d85de:	ea82 0000 	eor.w	r0, r2, r0
   d85e2:	ea83 0101 	eor.w	r1, r3, r1
   d85e6:	ea80 0202 	eor.w	r2, r0, r2
   d85ea:	ea81 0303 	eor.w	r3, r1, r3
   d85ee:	2d36      	cmp	r5, #54	; 0x36
   d85f0:	bf88      	it	hi
   d85f2:	bd30      	pophi	{r4, r5, pc}
   d85f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d85f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d85fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8600:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8604:	d002      	beq.n	d860c <__adddf3+0x70>
   d8606:	4240      	negs	r0, r0
   d8608:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d860c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8610:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8614:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8618:	d002      	beq.n	d8620 <__adddf3+0x84>
   d861a:	4252      	negs	r2, r2
   d861c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8620:	ea94 0f05 	teq	r4, r5
   d8624:	f000 80a7 	beq.w	d8776 <__adddf3+0x1da>
   d8628:	f1a4 0401 	sub.w	r4, r4, #1
   d862c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8630:	db0d      	blt.n	d864e <__adddf3+0xb2>
   d8632:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8636:	fa22 f205 	lsr.w	r2, r2, r5
   d863a:	1880      	adds	r0, r0, r2
   d863c:	f141 0100 	adc.w	r1, r1, #0
   d8640:	fa03 f20e 	lsl.w	r2, r3, lr
   d8644:	1880      	adds	r0, r0, r2
   d8646:	fa43 f305 	asr.w	r3, r3, r5
   d864a:	4159      	adcs	r1, r3
   d864c:	e00e      	b.n	d866c <__adddf3+0xd0>
   d864e:	f1a5 0520 	sub.w	r5, r5, #32
   d8652:	f10e 0e20 	add.w	lr, lr, #32
   d8656:	2a01      	cmp	r2, #1
   d8658:	fa03 fc0e 	lsl.w	ip, r3, lr
   d865c:	bf28      	it	cs
   d865e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8662:	fa43 f305 	asr.w	r3, r3, r5
   d8666:	18c0      	adds	r0, r0, r3
   d8668:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d866c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8670:	d507      	bpl.n	d8682 <__adddf3+0xe6>
   d8672:	f04f 0e00 	mov.w	lr, #0
   d8676:	f1dc 0c00 	rsbs	ip, ip, #0
   d867a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d867e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8682:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8686:	d31b      	bcc.n	d86c0 <__adddf3+0x124>
   d8688:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d868c:	d30c      	bcc.n	d86a8 <__adddf3+0x10c>
   d868e:	0849      	lsrs	r1, r1, #1
   d8690:	ea5f 0030 	movs.w	r0, r0, rrx
   d8694:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8698:	f104 0401 	add.w	r4, r4, #1
   d869c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d86a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d86a4:	f080 809a 	bcs.w	d87dc <__adddf3+0x240>
   d86a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d86ac:	bf08      	it	eq
   d86ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d86b2:	f150 0000 	adcs.w	r0, r0, #0
   d86b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d86ba:	ea41 0105 	orr.w	r1, r1, r5
   d86be:	bd30      	pop	{r4, r5, pc}
   d86c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d86c4:	4140      	adcs	r0, r0
   d86c6:	eb41 0101 	adc.w	r1, r1, r1
   d86ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d86ce:	f1a4 0401 	sub.w	r4, r4, #1
   d86d2:	d1e9      	bne.n	d86a8 <__adddf3+0x10c>
   d86d4:	f091 0f00 	teq	r1, #0
   d86d8:	bf04      	itt	eq
   d86da:	4601      	moveq	r1, r0
   d86dc:	2000      	moveq	r0, #0
   d86de:	fab1 f381 	clz	r3, r1
   d86e2:	bf08      	it	eq
   d86e4:	3320      	addeq	r3, #32
   d86e6:	f1a3 030b 	sub.w	r3, r3, #11
   d86ea:	f1b3 0220 	subs.w	r2, r3, #32
   d86ee:	da0c      	bge.n	d870a <__adddf3+0x16e>
   d86f0:	320c      	adds	r2, #12
   d86f2:	dd08      	ble.n	d8706 <__adddf3+0x16a>
   d86f4:	f102 0c14 	add.w	ip, r2, #20
   d86f8:	f1c2 020c 	rsb	r2, r2, #12
   d86fc:	fa01 f00c 	lsl.w	r0, r1, ip
   d8700:	fa21 f102 	lsr.w	r1, r1, r2
   d8704:	e00c      	b.n	d8720 <__adddf3+0x184>
   d8706:	f102 0214 	add.w	r2, r2, #20
   d870a:	bfd8      	it	le
   d870c:	f1c2 0c20 	rsble	ip, r2, #32
   d8710:	fa01 f102 	lsl.w	r1, r1, r2
   d8714:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8718:	bfdc      	itt	le
   d871a:	ea41 010c 	orrle.w	r1, r1, ip
   d871e:	4090      	lslle	r0, r2
   d8720:	1ae4      	subs	r4, r4, r3
   d8722:	bfa2      	ittt	ge
   d8724:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8728:	4329      	orrge	r1, r5
   d872a:	bd30      	popge	{r4, r5, pc}
   d872c:	ea6f 0404 	mvn.w	r4, r4
   d8730:	3c1f      	subs	r4, #31
   d8732:	da1c      	bge.n	d876e <__adddf3+0x1d2>
   d8734:	340c      	adds	r4, #12
   d8736:	dc0e      	bgt.n	d8756 <__adddf3+0x1ba>
   d8738:	f104 0414 	add.w	r4, r4, #20
   d873c:	f1c4 0220 	rsb	r2, r4, #32
   d8740:	fa20 f004 	lsr.w	r0, r0, r4
   d8744:	fa01 f302 	lsl.w	r3, r1, r2
   d8748:	ea40 0003 	orr.w	r0, r0, r3
   d874c:	fa21 f304 	lsr.w	r3, r1, r4
   d8750:	ea45 0103 	orr.w	r1, r5, r3
   d8754:	bd30      	pop	{r4, r5, pc}
   d8756:	f1c4 040c 	rsb	r4, r4, #12
   d875a:	f1c4 0220 	rsb	r2, r4, #32
   d875e:	fa20 f002 	lsr.w	r0, r0, r2
   d8762:	fa01 f304 	lsl.w	r3, r1, r4
   d8766:	ea40 0003 	orr.w	r0, r0, r3
   d876a:	4629      	mov	r1, r5
   d876c:	bd30      	pop	{r4, r5, pc}
   d876e:	fa21 f004 	lsr.w	r0, r1, r4
   d8772:	4629      	mov	r1, r5
   d8774:	bd30      	pop	{r4, r5, pc}
   d8776:	f094 0f00 	teq	r4, #0
   d877a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d877e:	bf06      	itte	eq
   d8780:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8784:	3401      	addeq	r4, #1
   d8786:	3d01      	subne	r5, #1
   d8788:	e74e      	b.n	d8628 <__adddf3+0x8c>
   d878a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d878e:	bf18      	it	ne
   d8790:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8794:	d029      	beq.n	d87ea <__adddf3+0x24e>
   d8796:	ea94 0f05 	teq	r4, r5
   d879a:	bf08      	it	eq
   d879c:	ea90 0f02 	teqeq	r0, r2
   d87a0:	d005      	beq.n	d87ae <__adddf3+0x212>
   d87a2:	ea54 0c00 	orrs.w	ip, r4, r0
   d87a6:	bf04      	itt	eq
   d87a8:	4619      	moveq	r1, r3
   d87aa:	4610      	moveq	r0, r2
   d87ac:	bd30      	pop	{r4, r5, pc}
   d87ae:	ea91 0f03 	teq	r1, r3
   d87b2:	bf1e      	ittt	ne
   d87b4:	2100      	movne	r1, #0
   d87b6:	2000      	movne	r0, #0
   d87b8:	bd30      	popne	{r4, r5, pc}
   d87ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d87be:	d105      	bne.n	d87cc <__adddf3+0x230>
   d87c0:	0040      	lsls	r0, r0, #1
   d87c2:	4149      	adcs	r1, r1
   d87c4:	bf28      	it	cs
   d87c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d87ca:	bd30      	pop	{r4, r5, pc}
   d87cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d87d0:	bf3c      	itt	cc
   d87d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d87d6:	bd30      	popcc	{r4, r5, pc}
   d87d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d87dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d87e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d87e4:	f04f 0000 	mov.w	r0, #0
   d87e8:	bd30      	pop	{r4, r5, pc}
   d87ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d87ee:	bf1a      	itte	ne
   d87f0:	4619      	movne	r1, r3
   d87f2:	4610      	movne	r0, r2
   d87f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d87f8:	bf1c      	itt	ne
   d87fa:	460b      	movne	r3, r1
   d87fc:	4602      	movne	r2, r0
   d87fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8802:	bf06      	itte	eq
   d8804:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8808:	ea91 0f03 	teqeq	r1, r3
   d880c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8810:	bd30      	pop	{r4, r5, pc}
   d8812:	bf00      	nop

000d8814 <__aeabi_ui2d>:
   d8814:	f090 0f00 	teq	r0, #0
   d8818:	bf04      	itt	eq
   d881a:	2100      	moveq	r1, #0
   d881c:	4770      	bxeq	lr
   d881e:	b530      	push	{r4, r5, lr}
   d8820:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8824:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8828:	f04f 0500 	mov.w	r5, #0
   d882c:	f04f 0100 	mov.w	r1, #0
   d8830:	e750      	b.n	d86d4 <__adddf3+0x138>
   d8832:	bf00      	nop

000d8834 <__aeabi_i2d>:
   d8834:	f090 0f00 	teq	r0, #0
   d8838:	bf04      	itt	eq
   d883a:	2100      	moveq	r1, #0
   d883c:	4770      	bxeq	lr
   d883e:	b530      	push	{r4, r5, lr}
   d8840:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8844:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8848:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d884c:	bf48      	it	mi
   d884e:	4240      	negmi	r0, r0
   d8850:	f04f 0100 	mov.w	r1, #0
   d8854:	e73e      	b.n	d86d4 <__adddf3+0x138>
   d8856:	bf00      	nop

000d8858 <__aeabi_f2d>:
   d8858:	0042      	lsls	r2, r0, #1
   d885a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d885e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8862:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8866:	bf1f      	itttt	ne
   d8868:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d886c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8870:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8874:	4770      	bxne	lr
   d8876:	f092 0f00 	teq	r2, #0
   d887a:	bf14      	ite	ne
   d887c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8880:	4770      	bxeq	lr
   d8882:	b530      	push	{r4, r5, lr}
   d8884:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8888:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d888c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8890:	e720      	b.n	d86d4 <__adddf3+0x138>
   d8892:	bf00      	nop

000d8894 <__aeabi_ul2d>:
   d8894:	ea50 0201 	orrs.w	r2, r0, r1
   d8898:	bf08      	it	eq
   d889a:	4770      	bxeq	lr
   d889c:	b530      	push	{r4, r5, lr}
   d889e:	f04f 0500 	mov.w	r5, #0
   d88a2:	e00a      	b.n	d88ba <__aeabi_l2d+0x16>

000d88a4 <__aeabi_l2d>:
   d88a4:	ea50 0201 	orrs.w	r2, r0, r1
   d88a8:	bf08      	it	eq
   d88aa:	4770      	bxeq	lr
   d88ac:	b530      	push	{r4, r5, lr}
   d88ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d88b2:	d502      	bpl.n	d88ba <__aeabi_l2d+0x16>
   d88b4:	4240      	negs	r0, r0
   d88b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d88ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d88be:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d88c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d88c6:	f43f aedc 	beq.w	d8682 <__adddf3+0xe6>
   d88ca:	f04f 0203 	mov.w	r2, #3
   d88ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d88d2:	bf18      	it	ne
   d88d4:	3203      	addne	r2, #3
   d88d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d88da:	bf18      	it	ne
   d88dc:	3203      	addne	r2, #3
   d88de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d88e2:	f1c2 0320 	rsb	r3, r2, #32
   d88e6:	fa00 fc03 	lsl.w	ip, r0, r3
   d88ea:	fa20 f002 	lsr.w	r0, r0, r2
   d88ee:	fa01 fe03 	lsl.w	lr, r1, r3
   d88f2:	ea40 000e 	orr.w	r0, r0, lr
   d88f6:	fa21 f102 	lsr.w	r1, r1, r2
   d88fa:	4414      	add	r4, r2
   d88fc:	e6c1      	b.n	d8682 <__adddf3+0xe6>
   d88fe:	bf00      	nop

000d8900 <__aeabi_dmul>:
   d8900:	b570      	push	{r4, r5, r6, lr}
   d8902:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8906:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d890a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d890e:	bf1d      	ittte	ne
   d8910:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8914:	ea94 0f0c 	teqne	r4, ip
   d8918:	ea95 0f0c 	teqne	r5, ip
   d891c:	f000 f8de 	bleq	d8adc <__aeabi_dmul+0x1dc>
   d8920:	442c      	add	r4, r5
   d8922:	ea81 0603 	eor.w	r6, r1, r3
   d8926:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d892a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d892e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8932:	bf18      	it	ne
   d8934:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d893c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8940:	d038      	beq.n	d89b4 <__aeabi_dmul+0xb4>
   d8942:	fba0 ce02 	umull	ip, lr, r0, r2
   d8946:	f04f 0500 	mov.w	r5, #0
   d894a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d894e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8952:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8956:	f04f 0600 	mov.w	r6, #0
   d895a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d895e:	f09c 0f00 	teq	ip, #0
   d8962:	bf18      	it	ne
   d8964:	f04e 0e01 	orrne.w	lr, lr, #1
   d8968:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d896c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8970:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8974:	d204      	bcs.n	d8980 <__aeabi_dmul+0x80>
   d8976:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d897a:	416d      	adcs	r5, r5
   d897c:	eb46 0606 	adc.w	r6, r6, r6
   d8980:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8984:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8988:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d898c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8990:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8994:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8998:	bf88      	it	hi
   d899a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d899e:	d81e      	bhi.n	d89de <__aeabi_dmul+0xde>
   d89a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d89a4:	bf08      	it	eq
   d89a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d89aa:	f150 0000 	adcs.w	r0, r0, #0
   d89ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d89b2:	bd70      	pop	{r4, r5, r6, pc}
   d89b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d89b8:	ea46 0101 	orr.w	r1, r6, r1
   d89bc:	ea40 0002 	orr.w	r0, r0, r2
   d89c0:	ea81 0103 	eor.w	r1, r1, r3
   d89c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d89c8:	bfc2      	ittt	gt
   d89ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d89ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d89d2:	bd70      	popgt	{r4, r5, r6, pc}
   d89d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d89d8:	f04f 0e00 	mov.w	lr, #0
   d89dc:	3c01      	subs	r4, #1
   d89de:	f300 80ab 	bgt.w	d8b38 <__aeabi_dmul+0x238>
   d89e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d89e6:	bfde      	ittt	le
   d89e8:	2000      	movle	r0, #0
   d89ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d89ee:	bd70      	pople	{r4, r5, r6, pc}
   d89f0:	f1c4 0400 	rsb	r4, r4, #0
   d89f4:	3c20      	subs	r4, #32
   d89f6:	da35      	bge.n	d8a64 <__aeabi_dmul+0x164>
   d89f8:	340c      	adds	r4, #12
   d89fa:	dc1b      	bgt.n	d8a34 <__aeabi_dmul+0x134>
   d89fc:	f104 0414 	add.w	r4, r4, #20
   d8a00:	f1c4 0520 	rsb	r5, r4, #32
   d8a04:	fa00 f305 	lsl.w	r3, r0, r5
   d8a08:	fa20 f004 	lsr.w	r0, r0, r4
   d8a0c:	fa01 f205 	lsl.w	r2, r1, r5
   d8a10:	ea40 0002 	orr.w	r0, r0, r2
   d8a14:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8a18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8a1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8a20:	fa21 f604 	lsr.w	r6, r1, r4
   d8a24:	eb42 0106 	adc.w	r1, r2, r6
   d8a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8a2c:	bf08      	it	eq
   d8a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8a32:	bd70      	pop	{r4, r5, r6, pc}
   d8a34:	f1c4 040c 	rsb	r4, r4, #12
   d8a38:	f1c4 0520 	rsb	r5, r4, #32
   d8a3c:	fa00 f304 	lsl.w	r3, r0, r4
   d8a40:	fa20 f005 	lsr.w	r0, r0, r5
   d8a44:	fa01 f204 	lsl.w	r2, r1, r4
   d8a48:	ea40 0002 	orr.w	r0, r0, r2
   d8a4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8a50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8a54:	f141 0100 	adc.w	r1, r1, #0
   d8a58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8a5c:	bf08      	it	eq
   d8a5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8a62:	bd70      	pop	{r4, r5, r6, pc}
   d8a64:	f1c4 0520 	rsb	r5, r4, #32
   d8a68:	fa00 f205 	lsl.w	r2, r0, r5
   d8a6c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8a70:	fa20 f304 	lsr.w	r3, r0, r4
   d8a74:	fa01 f205 	lsl.w	r2, r1, r5
   d8a78:	ea43 0302 	orr.w	r3, r3, r2
   d8a7c:	fa21 f004 	lsr.w	r0, r1, r4
   d8a80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8a84:	fa21 f204 	lsr.w	r2, r1, r4
   d8a88:	ea20 0002 	bic.w	r0, r0, r2
   d8a8c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8a90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8a94:	bf08      	it	eq
   d8a96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8a9a:	bd70      	pop	{r4, r5, r6, pc}
   d8a9c:	f094 0f00 	teq	r4, #0
   d8aa0:	d10f      	bne.n	d8ac2 <__aeabi_dmul+0x1c2>
   d8aa2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8aa6:	0040      	lsls	r0, r0, #1
   d8aa8:	eb41 0101 	adc.w	r1, r1, r1
   d8aac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ab0:	bf08      	it	eq
   d8ab2:	3c01      	subeq	r4, #1
   d8ab4:	d0f7      	beq.n	d8aa6 <__aeabi_dmul+0x1a6>
   d8ab6:	ea41 0106 	orr.w	r1, r1, r6
   d8aba:	f095 0f00 	teq	r5, #0
   d8abe:	bf18      	it	ne
   d8ac0:	4770      	bxne	lr
   d8ac2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8ac6:	0052      	lsls	r2, r2, #1
   d8ac8:	eb43 0303 	adc.w	r3, r3, r3
   d8acc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8ad0:	bf08      	it	eq
   d8ad2:	3d01      	subeq	r5, #1
   d8ad4:	d0f7      	beq.n	d8ac6 <__aeabi_dmul+0x1c6>
   d8ad6:	ea43 0306 	orr.w	r3, r3, r6
   d8ada:	4770      	bx	lr
   d8adc:	ea94 0f0c 	teq	r4, ip
   d8ae0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8ae4:	bf18      	it	ne
   d8ae6:	ea95 0f0c 	teqne	r5, ip
   d8aea:	d00c      	beq.n	d8b06 <__aeabi_dmul+0x206>
   d8aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8af0:	bf18      	it	ne
   d8af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8af6:	d1d1      	bne.n	d8a9c <__aeabi_dmul+0x19c>
   d8af8:	ea81 0103 	eor.w	r1, r1, r3
   d8afc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b00:	f04f 0000 	mov.w	r0, #0
   d8b04:	bd70      	pop	{r4, r5, r6, pc}
   d8b06:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8b0a:	bf06      	itte	eq
   d8b0c:	4610      	moveq	r0, r2
   d8b0e:	4619      	moveq	r1, r3
   d8b10:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8b14:	d019      	beq.n	d8b4a <__aeabi_dmul+0x24a>
   d8b16:	ea94 0f0c 	teq	r4, ip
   d8b1a:	d102      	bne.n	d8b22 <__aeabi_dmul+0x222>
   d8b1c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8b20:	d113      	bne.n	d8b4a <__aeabi_dmul+0x24a>
   d8b22:	ea95 0f0c 	teq	r5, ip
   d8b26:	d105      	bne.n	d8b34 <__aeabi_dmul+0x234>
   d8b28:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8b2c:	bf1c      	itt	ne
   d8b2e:	4610      	movne	r0, r2
   d8b30:	4619      	movne	r1, r3
   d8b32:	d10a      	bne.n	d8b4a <__aeabi_dmul+0x24a>
   d8b34:	ea81 0103 	eor.w	r1, r1, r3
   d8b38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8b3c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8b40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8b44:	f04f 0000 	mov.w	r0, #0
   d8b48:	bd70      	pop	{r4, r5, r6, pc}
   d8b4a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8b4e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8b52:	bd70      	pop	{r4, r5, r6, pc}

000d8b54 <__aeabi_ddiv>:
   d8b54:	b570      	push	{r4, r5, r6, lr}
   d8b56:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8b5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8b5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8b62:	bf1d      	ittte	ne
   d8b64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8b68:	ea94 0f0c 	teqne	r4, ip
   d8b6c:	ea95 0f0c 	teqne	r5, ip
   d8b70:	f000 f8a7 	bleq	d8cc2 <__aeabi_ddiv+0x16e>
   d8b74:	eba4 0405 	sub.w	r4, r4, r5
   d8b78:	ea81 0e03 	eor.w	lr, r1, r3
   d8b7c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8b80:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8b84:	f000 8088 	beq.w	d8c98 <__aeabi_ddiv+0x144>
   d8b88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8b8c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8b90:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8b94:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8b98:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8b9c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8ba0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8ba4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8ba8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8bac:	429d      	cmp	r5, r3
   d8bae:	bf08      	it	eq
   d8bb0:	4296      	cmpeq	r6, r2
   d8bb2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8bb6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8bba:	d202      	bcs.n	d8bc2 <__aeabi_ddiv+0x6e>
   d8bbc:	085b      	lsrs	r3, r3, #1
   d8bbe:	ea4f 0232 	mov.w	r2, r2, rrx
   d8bc2:	1ab6      	subs	r6, r6, r2
   d8bc4:	eb65 0503 	sbc.w	r5, r5, r3
   d8bc8:	085b      	lsrs	r3, r3, #1
   d8bca:	ea4f 0232 	mov.w	r2, r2, rrx
   d8bce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8bd2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8bd6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8bda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8bde:	bf22      	ittt	cs
   d8be0:	1ab6      	subcs	r6, r6, r2
   d8be2:	4675      	movcs	r5, lr
   d8be4:	ea40 000c 	orrcs.w	r0, r0, ip
   d8be8:	085b      	lsrs	r3, r3, #1
   d8bea:	ea4f 0232 	mov.w	r2, r2, rrx
   d8bee:	ebb6 0e02 	subs.w	lr, r6, r2
   d8bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8bf6:	bf22      	ittt	cs
   d8bf8:	1ab6      	subcs	r6, r6, r2
   d8bfa:	4675      	movcs	r5, lr
   d8bfc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8c00:	085b      	lsrs	r3, r3, #1
   d8c02:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c06:	ebb6 0e02 	subs.w	lr, r6, r2
   d8c0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8c0e:	bf22      	ittt	cs
   d8c10:	1ab6      	subcs	r6, r6, r2
   d8c12:	4675      	movcs	r5, lr
   d8c14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8c18:	085b      	lsrs	r3, r3, #1
   d8c1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8c1e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8c22:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8c26:	bf22      	ittt	cs
   d8c28:	1ab6      	subcs	r6, r6, r2
   d8c2a:	4675      	movcs	r5, lr
   d8c2c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8c30:	ea55 0e06 	orrs.w	lr, r5, r6
   d8c34:	d018      	beq.n	d8c68 <__aeabi_ddiv+0x114>
   d8c36:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8c3a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8c3e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8c42:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8c46:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8c4a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8c4e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8c52:	d1c0      	bne.n	d8bd6 <__aeabi_ddiv+0x82>
   d8c54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c58:	d10b      	bne.n	d8c72 <__aeabi_ddiv+0x11e>
   d8c5a:	ea41 0100 	orr.w	r1, r1, r0
   d8c5e:	f04f 0000 	mov.w	r0, #0
   d8c62:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8c66:	e7b6      	b.n	d8bd6 <__aeabi_ddiv+0x82>
   d8c68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c6c:	bf04      	itt	eq
   d8c6e:	4301      	orreq	r1, r0
   d8c70:	2000      	moveq	r0, #0
   d8c72:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8c76:	bf88      	it	hi
   d8c78:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8c7c:	f63f aeaf 	bhi.w	d89de <__aeabi_dmul+0xde>
   d8c80:	ebb5 0c03 	subs.w	ip, r5, r3
   d8c84:	bf04      	itt	eq
   d8c86:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8c8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8c8e:	f150 0000 	adcs.w	r0, r0, #0
   d8c92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c96:	bd70      	pop	{r4, r5, r6, pc}
   d8c98:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8c9c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8ca0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8ca4:	bfc2      	ittt	gt
   d8ca6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8caa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8cae:	bd70      	popgt	{r4, r5, r6, pc}
   d8cb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8cb4:	f04f 0e00 	mov.w	lr, #0
   d8cb8:	3c01      	subs	r4, #1
   d8cba:	e690      	b.n	d89de <__aeabi_dmul+0xde>
   d8cbc:	ea45 0e06 	orr.w	lr, r5, r6
   d8cc0:	e68d      	b.n	d89de <__aeabi_dmul+0xde>
   d8cc2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8cc6:	ea94 0f0c 	teq	r4, ip
   d8cca:	bf08      	it	eq
   d8ccc:	ea95 0f0c 	teqeq	r5, ip
   d8cd0:	f43f af3b 	beq.w	d8b4a <__aeabi_dmul+0x24a>
   d8cd4:	ea94 0f0c 	teq	r4, ip
   d8cd8:	d10a      	bne.n	d8cf0 <__aeabi_ddiv+0x19c>
   d8cda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8cde:	f47f af34 	bne.w	d8b4a <__aeabi_dmul+0x24a>
   d8ce2:	ea95 0f0c 	teq	r5, ip
   d8ce6:	f47f af25 	bne.w	d8b34 <__aeabi_dmul+0x234>
   d8cea:	4610      	mov	r0, r2
   d8cec:	4619      	mov	r1, r3
   d8cee:	e72c      	b.n	d8b4a <__aeabi_dmul+0x24a>
   d8cf0:	ea95 0f0c 	teq	r5, ip
   d8cf4:	d106      	bne.n	d8d04 <__aeabi_ddiv+0x1b0>
   d8cf6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8cfa:	f43f aefd 	beq.w	d8af8 <__aeabi_dmul+0x1f8>
   d8cfe:	4610      	mov	r0, r2
   d8d00:	4619      	mov	r1, r3
   d8d02:	e722      	b.n	d8b4a <__aeabi_dmul+0x24a>
   d8d04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d08:	bf18      	it	ne
   d8d0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d0e:	f47f aec5 	bne.w	d8a9c <__aeabi_dmul+0x19c>
   d8d12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8d16:	f47f af0d 	bne.w	d8b34 <__aeabi_dmul+0x234>
   d8d1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8d1e:	f47f aeeb 	bne.w	d8af8 <__aeabi_dmul+0x1f8>
   d8d22:	e712      	b.n	d8b4a <__aeabi_dmul+0x24a>

000d8d24 <__gedf2>:
   d8d24:	f04f 3cff 	mov.w	ip, #4294967295
   d8d28:	e006      	b.n	d8d38 <__cmpdf2+0x4>
   d8d2a:	bf00      	nop

000d8d2c <__ledf2>:
   d8d2c:	f04f 0c01 	mov.w	ip, #1
   d8d30:	e002      	b.n	d8d38 <__cmpdf2+0x4>
   d8d32:	bf00      	nop

000d8d34 <__cmpdf2>:
   d8d34:	f04f 0c01 	mov.w	ip, #1
   d8d38:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8d3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8d40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8d44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8d48:	bf18      	it	ne
   d8d4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8d4e:	d01b      	beq.n	d8d88 <__cmpdf2+0x54>
   d8d50:	b001      	add	sp, #4
   d8d52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8d56:	bf0c      	ite	eq
   d8d58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8d5c:	ea91 0f03 	teqne	r1, r3
   d8d60:	bf02      	ittt	eq
   d8d62:	ea90 0f02 	teqeq	r0, r2
   d8d66:	2000      	moveq	r0, #0
   d8d68:	4770      	bxeq	lr
   d8d6a:	f110 0f00 	cmn.w	r0, #0
   d8d6e:	ea91 0f03 	teq	r1, r3
   d8d72:	bf58      	it	pl
   d8d74:	4299      	cmppl	r1, r3
   d8d76:	bf08      	it	eq
   d8d78:	4290      	cmpeq	r0, r2
   d8d7a:	bf2c      	ite	cs
   d8d7c:	17d8      	asrcs	r0, r3, #31
   d8d7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8d82:	f040 0001 	orr.w	r0, r0, #1
   d8d86:	4770      	bx	lr
   d8d88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8d8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8d90:	d102      	bne.n	d8d98 <__cmpdf2+0x64>
   d8d92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8d96:	d107      	bne.n	d8da8 <__cmpdf2+0x74>
   d8d98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8d9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8da0:	d1d6      	bne.n	d8d50 <__cmpdf2+0x1c>
   d8da2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8da6:	d0d3      	beq.n	d8d50 <__cmpdf2+0x1c>
   d8da8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8dac:	4770      	bx	lr
   d8dae:	bf00      	nop

000d8db0 <__aeabi_cdrcmple>:
   d8db0:	4684      	mov	ip, r0
   d8db2:	4610      	mov	r0, r2
   d8db4:	4662      	mov	r2, ip
   d8db6:	468c      	mov	ip, r1
   d8db8:	4619      	mov	r1, r3
   d8dba:	4663      	mov	r3, ip
   d8dbc:	e000      	b.n	d8dc0 <__aeabi_cdcmpeq>
   d8dbe:	bf00      	nop

000d8dc0 <__aeabi_cdcmpeq>:
   d8dc0:	b501      	push	{r0, lr}
   d8dc2:	f7ff ffb7 	bl	d8d34 <__cmpdf2>
   d8dc6:	2800      	cmp	r0, #0
   d8dc8:	bf48      	it	mi
   d8dca:	f110 0f00 	cmnmi.w	r0, #0
   d8dce:	bd01      	pop	{r0, pc}

000d8dd0 <__aeabi_dcmpeq>:
   d8dd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8dd4:	f7ff fff4 	bl	d8dc0 <__aeabi_cdcmpeq>
   d8dd8:	bf0c      	ite	eq
   d8dda:	2001      	moveq	r0, #1
   d8ddc:	2000      	movne	r0, #0
   d8dde:	f85d fb08 	ldr.w	pc, [sp], #8
   d8de2:	bf00      	nop

000d8de4 <__aeabi_dcmplt>:
   d8de4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8de8:	f7ff ffea 	bl	d8dc0 <__aeabi_cdcmpeq>
   d8dec:	bf34      	ite	cc
   d8dee:	2001      	movcc	r0, #1
   d8df0:	2000      	movcs	r0, #0
   d8df2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8df6:	bf00      	nop

000d8df8 <__aeabi_dcmple>:
   d8df8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8dfc:	f7ff ffe0 	bl	d8dc0 <__aeabi_cdcmpeq>
   d8e00:	bf94      	ite	ls
   d8e02:	2001      	movls	r0, #1
   d8e04:	2000      	movhi	r0, #0
   d8e06:	f85d fb08 	ldr.w	pc, [sp], #8
   d8e0a:	bf00      	nop

000d8e0c <__aeabi_dcmpge>:
   d8e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8e10:	f7ff ffce 	bl	d8db0 <__aeabi_cdrcmple>
   d8e14:	bf94      	ite	ls
   d8e16:	2001      	movls	r0, #1
   d8e18:	2000      	movhi	r0, #0
   d8e1a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8e1e:	bf00      	nop

000d8e20 <__aeabi_dcmpgt>:
   d8e20:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8e24:	f7ff ffc4 	bl	d8db0 <__aeabi_cdrcmple>
   d8e28:	bf34      	ite	cc
   d8e2a:	2001      	movcc	r0, #1
   d8e2c:	2000      	movcs	r0, #0
   d8e2e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8e32:	bf00      	nop

000d8e34 <__aeabi_dcmpun>:
   d8e34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e3c:	d102      	bne.n	d8e44 <__aeabi_dcmpun+0x10>
   d8e3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8e42:	d10a      	bne.n	d8e5a <__aeabi_dcmpun+0x26>
   d8e44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8e48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8e4c:	d102      	bne.n	d8e54 <__aeabi_dcmpun+0x20>
   d8e4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8e52:	d102      	bne.n	d8e5a <__aeabi_dcmpun+0x26>
   d8e54:	f04f 0000 	mov.w	r0, #0
   d8e58:	4770      	bx	lr
   d8e5a:	f04f 0001 	mov.w	r0, #1
   d8e5e:	4770      	bx	lr

000d8e60 <__aeabi_d2f>:
   d8e60:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8e64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8e68:	bf24      	itt	cs
   d8e6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8e6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8e72:	d90d      	bls.n	d8e90 <__aeabi_d2f+0x30>
   d8e74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8e78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8e7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8e80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8e84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8e88:	bf08      	it	eq
   d8e8a:	f020 0001 	biceq.w	r0, r0, #1
   d8e8e:	4770      	bx	lr
   d8e90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8e94:	d121      	bne.n	d8eda <__aeabi_d2f+0x7a>
   d8e96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8e9a:	bfbc      	itt	lt
   d8e9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8ea0:	4770      	bxlt	lr
   d8ea2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ea6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8eaa:	f1c2 0218 	rsb	r2, r2, #24
   d8eae:	f1c2 0c20 	rsb	ip, r2, #32
   d8eb2:	fa10 f30c 	lsls.w	r3, r0, ip
   d8eb6:	fa20 f002 	lsr.w	r0, r0, r2
   d8eba:	bf18      	it	ne
   d8ebc:	f040 0001 	orrne.w	r0, r0, #1
   d8ec0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ec4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8ec8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8ecc:	ea40 000c 	orr.w	r0, r0, ip
   d8ed0:	fa23 f302 	lsr.w	r3, r3, r2
   d8ed4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8ed8:	e7cc      	b.n	d8e74 <__aeabi_d2f+0x14>
   d8eda:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8ede:	d107      	bne.n	d8ef0 <__aeabi_d2f+0x90>
   d8ee0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8ee4:	bf1e      	ittt	ne
   d8ee6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8eea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8eee:	4770      	bxne	lr
   d8ef0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8ef4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8ef8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8efc:	4770      	bx	lr
   d8efe:	bf00      	nop

000d8f00 <__aeabi_frsub>:
   d8f00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d8f04:	e002      	b.n	d8f0c <__addsf3>
   d8f06:	bf00      	nop

000d8f08 <__aeabi_fsub>:
   d8f08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d8f0c <__addsf3>:
   d8f0c:	0042      	lsls	r2, r0, #1
   d8f0e:	bf1f      	itttt	ne
   d8f10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d8f14:	ea92 0f03 	teqne	r2, r3
   d8f18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d8f1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d8f20:	d06a      	beq.n	d8ff8 <__addsf3+0xec>
   d8f22:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d8f26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d8f2a:	bfc1      	itttt	gt
   d8f2c:	18d2      	addgt	r2, r2, r3
   d8f2e:	4041      	eorgt	r1, r0
   d8f30:	4048      	eorgt	r0, r1
   d8f32:	4041      	eorgt	r1, r0
   d8f34:	bfb8      	it	lt
   d8f36:	425b      	neglt	r3, r3
   d8f38:	2b19      	cmp	r3, #25
   d8f3a:	bf88      	it	hi
   d8f3c:	4770      	bxhi	lr
   d8f3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d8f42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8f46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d8f4a:	bf18      	it	ne
   d8f4c:	4240      	negne	r0, r0
   d8f4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8f52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d8f56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d8f5a:	bf18      	it	ne
   d8f5c:	4249      	negne	r1, r1
   d8f5e:	ea92 0f03 	teq	r2, r3
   d8f62:	d03f      	beq.n	d8fe4 <__addsf3+0xd8>
   d8f64:	f1a2 0201 	sub.w	r2, r2, #1
   d8f68:	fa41 fc03 	asr.w	ip, r1, r3
   d8f6c:	eb10 000c 	adds.w	r0, r0, ip
   d8f70:	f1c3 0320 	rsb	r3, r3, #32
   d8f74:	fa01 f103 	lsl.w	r1, r1, r3
   d8f78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d8f7c:	d502      	bpl.n	d8f84 <__addsf3+0x78>
   d8f7e:	4249      	negs	r1, r1
   d8f80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d8f84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d8f88:	d313      	bcc.n	d8fb2 <__addsf3+0xa6>
   d8f8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d8f8e:	d306      	bcc.n	d8f9e <__addsf3+0x92>
   d8f90:	0840      	lsrs	r0, r0, #1
   d8f92:	ea4f 0131 	mov.w	r1, r1, rrx
   d8f96:	f102 0201 	add.w	r2, r2, #1
   d8f9a:	2afe      	cmp	r2, #254	; 0xfe
   d8f9c:	d251      	bcs.n	d9042 <__addsf3+0x136>
   d8f9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d8fa2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d8fa6:	bf08      	it	eq
   d8fa8:	f020 0001 	biceq.w	r0, r0, #1
   d8fac:	ea40 0003 	orr.w	r0, r0, r3
   d8fb0:	4770      	bx	lr
   d8fb2:	0049      	lsls	r1, r1, #1
   d8fb4:	eb40 0000 	adc.w	r0, r0, r0
   d8fb8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   d8fbc:	f1a2 0201 	sub.w	r2, r2, #1
   d8fc0:	d1ed      	bne.n	d8f9e <__addsf3+0x92>
   d8fc2:	fab0 fc80 	clz	ip, r0
   d8fc6:	f1ac 0c08 	sub.w	ip, ip, #8
   d8fca:	ebb2 020c 	subs.w	r2, r2, ip
   d8fce:	fa00 f00c 	lsl.w	r0, r0, ip
   d8fd2:	bfaa      	itet	ge
   d8fd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d8fd8:	4252      	neglt	r2, r2
   d8fda:	4318      	orrge	r0, r3
   d8fdc:	bfbc      	itt	lt
   d8fde:	40d0      	lsrlt	r0, r2
   d8fe0:	4318      	orrlt	r0, r3
   d8fe2:	4770      	bx	lr
   d8fe4:	f092 0f00 	teq	r2, #0
   d8fe8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d8fec:	bf06      	itte	eq
   d8fee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d8ff2:	3201      	addeq	r2, #1
   d8ff4:	3b01      	subne	r3, #1
   d8ff6:	e7b5      	b.n	d8f64 <__addsf3+0x58>
   d8ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d8ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d9000:	bf18      	it	ne
   d9002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9006:	d021      	beq.n	d904c <__addsf3+0x140>
   d9008:	ea92 0f03 	teq	r2, r3
   d900c:	d004      	beq.n	d9018 <__addsf3+0x10c>
   d900e:	f092 0f00 	teq	r2, #0
   d9012:	bf08      	it	eq
   d9014:	4608      	moveq	r0, r1
   d9016:	4770      	bx	lr
   d9018:	ea90 0f01 	teq	r0, r1
   d901c:	bf1c      	itt	ne
   d901e:	2000      	movne	r0, #0
   d9020:	4770      	bxne	lr
   d9022:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d9026:	d104      	bne.n	d9032 <__addsf3+0x126>
   d9028:	0040      	lsls	r0, r0, #1
   d902a:	bf28      	it	cs
   d902c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d9030:	4770      	bx	lr
   d9032:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d9036:	bf3c      	itt	cc
   d9038:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d903c:	4770      	bxcc	lr
   d903e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9042:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d9046:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d904a:	4770      	bx	lr
   d904c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d9050:	bf16      	itet	ne
   d9052:	4608      	movne	r0, r1
   d9054:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d9058:	4601      	movne	r1, r0
   d905a:	0242      	lsls	r2, r0, #9
   d905c:	bf06      	itte	eq
   d905e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d9062:	ea90 0f01 	teqeq	r0, r1
   d9066:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d906a:	4770      	bx	lr

000d906c <__aeabi_ui2f>:
   d906c:	f04f 0300 	mov.w	r3, #0
   d9070:	e004      	b.n	d907c <__aeabi_i2f+0x8>
   d9072:	bf00      	nop

000d9074 <__aeabi_i2f>:
   d9074:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d9078:	bf48      	it	mi
   d907a:	4240      	negmi	r0, r0
   d907c:	ea5f 0c00 	movs.w	ip, r0
   d9080:	bf08      	it	eq
   d9082:	4770      	bxeq	lr
   d9084:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d9088:	4601      	mov	r1, r0
   d908a:	f04f 0000 	mov.w	r0, #0
   d908e:	e01c      	b.n	d90ca <__aeabi_l2f+0x2a>

000d9090 <__aeabi_ul2f>:
   d9090:	ea50 0201 	orrs.w	r2, r0, r1
   d9094:	bf08      	it	eq
   d9096:	4770      	bxeq	lr
   d9098:	f04f 0300 	mov.w	r3, #0
   d909c:	e00a      	b.n	d90b4 <__aeabi_l2f+0x14>
   d909e:	bf00      	nop

000d90a0 <__aeabi_l2f>:
   d90a0:	ea50 0201 	orrs.w	r2, r0, r1
   d90a4:	bf08      	it	eq
   d90a6:	4770      	bxeq	lr
   d90a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d90ac:	d502      	bpl.n	d90b4 <__aeabi_l2f+0x14>
   d90ae:	4240      	negs	r0, r0
   d90b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d90b4:	ea5f 0c01 	movs.w	ip, r1
   d90b8:	bf02      	ittt	eq
   d90ba:	4684      	moveq	ip, r0
   d90bc:	4601      	moveq	r1, r0
   d90be:	2000      	moveq	r0, #0
   d90c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d90c4:	bf08      	it	eq
   d90c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d90ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d90ce:	fabc f28c 	clz	r2, ip
   d90d2:	3a08      	subs	r2, #8
   d90d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d90d8:	db10      	blt.n	d90fc <__aeabi_l2f+0x5c>
   d90da:	fa01 fc02 	lsl.w	ip, r1, r2
   d90de:	4463      	add	r3, ip
   d90e0:	fa00 fc02 	lsl.w	ip, r0, r2
   d90e4:	f1c2 0220 	rsb	r2, r2, #32
   d90e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d90ec:	fa20 f202 	lsr.w	r2, r0, r2
   d90f0:	eb43 0002 	adc.w	r0, r3, r2
   d90f4:	bf08      	it	eq
   d90f6:	f020 0001 	biceq.w	r0, r0, #1
   d90fa:	4770      	bx	lr
   d90fc:	f102 0220 	add.w	r2, r2, #32
   d9100:	fa01 fc02 	lsl.w	ip, r1, r2
   d9104:	f1c2 0220 	rsb	r2, r2, #32
   d9108:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d910c:	fa21 f202 	lsr.w	r2, r1, r2
   d9110:	eb43 0002 	adc.w	r0, r3, r2
   d9114:	bf08      	it	eq
   d9116:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d911a:	4770      	bx	lr

000d911c <__aeabi_ldivmod>:
   d911c:	b97b      	cbnz	r3, d913e <__aeabi_ldivmod+0x22>
   d911e:	b972      	cbnz	r2, d913e <__aeabi_ldivmod+0x22>
   d9120:	2900      	cmp	r1, #0
   d9122:	bfbe      	ittt	lt
   d9124:	2000      	movlt	r0, #0
   d9126:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d912a:	e006      	blt.n	d913a <__aeabi_ldivmod+0x1e>
   d912c:	bf08      	it	eq
   d912e:	2800      	cmpeq	r0, #0
   d9130:	bf1c      	itt	ne
   d9132:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d9136:	f04f 30ff 	movne.w	r0, #4294967295
   d913a:	f000 b9b1 	b.w	d94a0 <__aeabi_idiv0>
   d913e:	f1ad 0c08 	sub.w	ip, sp, #8
   d9142:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9146:	2900      	cmp	r1, #0
   d9148:	db09      	blt.n	d915e <__aeabi_ldivmod+0x42>
   d914a:	2b00      	cmp	r3, #0
   d914c:	db1a      	blt.n	d9184 <__aeabi_ldivmod+0x68>
   d914e:	f000 f835 	bl	d91bc <__udivmoddi4>
   d9152:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d915a:	b004      	add	sp, #16
   d915c:	4770      	bx	lr
   d915e:	4240      	negs	r0, r0
   d9160:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9164:	2b00      	cmp	r3, #0
   d9166:	db1b      	blt.n	d91a0 <__aeabi_ldivmod+0x84>
   d9168:	f000 f828 	bl	d91bc <__udivmoddi4>
   d916c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9174:	b004      	add	sp, #16
   d9176:	4240      	negs	r0, r0
   d9178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d917c:	4252      	negs	r2, r2
   d917e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9182:	4770      	bx	lr
   d9184:	4252      	negs	r2, r2
   d9186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d918a:	f000 f817 	bl	d91bc <__udivmoddi4>
   d918e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9196:	b004      	add	sp, #16
   d9198:	4240      	negs	r0, r0
   d919a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d919e:	4770      	bx	lr
   d91a0:	4252      	negs	r2, r2
   d91a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d91a6:	f000 f809 	bl	d91bc <__udivmoddi4>
   d91aa:	f8dd e004 	ldr.w	lr, [sp, #4]
   d91ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d91b2:	b004      	add	sp, #16
   d91b4:	4252      	negs	r2, r2
   d91b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d91ba:	4770      	bx	lr

000d91bc <__udivmoddi4>:
   d91bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d91c0:	468c      	mov	ip, r1
   d91c2:	460e      	mov	r6, r1
   d91c4:	4604      	mov	r4, r0
   d91c6:	9d08      	ldr	r5, [sp, #32]
   d91c8:	2b00      	cmp	r3, #0
   d91ca:	d150      	bne.n	d926e <__udivmoddi4+0xb2>
   d91cc:	428a      	cmp	r2, r1
   d91ce:	4617      	mov	r7, r2
   d91d0:	d96c      	bls.n	d92ac <__udivmoddi4+0xf0>
   d91d2:	fab2 fe82 	clz	lr, r2
   d91d6:	f1be 0f00 	cmp.w	lr, #0
   d91da:	d00b      	beq.n	d91f4 <__udivmoddi4+0x38>
   d91dc:	f1ce 0420 	rsb	r4, lr, #32
   d91e0:	fa20 f404 	lsr.w	r4, r0, r4
   d91e4:	fa01 f60e 	lsl.w	r6, r1, lr
   d91e8:	ea44 0c06 	orr.w	ip, r4, r6
   d91ec:	fa02 f70e 	lsl.w	r7, r2, lr
   d91f0:	fa00 f40e 	lsl.w	r4, r0, lr
   d91f4:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d91f8:	0c22      	lsrs	r2, r4, #16
   d91fa:	fbbc f0f9 	udiv	r0, ip, r9
   d91fe:	fa1f f887 	uxth.w	r8, r7
   d9202:	fb09 c610 	mls	r6, r9, r0, ip
   d9206:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d920a:	fb00 f308 	mul.w	r3, r0, r8
   d920e:	42b3      	cmp	r3, r6
   d9210:	d909      	bls.n	d9226 <__udivmoddi4+0x6a>
   d9212:	19f6      	adds	r6, r6, r7
   d9214:	f100 32ff 	add.w	r2, r0, #4294967295
   d9218:	f080 8122 	bcs.w	d9460 <__udivmoddi4+0x2a4>
   d921c:	42b3      	cmp	r3, r6
   d921e:	f240 811f 	bls.w	d9460 <__udivmoddi4+0x2a4>
   d9222:	3802      	subs	r0, #2
   d9224:	443e      	add	r6, r7
   d9226:	1af6      	subs	r6, r6, r3
   d9228:	b2a2      	uxth	r2, r4
   d922a:	fbb6 f3f9 	udiv	r3, r6, r9
   d922e:	fb09 6613 	mls	r6, r9, r3, r6
   d9232:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9236:	fb03 f808 	mul.w	r8, r3, r8
   d923a:	45a0      	cmp	r8, r4
   d923c:	d909      	bls.n	d9252 <__udivmoddi4+0x96>
   d923e:	19e4      	adds	r4, r4, r7
   d9240:	f103 32ff 	add.w	r2, r3, #4294967295
   d9244:	f080 810a 	bcs.w	d945c <__udivmoddi4+0x2a0>
   d9248:	45a0      	cmp	r8, r4
   d924a:	f240 8107 	bls.w	d945c <__udivmoddi4+0x2a0>
   d924e:	3b02      	subs	r3, #2
   d9250:	443c      	add	r4, r7
   d9252:	ebc8 0404 	rsb	r4, r8, r4
   d9256:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d925a:	2100      	movs	r1, #0
   d925c:	2d00      	cmp	r5, #0
   d925e:	d062      	beq.n	d9326 <__udivmoddi4+0x16a>
   d9260:	fa24 f40e 	lsr.w	r4, r4, lr
   d9264:	2300      	movs	r3, #0
   d9266:	602c      	str	r4, [r5, #0]
   d9268:	606b      	str	r3, [r5, #4]
   d926a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d926e:	428b      	cmp	r3, r1
   d9270:	d907      	bls.n	d9282 <__udivmoddi4+0xc6>
   d9272:	2d00      	cmp	r5, #0
   d9274:	d055      	beq.n	d9322 <__udivmoddi4+0x166>
   d9276:	2100      	movs	r1, #0
   d9278:	e885 0041 	stmia.w	r5, {r0, r6}
   d927c:	4608      	mov	r0, r1
   d927e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9282:	fab3 f183 	clz	r1, r3
   d9286:	2900      	cmp	r1, #0
   d9288:	f040 8090 	bne.w	d93ac <__udivmoddi4+0x1f0>
   d928c:	42b3      	cmp	r3, r6
   d928e:	d302      	bcc.n	d9296 <__udivmoddi4+0xda>
   d9290:	4282      	cmp	r2, r0
   d9292:	f200 80f8 	bhi.w	d9486 <__udivmoddi4+0x2ca>
   d9296:	1a84      	subs	r4, r0, r2
   d9298:	eb66 0603 	sbc.w	r6, r6, r3
   d929c:	2001      	movs	r0, #1
   d929e:	46b4      	mov	ip, r6
   d92a0:	2d00      	cmp	r5, #0
   d92a2:	d040      	beq.n	d9326 <__udivmoddi4+0x16a>
   d92a4:	e885 1010 	stmia.w	r5, {r4, ip}
   d92a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d92ac:	b912      	cbnz	r2, d92b4 <__udivmoddi4+0xf8>
   d92ae:	2701      	movs	r7, #1
   d92b0:	fbb7 f7f2 	udiv	r7, r7, r2
   d92b4:	fab7 fe87 	clz	lr, r7
   d92b8:	f1be 0f00 	cmp.w	lr, #0
   d92bc:	d135      	bne.n	d932a <__udivmoddi4+0x16e>
   d92be:	1bf3      	subs	r3, r6, r7
   d92c0:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d92c4:	fa1f fc87 	uxth.w	ip, r7
   d92c8:	2101      	movs	r1, #1
   d92ca:	fbb3 f0f8 	udiv	r0, r3, r8
   d92ce:	0c22      	lsrs	r2, r4, #16
   d92d0:	fb08 3610 	mls	r6, r8, r0, r3
   d92d4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d92d8:	fb0c f300 	mul.w	r3, ip, r0
   d92dc:	42b3      	cmp	r3, r6
   d92de:	d907      	bls.n	d92f0 <__udivmoddi4+0x134>
   d92e0:	19f6      	adds	r6, r6, r7
   d92e2:	f100 32ff 	add.w	r2, r0, #4294967295
   d92e6:	d202      	bcs.n	d92ee <__udivmoddi4+0x132>
   d92e8:	42b3      	cmp	r3, r6
   d92ea:	f200 80ce 	bhi.w	d948a <__udivmoddi4+0x2ce>
   d92ee:	4610      	mov	r0, r2
   d92f0:	1af6      	subs	r6, r6, r3
   d92f2:	b2a2      	uxth	r2, r4
   d92f4:	fbb6 f3f8 	udiv	r3, r6, r8
   d92f8:	fb08 6613 	mls	r6, r8, r3, r6
   d92fc:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9300:	fb0c fc03 	mul.w	ip, ip, r3
   d9304:	45a4      	cmp	ip, r4
   d9306:	d907      	bls.n	d9318 <__udivmoddi4+0x15c>
   d9308:	19e4      	adds	r4, r4, r7
   d930a:	f103 32ff 	add.w	r2, r3, #4294967295
   d930e:	d202      	bcs.n	d9316 <__udivmoddi4+0x15a>
   d9310:	45a4      	cmp	ip, r4
   d9312:	f200 80b5 	bhi.w	d9480 <__udivmoddi4+0x2c4>
   d9316:	4613      	mov	r3, r2
   d9318:	ebcc 0404 	rsb	r4, ip, r4
   d931c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9320:	e79c      	b.n	d925c <__udivmoddi4+0xa0>
   d9322:	4629      	mov	r1, r5
   d9324:	4628      	mov	r0, r5
   d9326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d932a:	f1ce 0120 	rsb	r1, lr, #32
   d932e:	fa06 f30e 	lsl.w	r3, r6, lr
   d9332:	fa07 f70e 	lsl.w	r7, r7, lr
   d9336:	fa20 f901 	lsr.w	r9, r0, r1
   d933a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d933e:	40ce      	lsrs	r6, r1
   d9340:	ea49 0903 	orr.w	r9, r9, r3
   d9344:	fbb6 faf8 	udiv	sl, r6, r8
   d9348:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d934c:	fb08 661a 	mls	r6, r8, sl, r6
   d9350:	fa1f fc87 	uxth.w	ip, r7
   d9354:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d9358:	fb0a f20c 	mul.w	r2, sl, ip
   d935c:	429a      	cmp	r2, r3
   d935e:	fa00 f40e 	lsl.w	r4, r0, lr
   d9362:	d90a      	bls.n	d937a <__udivmoddi4+0x1be>
   d9364:	19db      	adds	r3, r3, r7
   d9366:	f10a 31ff 	add.w	r1, sl, #4294967295
   d936a:	f080 8087 	bcs.w	d947c <__udivmoddi4+0x2c0>
   d936e:	429a      	cmp	r2, r3
   d9370:	f240 8084 	bls.w	d947c <__udivmoddi4+0x2c0>
   d9374:	f1aa 0a02 	sub.w	sl, sl, #2
   d9378:	443b      	add	r3, r7
   d937a:	1a9b      	subs	r3, r3, r2
   d937c:	fa1f f989 	uxth.w	r9, r9
   d9380:	fbb3 f1f8 	udiv	r1, r3, r8
   d9384:	fb08 3311 	mls	r3, r8, r1, r3
   d9388:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d938c:	fb01 f60c 	mul.w	r6, r1, ip
   d9390:	429e      	cmp	r6, r3
   d9392:	d907      	bls.n	d93a4 <__udivmoddi4+0x1e8>
   d9394:	19db      	adds	r3, r3, r7
   d9396:	f101 32ff 	add.w	r2, r1, #4294967295
   d939a:	d26b      	bcs.n	d9474 <__udivmoddi4+0x2b8>
   d939c:	429e      	cmp	r6, r3
   d939e:	d969      	bls.n	d9474 <__udivmoddi4+0x2b8>
   d93a0:	3902      	subs	r1, #2
   d93a2:	443b      	add	r3, r7
   d93a4:	1b9b      	subs	r3, r3, r6
   d93a6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d93aa:	e78e      	b.n	d92ca <__udivmoddi4+0x10e>
   d93ac:	f1c1 0e20 	rsb	lr, r1, #32
   d93b0:	fa22 f40e 	lsr.w	r4, r2, lr
   d93b4:	408b      	lsls	r3, r1
   d93b6:	4323      	orrs	r3, r4
   d93b8:	fa20 f70e 	lsr.w	r7, r0, lr
   d93bc:	fa06 f401 	lsl.w	r4, r6, r1
   d93c0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d93c4:	fa26 f60e 	lsr.w	r6, r6, lr
   d93c8:	433c      	orrs	r4, r7
   d93ca:	fbb6 f9fc 	udiv	r9, r6, ip
   d93ce:	0c27      	lsrs	r7, r4, #16
   d93d0:	fb0c 6619 	mls	r6, ip, r9, r6
   d93d4:	fa1f f883 	uxth.w	r8, r3
   d93d8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d93dc:	fb09 f708 	mul.w	r7, r9, r8
   d93e0:	42b7      	cmp	r7, r6
   d93e2:	fa02 f201 	lsl.w	r2, r2, r1
   d93e6:	fa00 fa01 	lsl.w	sl, r0, r1
   d93ea:	d908      	bls.n	d93fe <__udivmoddi4+0x242>
   d93ec:	18f6      	adds	r6, r6, r3
   d93ee:	f109 30ff 	add.w	r0, r9, #4294967295
   d93f2:	d241      	bcs.n	d9478 <__udivmoddi4+0x2bc>
   d93f4:	42b7      	cmp	r7, r6
   d93f6:	d93f      	bls.n	d9478 <__udivmoddi4+0x2bc>
   d93f8:	f1a9 0902 	sub.w	r9, r9, #2
   d93fc:	441e      	add	r6, r3
   d93fe:	1bf6      	subs	r6, r6, r7
   d9400:	b2a0      	uxth	r0, r4
   d9402:	fbb6 f4fc 	udiv	r4, r6, ip
   d9406:	fb0c 6614 	mls	r6, ip, r4, r6
   d940a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d940e:	fb04 f808 	mul.w	r8, r4, r8
   d9412:	45b8      	cmp	r8, r7
   d9414:	d907      	bls.n	d9426 <__udivmoddi4+0x26a>
   d9416:	18ff      	adds	r7, r7, r3
   d9418:	f104 30ff 	add.w	r0, r4, #4294967295
   d941c:	d228      	bcs.n	d9470 <__udivmoddi4+0x2b4>
   d941e:	45b8      	cmp	r8, r7
   d9420:	d926      	bls.n	d9470 <__udivmoddi4+0x2b4>
   d9422:	3c02      	subs	r4, #2
   d9424:	441f      	add	r7, r3
   d9426:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d942a:	ebc8 0707 	rsb	r7, r8, r7
   d942e:	fba0 8902 	umull	r8, r9, r0, r2
   d9432:	454f      	cmp	r7, r9
   d9434:	4644      	mov	r4, r8
   d9436:	464e      	mov	r6, r9
   d9438:	d314      	bcc.n	d9464 <__udivmoddi4+0x2a8>
   d943a:	d029      	beq.n	d9490 <__udivmoddi4+0x2d4>
   d943c:	b365      	cbz	r5, d9498 <__udivmoddi4+0x2dc>
   d943e:	ebba 0304 	subs.w	r3, sl, r4
   d9442:	eb67 0706 	sbc.w	r7, r7, r6
   d9446:	fa07 fe0e 	lsl.w	lr, r7, lr
   d944a:	40cb      	lsrs	r3, r1
   d944c:	40cf      	lsrs	r7, r1
   d944e:	ea4e 0303 	orr.w	r3, lr, r3
   d9452:	e885 0088 	stmia.w	r5, {r3, r7}
   d9456:	2100      	movs	r1, #0
   d9458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d945c:	4613      	mov	r3, r2
   d945e:	e6f8      	b.n	d9252 <__udivmoddi4+0x96>
   d9460:	4610      	mov	r0, r2
   d9462:	e6e0      	b.n	d9226 <__udivmoddi4+0x6a>
   d9464:	ebb8 0402 	subs.w	r4, r8, r2
   d9468:	eb69 0603 	sbc.w	r6, r9, r3
   d946c:	3801      	subs	r0, #1
   d946e:	e7e5      	b.n	d943c <__udivmoddi4+0x280>
   d9470:	4604      	mov	r4, r0
   d9472:	e7d8      	b.n	d9426 <__udivmoddi4+0x26a>
   d9474:	4611      	mov	r1, r2
   d9476:	e795      	b.n	d93a4 <__udivmoddi4+0x1e8>
   d9478:	4681      	mov	r9, r0
   d947a:	e7c0      	b.n	d93fe <__udivmoddi4+0x242>
   d947c:	468a      	mov	sl, r1
   d947e:	e77c      	b.n	d937a <__udivmoddi4+0x1be>
   d9480:	3b02      	subs	r3, #2
   d9482:	443c      	add	r4, r7
   d9484:	e748      	b.n	d9318 <__udivmoddi4+0x15c>
   d9486:	4608      	mov	r0, r1
   d9488:	e70a      	b.n	d92a0 <__udivmoddi4+0xe4>
   d948a:	3802      	subs	r0, #2
   d948c:	443e      	add	r6, r7
   d948e:	e72f      	b.n	d92f0 <__udivmoddi4+0x134>
   d9490:	45c2      	cmp	sl, r8
   d9492:	d3e7      	bcc.n	d9464 <__udivmoddi4+0x2a8>
   d9494:	463e      	mov	r6, r7
   d9496:	e7d1      	b.n	d943c <__udivmoddi4+0x280>
   d9498:	4629      	mov	r1, r5
   d949a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d949e:	bf00      	nop

000d94a0 <__aeabi_idiv0>:
   d94a0:	4770      	bx	lr
   d94a2:	bf00      	nop

000d94a4 <__cxa_atexit>:
   d94a4:	b510      	push	{r4, lr}
   d94a6:	4c05      	ldr	r4, [pc, #20]	; (d94bc <__cxa_atexit+0x18>)
   d94a8:	4613      	mov	r3, r2
   d94aa:	b12c      	cbz	r4, d94b8 <__cxa_atexit+0x14>
   d94ac:	460a      	mov	r2, r1
   d94ae:	4601      	mov	r1, r0
   d94b0:	2002      	movs	r0, #2
   d94b2:	f3af 8000 	nop.w
   d94b6:	bd10      	pop	{r4, pc}
   d94b8:	4620      	mov	r0, r4
   d94ba:	bd10      	pop	{r4, pc}
   d94bc:	00000000 	.word	0x00000000

000d94c0 <memcpy>:
   d94c0:	b510      	push	{r4, lr}
   d94c2:	1e43      	subs	r3, r0, #1
   d94c4:	440a      	add	r2, r1
   d94c6:	4291      	cmp	r1, r2
   d94c8:	d004      	beq.n	d94d4 <memcpy+0x14>
   d94ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   d94ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   d94d2:	e7f8      	b.n	d94c6 <memcpy+0x6>
   d94d4:	bd10      	pop	{r4, pc}

000d94d6 <memset>:
   d94d6:	4402      	add	r2, r0
   d94d8:	4603      	mov	r3, r0
   d94da:	4293      	cmp	r3, r2
   d94dc:	d002      	beq.n	d94e4 <memset+0xe>
   d94de:	f803 1b01 	strb.w	r1, [r3], #1
   d94e2:	e7fa      	b.n	d94da <memset+0x4>
   d94e4:	4770      	bx	lr
	...

000d94e8 <srand>:
   d94e8:	b538      	push	{r3, r4, r5, lr}
   d94ea:	4b12      	ldr	r3, [pc, #72]	; (d9534 <srand+0x4c>)
   d94ec:	681c      	ldr	r4, [r3, #0]
   d94ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d94f0:	4605      	mov	r5, r0
   d94f2:	b9d3      	cbnz	r3, d952a <srand+0x42>
   d94f4:	2018      	movs	r0, #24
   d94f6:	f7fc fae3 	bl	d5ac0 <malloc>
   d94fa:	f243 330e 	movw	r3, #13070	; 0x330e
   d94fe:	63a0      	str	r0, [r4, #56]	; 0x38
   d9500:	8003      	strh	r3, [r0, #0]
   d9502:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9506:	8043      	strh	r3, [r0, #2]
   d9508:	f241 2334 	movw	r3, #4660	; 0x1234
   d950c:	8083      	strh	r3, [r0, #4]
   d950e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9512:	80c3      	strh	r3, [r0, #6]
   d9514:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9518:	8103      	strh	r3, [r0, #8]
   d951a:	2305      	movs	r3, #5
   d951c:	8143      	strh	r3, [r0, #10]
   d951e:	230b      	movs	r3, #11
   d9520:	8183      	strh	r3, [r0, #12]
   d9522:	2201      	movs	r2, #1
   d9524:	2300      	movs	r3, #0
   d9526:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d952a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d952c:	2200      	movs	r2, #0
   d952e:	611d      	str	r5, [r3, #16]
   d9530:	615a      	str	r2, [r3, #20]
   d9532:	bd38      	pop	{r3, r4, r5, pc}
   d9534:	2003e348 	.word	0x2003e348

000d9538 <strdup>:
   d9538:	4b02      	ldr	r3, [pc, #8]	; (d9544 <strdup+0xc>)
   d953a:	4601      	mov	r1, r0
   d953c:	6818      	ldr	r0, [r3, #0]
   d953e:	f000 b803 	b.w	d9548 <_strdup_r>
   d9542:	bf00      	nop
   d9544:	2003e348 	.word	0x2003e348

000d9548 <_strdup_r>:
   d9548:	b570      	push	{r4, r5, r6, lr}
   d954a:	4606      	mov	r6, r0
   d954c:	4608      	mov	r0, r1
   d954e:	460c      	mov	r4, r1
   d9550:	f000 f80d 	bl	d956e <strlen>
   d9554:	1c45      	adds	r5, r0, #1
   d9556:	4629      	mov	r1, r5
   d9558:	4630      	mov	r0, r6
   d955a:	f7fc fad9 	bl	d5b10 <_malloc_r>
   d955e:	4606      	mov	r6, r0
   d9560:	b118      	cbz	r0, d956a <_strdup_r+0x22>
   d9562:	462a      	mov	r2, r5
   d9564:	4621      	mov	r1, r4
   d9566:	f7ff ffab 	bl	d94c0 <memcpy>
   d956a:	4630      	mov	r0, r6
   d956c:	bd70      	pop	{r4, r5, r6, pc}

000d956e <strlen>:
   d956e:	4603      	mov	r3, r0
   d9570:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9574:	2a00      	cmp	r2, #0
   d9576:	d1fb      	bne.n	d9570 <strlen+0x2>
   d9578:	1a18      	subs	r0, r3, r0
   d957a:	3801      	subs	r0, #1
   d957c:	4770      	bx	lr

000d957e <link_code_end>:
	...

000d9580 <dynalib_user>:
   d9580:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   d9590:	0000 0000                                   ....

000d9594 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d959c:	40b9 000d 40cd 000d 6941 2072 7551 6c61     .@...@..Air Qual
   d95ac:	7469 2079 6553 736e 726f 7220 6165 7964     ity Sensor ready
   d95bc:	002e 6941 2072 7551 6c61 7469 2079 6553     ..Air Quality Se
   d95cc:	736e 726f 4520 5252 524f 0021 6150 7472     nsor ERROR!.Part
   d95dc:	6369 656c 4100 7269 5120 6175 696c 7974     icle.Air Quality
   d95ec:	4d00 6e6f 7469 726f 4200 454d 3832 2030     .Monitor.BME280 
   d95fc:	6553 736e 726f 7220 6165 7964 002e 4d42     Sensor ready..BM
   d960c:	3245 3038 5320 6e65 6f73 2072 5245 4f52     E280 Sensor ERRO
   d961c:	2152 4e00 6e6f 0065 6144 676e 7265 4800     R!.None.Danger.H
   d962c:	6769 2068 6f50 6c6c 7475 6f69 006e 6f4c     igh Pollution.Lo
   d963c:	2077 6f50 6c6c 7475 6f69 006e 7246 7365     w Pollution.Fres
   d964c:	2068 6941 0072 504c 3a4f 2520 0064 6152     h Air.LPO: %d.Ra
   d965c:	6974 3a6f 2520 2566 0025 6f43 636e 6e65     tio: %f%%.Concen
   d966c:	7274 7461 6f69 3a6e 2520 2066 6370 2f73     tration: %f pcs/
   d967c:	004c 6554 706d 203a 4300 4800 6d75 6469     L.Temp: .C.Humid
   d968c:	7469 3a79 0020 7250 7365 3a73 0020 6820     ity: .Press: . h
   d969c:	6150 4400 7375 3a74 0020 6574 706d 6800     Pa.Dust: .temp.h
   d96ac:	6d75 6469 7469 0079 7270 7365 7573 6572     umidity.pressure
   d96bc:	6100 7269 712d 6175 696c 7974 6400 7375     .air-quality.dus
   d96cc:	2d74 706c 006f 6c25 0075 7564 7473 722d     t-lpo.%lu.dust-r
   d96dc:	7461 6f69 6400 7375 2d74 6f63 636e 6e65     atio.dust-concen
   d96ec:	7274 7461 6f69 006e 6e65 2d76 6176 736c     tration.env-vals
   d96fc:	0a00 6941 2072 7551 6c61 7469 3a79 2520     ..Air Quality: %
   d970c:	0073 6554 706d 203a 6425 5000 6572 7373     s.Temp: %d.Press
   d971c:	7275 3a65 2520 0064 7548 696d 6964 7974     ure: %d.Humidity
   d972c:	203a 6425 0000 0000                         : %d....

000d9734 <_ZTVN8particle13__SPISettingsE>:
	...
   d973c:	47a1 000d 6564 6166 6c75 2074 4d00 4253     .G..default .MSB
   d974c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d975c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d976c:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d977c:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d9788 <_ZTV10JsonBuffer>:
	...
   d9790:	50bd 000d 50d9 000d                         .P...P..

000d9798 <_ZTV10JsonWriter>:
	...
   d97a0:	50ed 000d 5101 000d 3025 7834 5c00 2575     .P...Q..%04x.\u%
   d97b0:	3430 0058 7274 6575 6600 6c61 6573 2500     04X.true.false.%
   d97c0:	2a2e 0066 6625 2500 2a2e 666c 2500 666c     .*f.%f.%.*lf.%lf
   d97d0:	0000 0000                                   ....

000d97d4 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   d97d4:	0002 0000                                   ....

000d97d8 <_ZN16AirQualitySensor9FRESH_AIRE>:
   d97d8:	0003 0000                                   ....

000d97dc <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   d97dc:	0001 0000                                   ....

000d97e0 <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   d97e0:	0000 0000                                   ....

000d97e4 <_ZL9BasicFont>:
	...
   d97ec:	0000 005f 0000 0000 0000 0007 0007 0000     .._.............
   d97fc:	1400 147f 147f 0000 2400 7f2a 122a 0000     .........$*.*...
   d980c:	2300 0813 6264 0000 3600 5549 5022 0000     .#..db...6IU"P..
   d981c:	0000 0305 0000 0000 1c00 4122 0000 0000     .........."A....
   d982c:	4100 1c22 0000 0000 0800 1c2a 082a 0000     .A".......*.*...
   d983c:	0800 3e08 0808 0000 a000 0060 0000 0000     ...>......`.....
   d984c:	0800 0808 0808 0000 6000 0060 0000 0000     .........``.....
   d985c:	2000 0810 0204 0000 3e00 4951 3e45 0000     . .......>QIE>..
   d986c:	0000 7f42 0040 0000 6200 4951 4649 0000     ..B.@....bQIIF..
   d987c:	2200 4941 3649 0000 1800 1214 107f 0000     ."AII6..........
   d988c:	2700 4545 3945 0000 3c00 494a 3049 0000     .'EEE9...<JII0..
   d989c:	0100 0971 0305 0000 3600 4949 3649 0000     ..q......6III6..
   d98ac:	0600 4949 1e29 0000 0000 3636 0000 0000     ..II).....66....
   d98bc:	0000 6cac 0000 0000 0800 2214 0041 0000     ...l......."A...
   d98cc:	1400 1414 1414 0000 4100 1422 0008 0000     .........A".....
   d98dc:	0200 5101 0609 0000 3200 7949 3e41 0000     ...Q.....2IyA>..
   d98ec:	7e00 0909 7e09 0000 7f00 4949 3649 0000     .~...~....III6..
   d98fc:	3e00 4141 2241 0000 7f00 4141 1c22 0000     .>AAA"....AA"...
   d990c:	7f00 4949 4149 0000 7f00 0909 0109 0000     ..IIIA..........
   d991c:	3e00 4141 7251 0000 7f00 0808 7f08 0000     .>AAQr..........
   d992c:	4100 417f 0000 0000 2000 4140 013f 0000     .A.A..... @A?...
   d993c:	7f00 1408 4122 0000 7f00 4040 4040 0000     ...."A....@@@@..
   d994c:	7f00 0c02 7f02 0000 7f00 0804 7f10 0000     ................
   d995c:	3e00 4141 3e41 0000 7f00 0909 0609 0000     .>AAA>..........
   d996c:	3e00 5141 5e21 0000 7f00 1909 4629 0000     .>AQ!^......)F..
   d997c:	2600 4949 3249 0000 0100 7f01 0101 0000     .&III2..........
   d998c:	3f00 4040 3f40 0000 1f00 4020 1f20 0000     .?@@@?.... @ ...
   d999c:	3f00 3840 3f40 0000 6300 0814 6314 0000     .?@8@?...c...c..
   d99ac:	0300 7804 0304 0000 6100 4951 4345 0000     ...x.....aQIEC..
   d99bc:	7f00 4141 0000 0000 0200 0804 2010 0000     ..AA......... ..
   d99cc:	4100 7f41 0000 0000 0400 0102 0402 0000     .AA.............
   d99dc:	8000 8080 8080 0000 0100 0402 0000 0000     ................
   d99ec:	2000 5454 7854 0000 7f00 4448 3844 0000     . TTTx....HDD8..
   d99fc:	3800 4444 0028 0000 3800 4444 7f48 0000     .8DD(....8DDH...
   d9a0c:	3800 5454 1854 0000 0800 097e 0002 0000     .8TTT.....~.....
   d9a1c:	1800 a4a4 7ca4 0000 7f00 0408 7804 0000     .....|.......x..
   d9a2c:	0000 007d 0000 0000 8000 7d84 0000 0000     ..}........}....
   d9a3c:	7f00 2810 0044 0000 4100 407f 0000 0000     ...(D....A.@....
   d9a4c:	7c00 1804 7804 0000 7c00 0408 007c 0000     .|...x...|..|...
   d9a5c:	3800 4444 0038 0000 fc00 2424 0018 0000     .8DD8.....$$....
   d9a6c:	1800 2424 00fc 0000 0000 087c 0004 0000     ..$$......|.....
   d9a7c:	4800 5454 0024 0000 0400 447f 0000 0000     .HTT$......D....
   d9a8c:	3c00 4040 007c 0000 1c00 4020 1c20 0000     .<@@|..... @ ...
   d9a9c:	3c00 3040 3c40 0000 4400 1028 4428 0000     .<@0@<...D(.(D..
   d9aac:	1c00 a0a0 007c 0000 4400 5464 444c 0000     ....|....DdTLD..
   d9abc:	0800 4136 0000 0000 0000 007f 0000 0000     ..6A............
   d9acc:	4100 0836 0000 0000 0200 0101 0102 0000     .A6.............
   d9adc:	0200 0505 0002 0000                         ........

000d9ae4 <_ZTVN5spark13EthernetClassE>:
	...
   d9aec:	5b8f 000d 5b85 000d 5b7b 000d 5b71 000d     .[...[..{[..q[..
   d9afc:	5b65 000d 5b59 000d 5b4d 000d 5b45 000d     e[..Y[..M[..E[..
   d9b0c:	5b3b 000d 5b31 000d 6dd1 000d               ;[..1[...m..

000d9b18 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9b18:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d9b28:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d9b38:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d9b48:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d9b58:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d9b68:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d9b78:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d9b88:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d9b98:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d9ba8:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d9bb8:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d9bc8:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d9bd8:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d9be8:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d9bf8:	6c61 006c 005a 2b25 3330 3a64 3025 7532     all.Z.%+03d:%02u
   d9c08:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d9c18:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d9c28 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9c30:	61bd 000d 61c3 000d 6207 000d 61d1 000d     .a...a...b...a..
   d9c40:	61bf 000d                                   .a..

000d9c44 <_ZTV9IPAddress>:
	...
   d9c4c:	6755 000d 6745 000d 6747 000d               Ug..Eg..Gg..

000d9c58 <_ZTV9USBSerial>:
	...
   d9c60:	682d 000d 687d 000d 688b 000d 5eed 000d     -h..}h...h...^..
   d9c70:	6869 000d 682f 000d 6845 000d 6877 000d     ih../h..Eh..wh..
   d9c80:	685b 000d 6829 000d                         [h..)h..

000d9c88 <_ZTV11USARTSerial>:
	...
   d9c90:	6939 000d 6989 000d 6997 000d 5eed 000d     9i...i...i...^..
   d9ca0:	694d 000d 696f 000d 695b 000d 6983 000d     Mi..oi..[i...i..
   d9cb0:	693b 000d 693f 000d                         ;i..?i..

000d9cb8 <_ZTV7TwoWire>:
	...
   d9cc0:	6a65 000d 6aaf 000d 6a87 000d 6a67 000d     ej...j...j..gj..
   d9cd0:	6a8f 000d 6a97 000d 6a9f 000d 6aa7 000d     .j...j...j...j..

000d9ce0 <_ZTVN5spark9MeshClassE>:
	...
   d9ce8:	6bd1 000d 6bc7 000d 6bbd 000d 6bb3 000d     .k...k...k...k..
   d9cf8:	6ba7 000d 6b9b 000d 6b8f 000d 6b87 000d     .k...k...k...k..
   d9d08:	6b7d 000d 6b73 000d 6dd1 000d               }k..sk...m..

000d9d14 <_ZTVN5spark9WiFiClassE>:
	...
   d9d1c:	6d4b 000d 6d41 000d 6d37 000d 6ced 000d     Km..Am..7m...l..
   d9d2c:	6d2b 000d 6d1f 000d 6d13 000d 6d0b 000d     +m...m...m...m..
   d9d3c:	6d01 000d 6cf7 000d 6dd1 000d               .m...l...m..

000d9d48 <_ZTVN5spark12NetworkClassE>:
	...
   d9d50:	6d69 000d 6d73 000d 6d7d 000d 6d87 000d     im..sm..}m...m..
   d9d60:	6d91 000d 6d9d 000d 6da9 000d 6db5 000d     .m...m...m...m..
   d9d70:	6dbd 000d 6dc7 000d 6dd1 000d               .m...m...m..

000d9d7c <_ZSt7nothrow>:
   d9d7c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d9d88 <TWO52>:
   d9d88:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9d98 <__sf_fake_stdin>:
	...

000d9db8 <__sf_fake_stdout>:
	...

000d9dd8 <__sf_fake_stderr>:
	...

000d9df8 <link_const_variable_data_end>:
   d9df8:	000d476d 	.word	0x000d476d
   d9dfc:	000d50b7 	.word	0x000d50b7
   d9e00:	000d5389 	.word	0x000d5389
   d9e04:	000d544d 	.word	0x000d544d
   d9e08:	000d5635 	.word	0x000d5635
   d9e0c:	000d5b99 	.word	0x000d5b99
   d9e10:	000d5d31 	.word	0x000d5d31
   d9e14:	000d5ec5 	.word	0x000d5ec5
   d9e18:	000d6029 	.word	0x000d6029
   d9e1c:	000d6039 	.word	0x000d6039
   d9e20:	000d6091 	.word	0x000d6091
   d9e24:	000d6c9d 	.word	0x000d6c9d
   d9e28:	000d6d55 	.word	0x000d6d55
   d9e2c:	000d6e9d 	.word	0x000d6e9d
   d9e30:	000d7091 	.word	0x000d7091
   d9e34:	000d7115 	.word	0x000d7115
   d9e38:	000d71d9 	.word	0x000d71d9
   d9e3c:	000d729d 	.word	0x000d729d
